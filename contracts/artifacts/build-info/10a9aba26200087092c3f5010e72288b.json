{
	"id": "10a9aba26200087092c3f5010e72288b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/contract.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract LiquidityManager {\n    address public owner;\n    ISwapRouter public swapRouter;\n    INonfungiblePositionManager public positionManager;\n\n    IERC20 public token0; // BNDTIN\n    IERC20 public token1; // USDT\n    uint24 public poolFee;\n\n    uint256 public tokenId;\n\n    constructor(\n        address _swapRouter,\n        address _positionManager,\n        address _token0,\n        address _token1,\n        uint24 _poolFee\n    ) {\n        owner = msg.sender;\n        swapRouter = ISwapRouter(_swapRouter);\n        positionManager = INonfungiblePositionManager(_positionManager);\n        token0 = IERC20(_token0);\n        token1 = IERC20(_token1);\n        poolFee = _poolFee;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the owner\");\n        _;\n    }\n\n    function adjustLiquidity(\n        uint256 amount0Desired,\n        uint256 amount1Desired,\n        int24 tickLower,\n        int24 tickUpper\n    ) external onlyOwner {\n        // Approve tokens\n        token0.approve(address(positionManager), amount0Desired);\n        token1.approve(address(positionManager), amount1Desired);\n\n        // Remove existing liquidity if tokenId exists\n        if (tokenId != 0) {\n            INonfungiblePositionManager.DecreaseLiquidityParams memory params =\n                INonfungiblePositionManager.DecreaseLiquidityParams({\n                    tokenId: tokenId,\n                    liquidity: type(uint128).max,\n                    amount0Min: 0,\n                    amount1Min: 0,\n                    deadline: block.timestamp\n                });\n\n            positionManager.decreaseLiquidity(params);\n\n            // Collect the tokens from the position\n            INonfungiblePositionManager.CollectParams memory collectParams =\n                INonfungiblePositionManager.CollectParams({\n                    tokenId: tokenId,\n                    recipient: address(this),\n                    amount0Max: type(uint128).max,\n                    amount1Max: type(uint128).max\n                });\n\n            positionManager.collect(collectParams);\n\n            // Burn the position\n            positionManager.burn(tokenId);\n        }\n\n        // Add new liquidity\n        INonfungiblePositionManager.MintParams memory mintParams =\n            INonfungiblePositionManager.MintParams({\n                token0: address(token0),\n                token1: address(token1),\n                fee: poolFee,\n                tickLower: tickLower,\n                tickUpper: tickUpper,\n                amount0Desired: amount0Desired,\n                amount1Desired: amount1Desired,\n                amount0Min: 0,\n                amount1Min: 0,\n                recipient: address(this),\n                deadline: block.timestamp\n            });\n\n        (tokenId, , , ) = positionManager.mint(mintParams);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.7.6;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.7.6;\n\n/**\n * @dev Interface of the ERC16 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbf71c4ac7cdf2d10909e349a84ab786e1af48b8ac77cf974d4a145f49082c3e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7dd7b50f7f8d55c92b37d3835d1f5c99d9ccb20e3300e86ec404d68ca003afbf\",\"dweb:/ipfs/QmYVoFyQLNv3oc3mu6fes2jtLBPePggwzQZoZeVFKDBeVK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x4f488275b36896133411eeabc3d7065e8ec89196bf7d85c6fe16272873f1a5eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d136f677d83a5e2a38f5757991e23818b6f9c86eac8d3b0be72fc5c34dfd6b16\",\"dweb:/ipfs/QmWyHCPYvisxLN3ZuSVmCk4pNicguxe31AGcxtBJcHMowx\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x401dd29dbec7efd863dbd2013ac47888057e33fcec3b3d88215c544bf5b7bfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e70c0d286c312fd995eb8557d64c90ea9a5067e779a8048bbb1dfc554add4f5e\",\"dweb:/ipfs/Qmc5TGDWyeMm579GNyQsEFnFiiKRgBeMjdfUL12LJYHAHW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x4f488275b36896133411eeabc3d7065e8ec89196bf7d85c6fe16272873f1a5eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d136f677d83a5e2a38f5757991e23818b6f9c86eac8d3b0be72fc5c34dfd6b16\",\"dweb:/ipfs/QmWyHCPYvisxLN3ZuSVmCk4pNicguxe31AGcxtBJcHMowx\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c354c3f6e9c487759aa7869be4fba68e0b2efc777b514d289c4cbd3ff8f7e1a\",\"dweb:/ipfs/QmdF9LcSYVmiUCL7JxLEYmSLrjga6zJsujfi6sgEJD4M1z\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x401dd29dbec7efd863dbd2013ac47888057e33fcec3b3d88215c544bf5b7bfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e70c0d286c312fd995eb8557d64c90ea9a5067e779a8048bbb1dfc554add4f5e\",\"dweb:/ipfs/Qmc5TGDWyeMm579GNyQsEFnFiiKRgBeMjdfUL12LJYHAHW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x4f488275b36896133411eeabc3d7065e8ec89196bf7d85c6fe16272873f1a5eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d136f677d83a5e2a38f5757991e23818b6f9c86eac8d3b0be72fc5c34dfd6b16\",\"dweb:/ipfs/QmWyHCPYvisxLN3ZuSVmCk4pNicguxe31AGcxtBJcHMowx\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://430255ad2229ced6d880e61a67bdc6e48dbbaed8354a7c1fe918cd8b8714a886\",\"dweb:/ipfs/QmTHY56odzqEpEC6v6tafaWMYY7vmULw25q5XHJLCCAeox\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x401dd29dbec7efd863dbd2013ac47888057e33fcec3b3d88215c544bf5b7bfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e70c0d286c312fd995eb8557d64c90ea9a5067e779a8048bbb1dfc554add4f5e\",\"dweb:/ipfs/Qmc5TGDWyeMm579GNyQsEFnFiiKRgBeMjdfUL12LJYHAHW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC16 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC16 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x401dd29dbec7efd863dbd2013ac47888057e33fcec3b3d88215c544bf5b7bfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e70c0d286c312fd995eb8557d64c90ea9a5067e779a8048bbb1dfc554add4f5e\",\"dweb:/ipfs/Qmc5TGDWyeMm579GNyQsEFnFiiKRgBeMjdfUL12LJYHAHW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
				"IERC721Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC721 with permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721 with permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"}},\"notice\":\"Extension to ERC721 that includes a permit function for signature based approvals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":\"IERC721Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x4f488275b36896133411eeabc3d7065e8ec89196bf7d85c6fe16272873f1a5eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d136f677d83a5e2a38f5757991e23818b6f9c86eac8d3b0be72fc5c34dfd6b16\",\"dweb:/ipfs/QmWyHCPYvisxLN3ZuSVmCk4pNicguxe31AGcxtBJcHMowx\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x401dd29dbec7efd863dbd2013ac47888057e33fcec3b3d88215c544bf5b7bfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e70c0d286c312fd995eb8557d64c90ea9a5067e779a8048bbb1dfc554add4f5e\",\"dweb:/ipfs/Qmc5TGDWyeMm579GNyQsEFnFiiKRgBeMjdfUL12LJYHAHW\"]},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							}
						},
						"notice": "Extension to ERC721 that includes a permit function for signature based approvals",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"fee": "The fee associated with the pool",
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"WETH9()": "4aa4a4fc",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"factory()": "c45a0155",
							"getApproved(uint256)": "081812fc",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": "88316456",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"positions(uint256)": "99fbab88",
							"refundETH()": "12210e8a",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"fee\":\"The fee associated with the pool\",\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipient\"},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x4f488275b36896133411eeabc3d7065e8ec89196bf7d85c6fe16272873f1a5eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d136f677d83a5e2a38f5757991e23818b6f9c86eac8d3b0be72fc5c34dfd6b16\",\"dweb:/ipfs/QmWyHCPYvisxLN3ZuSVmCk4pNicguxe31AGcxtBJcHMowx\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c354c3f6e9c487759aa7869be4fba68e0b2efc777b514d289c4cbd3ff8f7e1a\",\"dweb:/ipfs/QmdF9LcSYVmiUCL7JxLEYmSLrjga6zJsujfi6sgEJD4M1z\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://430255ad2229ced6d880e61a67bdc6e48dbbaed8354a7c1fe918cd8b8714a886\",\"dweb:/ipfs/QmTHY56odzqEpEC6v6tafaWMYY7vmULw25q5XHJLCCAeox\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x401dd29dbec7efd863dbd2013ac47888057e33fcec3b3d88215c544bf5b7bfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e70c0d286c312fd995eb8557d64c90ea9a5067e779a8048bbb1dfc554add4f5e\",\"dweb:/ipfs/Qmc5TGDWyeMm579GNyQsEFnFiiKRgBeMjdfUL12LJYHAHW\"]},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e3b10f75c101de044c1253672207399c1513fd1f0f17be31069c18c0b9a1460\",\"dweb:/ipfs/QmXrkXNY6njQfepE7KbRtJMruGXfrZwsMMsW7m5e3XS9Hf\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840\",\"dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							}
						},
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
				"IPoolInitializer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							}
						},
						"title": "Creates and initializes V3 Pools",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							}
						},
						"notice": "Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"ISwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"exactInput((bytes,address,uint256,uint256,uint256))": "c04b8d59",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "414bf389",
							"exactOutput((bytes,address,uint256,uint256,uint256))": "f28c0498",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "db3e2198",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Functions for swapping tokens via Uniswap V3",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":167:1819  library PoolAddress {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":167:1819  library PoolAddress {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e598cd987054a00a6f463b25d9d688cc9588ead5aaafea5cf5779e9f31c7319164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e598cd987054a00a6f463b25d9d688cc9588ead5aaafea5cf5779e9f31c7319164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 SWAP9 0xCD SWAP9 PUSH17 0x54A00A6F463B25D9D688CC9588EAD5AAAF 0xEA 0x5C CREATE2 PUSH24 0x9E9F31C7319164736F6C6343000706003300000000000000 ",
							"sourceMap": "167:1652:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e598cd987054a00a6f463b25d9d688cc9588ead5aaafea5cf5779e9f31c7319164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 SWAP9 0xCD SWAP9 PUSH17 0x54A00A6F463B25D9D688CC9588EAD5AAAF 0xEA 0x5C CREATE2 PUSH24 0x9E9F31C7319164736F6C6343000706003300000000000000 ",
							"sourceMap": "167:1652:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "INVALID",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 167,
									"end": 1819,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e598cd987054a00a6f463b25d9d688cc9588ead5aaafea5cf5779e9f31c7319164736f6c63430007060033",
									".code": [
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 167,
											"end": 1819,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840\",\"dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contract.sol": {
				"LiquidityManager": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_swapRouter",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_positionManager",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "_poolFee",
									"type": "uint24"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount0Desired",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1Desired",
									"type": "uint256"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "adjustLiquidity",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "poolFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "positionManager",
							"outputs": [
								{
									"internalType": "contract INonfungiblePositionManager",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapRouter",
							"outputs": [
								{
									"internalType": "contract ISwapRouter",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/contract.sol\":289:3116  contract LiquidityManager {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/contract.sol\":566:973  constructor(... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/contract.sol\":740:750  msg.sender */\n  caller\n    /* \"contracts/contract.sol\":732:737  owner */\n  0x00\n  dup1\n    /* \"contracts/contract.sol\":732:750  owner = msg.sender */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/contract.sol\":785:796  _swapRouter */\n  dup5\n    /* \"contracts/contract.sol\":760:770  swapRouter */\n  0x01\n  0x00\n    /* \"contracts/contract.sol\":760:797  swapRouter = ISwapRouter(_swapRouter) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/contract.sol\":853:869  _positionManager */\n  dup4\n    /* \"contracts/contract.sol\":807:822  positionManager */\n  0x02\n  0x00\n    /* \"contracts/contract.sol\":807:870  positionManager = INonfungiblePositionManager(_positionManager) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/contract.sol\":896:903  _token0 */\n  dup3\n    /* \"contracts/contract.sol\":880:886  token0 */\n  0x03\n  0x00\n    /* \"contracts/contract.sol\":880:904  token0 = IERC20(_token0) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/contract.sol\":930:937  _token1 */\n  dup2\n    /* \"contracts/contract.sol\":914:920  token1 */\n  0x04\n  0x00\n    /* \"contracts/contract.sol\":914:938  token1 = IERC20(_token1) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/contract.sol\":958:966  _poolFee */\n  dup1\n    /* \"contracts/contract.sol\":948:955  poolFee */\n  0x04\n  0x14\n    /* \"contracts/contract.sol\":948:966  poolFee = _poolFee */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/contract.sol\":566:973  constructor(... */\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"contracts/contract.sol\":289:3116  contract LiquidityManager {... */\n  jump(tag_6)\n    /* \"#utility.yul\":7:150   */\ntag_8:\n  0x00\n    /* \"#utility.yul\":95:101   */\n  dup2\n    /* \"#utility.yul\":89:102   */\n  mload\n    /* \"#utility.yul\":80:102   */\n  swap1\n  pop\n    /* \"#utility.yul\":111:144   */\n  tag_10\n    /* \"#utility.yul\":138:143   */\n  dup2\n    /* \"#utility.yul\":111:144   */\n  tag_11\n  jump\t// in\ntag_10:\n    /* \"#utility.yul\":70:150   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":156:297   */\ntag_12:\n  0x00\n    /* \"#utility.yul\":243:249   */\n  dup2\n    /* \"#utility.yul\":237:250   */\n  mload\n    /* \"#utility.yul\":228:250   */\n  swap1\n  pop\n    /* \"#utility.yul\":259:291   */\n  tag_14\n    /* \"#utility.yul\":285:290   */\n  dup2\n    /* \"#utility.yul\":259:291   */\n  tag_15\n  jump\t// in\ntag_14:\n    /* \"#utility.yul\":218:297   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":303:1211   */\ntag_3:\n  0x00\n  dup1\n  0x00\n  dup1\n  0x00\n    /* \"#utility.yul\":489:492   */\n  0xa0\n    /* \"#utility.yul\":477:486   */\n  dup7\n    /* \"#utility.yul\":468:475   */\n  dup9\n    /* \"#utility.yul\":464:487   */\n  sub\n    /* \"#utility.yul\":460:493   */\n  slt\n    /* \"#utility.yul\":457:459   */\n  iszero\n  tag_17\n  jumpi\n    /* \"#utility.yul\":506:507   */\n  0x00\n    /* \"#utility.yul\":503:504   */\n  dup1\n    /* \"#utility.yul\":496:508   */\n  revert\n    /* \"#utility.yul\":457:459   */\ntag_17:\n    /* \"#utility.yul\":549:550   */\n  0x00\n    /* \"#utility.yul\":574:638   */\n  tag_18\n    /* \"#utility.yul\":630:637   */\n  dup9\n    /* \"#utility.yul\":621:627   */\n  dup3\n    /* \"#utility.yul\":610:619   */\n  dup10\n    /* \"#utility.yul\":606:628   */\n  add\n    /* \"#utility.yul\":574:638   */\n  tag_8\n  jump\t// in\ntag_18:\n    /* \"#utility.yul\":564:638   */\n  swap6\n  pop\n    /* \"#utility.yul\":520:648   */\n  pop\n    /* \"#utility.yul\":687:689   */\n  0x20\n    /* \"#utility.yul\":713:777   */\n  tag_19\n    /* \"#utility.yul\":769:776   */\n  dup9\n    /* \"#utility.yul\":760:766   */\n  dup3\n    /* \"#utility.yul\":749:758   */\n  dup10\n    /* \"#utility.yul\":745:767   */\n  add\n    /* \"#utility.yul\":713:777   */\n  tag_8\n  jump\t// in\ntag_19:\n    /* \"#utility.yul\":703:777   */\n  swap5\n  pop\n    /* \"#utility.yul\":658:787   */\n  pop\n    /* \"#utility.yul\":826:828   */\n  0x40\n    /* \"#utility.yul\":852:916   */\n  tag_20\n    /* \"#utility.yul\":908:915   */\n  dup9\n    /* \"#utility.yul\":899:905   */\n  dup3\n    /* \"#utility.yul\":888:897   */\n  dup10\n    /* \"#utility.yul\":884:906   */\n  add\n    /* \"#utility.yul\":852:916   */\n  tag_8\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":842:916   */\n  swap4\n  pop\n    /* \"#utility.yul\":797:926   */\n  pop\n    /* \"#utility.yul\":965:967   */\n  0x60\n    /* \"#utility.yul\":991:1055   */\n  tag_21\n    /* \"#utility.yul\":1047:1054   */\n  dup9\n    /* \"#utility.yul\":1038:1044   */\n  dup3\n    /* \"#utility.yul\":1027:1036   */\n  dup10\n    /* \"#utility.yul\":1023:1045   */\n  add\n    /* \"#utility.yul\":991:1055   */\n  tag_8\n  jump\t// in\ntag_21:\n    /* \"#utility.yul\":981:1055   */\n  swap3\n  pop\n    /* \"#utility.yul\":936:1065   */\n  pop\n    /* \"#utility.yul\":1104:1107   */\n  0x80\n    /* \"#utility.yul\":1131:1194   */\n  tag_22\n    /* \"#utility.yul\":1186:1193   */\n  dup9\n    /* \"#utility.yul\":1177:1183   */\n  dup3\n    /* \"#utility.yul\":1166:1175   */\n  dup10\n    /* \"#utility.yul\":1162:1184   */\n  add\n    /* \"#utility.yul\":1131:1194   */\n  tag_12\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":1121:1194   */\n  swap2\n  pop\n    /* \"#utility.yul\":1075:1204   */\n  pop\n    /* \"#utility.yul\":447:1211   */\n  swap3\n  swap6\n  pop\n  swap3\n  swap6\n  swap1\n  swap4\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1217:1313   */\ntag_23:\n  0x00\n    /* \"#utility.yul\":1283:1307   */\n  tag_25\n    /* \"#utility.yul\":1301:1306   */\n  dup3\n    /* \"#utility.yul\":1283:1307   */\n  tag_26\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":1272:1307   */\n  swap1\n  pop\n    /* \"#utility.yul\":1262:1313   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1319:1445   */\ntag_26:\n  0x00\n    /* \"#utility.yul\":1396:1438   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":1389:1394   */\n  dup3\n    /* \"#utility.yul\":1385:1439   */\n  and\n    /* \"#utility.yul\":1374:1439   */\n  swap1\n  pop\n    /* \"#utility.yul\":1364:1445   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1451:1542   */\ntag_28:\n  0x00\n    /* \"#utility.yul\":1527:1535   */\n  0xffffff\n    /* \"#utility.yul\":1520:1525   */\n  dup3\n    /* \"#utility.yul\":1516:1536   */\n  and\n    /* \"#utility.yul\":1505:1536   */\n  swap1\n  pop\n    /* \"#utility.yul\":1495:1542   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1548:1670   */\ntag_11:\n    /* \"#utility.yul\":1621:1645   */\n  tag_31\n    /* \"#utility.yul\":1639:1644   */\n  dup2\n    /* \"#utility.yul\":1621:1645   */\n  tag_23\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":1614:1619   */\n  dup2\n    /* \"#utility.yul\":1611:1646   */\n  eq\n    /* \"#utility.yul\":1601:1603   */\n  tag_32\n  jumpi\n    /* \"#utility.yul\":1660:1661   */\n  0x00\n    /* \"#utility.yul\":1657:1658   */\n  dup1\n    /* \"#utility.yul\":1650:1662   */\n  revert\n    /* \"#utility.yul\":1601:1603   */\ntag_32:\n    /* \"#utility.yul\":1591:1670   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1676:1796   */\ntag_15:\n    /* \"#utility.yul\":1748:1771   */\n  tag_34\n    /* \"#utility.yul\":1765:1770   */\n  dup2\n    /* \"#utility.yul\":1748:1771   */\n  tag_28\n  jump\t// in\ntag_34:\n    /* \"#utility.yul\":1741:1746   */\n  dup2\n    /* \"#utility.yul\":1738:1772   */\n  eq\n    /* \"#utility.yul\":1728:1730   */\n  tag_35\n  jumpi\n    /* \"#utility.yul\":1786:1787   */\n  0x00\n    /* \"#utility.yul\":1783:1784   */\n  dup1\n    /* \"#utility.yul\":1776:1788   */\n  revert\n    /* \"#utility.yul\":1728:1730   */\ntag_35:\n    /* \"#utility.yul\":1718:1796   */\n  pop\n  jump\t// out\n    /* \"contracts/contract.sol\":289:3116  contract LiquidityManager {... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/contract.sol\":289:3116  contract LiquidityManager {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x791b98bc\n      gt\n      tag_11\n      jumpi\n      dup1\n      0x791b98bc\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xc31c9c07\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xd21220a7\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_11:\n      dup1\n      0x089fe6aa\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x0dfe1681\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x17d70f7c\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x65237b90\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/contract.sol\":509:530  uint24 public poolFee */\n    tag_3:\n      tag_12\n      tag_13\n      jump\t// in\n    tag_12:\n      mload(0x40)\n      tag_14\n      swap2\n      swap1\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/contract.sol\":439:459  IERC20 public token0 */\n    tag_4:\n      tag_16\n      tag_17\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      tag_18\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/contract.sol\":537:559  uint256 public tokenId */\n    tag_5:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/contract.sol\":1079:3114  function adjustLiquidity(... */\n    tag_6:\n      tag_24\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      tag_27\n      jump\t// in\n    tag_24:\n      stop\n        /* \"contracts/contract.sol\":382:432  INonfungiblePositionManager public positionManager */\n    tag_7:\n      tag_28\n      tag_29\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/contract.sol\":321:341  address public owner */\n    tag_8:\n      tag_32\n      tag_33\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      tag_34\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/contract.sol\":347:376  ISwapRouter public swapRouter */\n    tag_9:\n      tag_36\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/contract.sol\":475:495  IERC20 public token1 */\n    tag_10:\n      tag_40\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      tag_42\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/contract.sol\":509:530  uint24 public poolFee */\n    tag_13:\n      0x04\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/contract.sol\":439:459  IERC20 public token0 */\n    tag_17:\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/contract.sol\":537:559  uint256 public tokenId */\n    tag_21:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/contract.sol\":1079:3114  function adjustLiquidity(... */\n    tag_27:\n        /* \"contracts/contract.sol\":1032:1037  owner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":1018:1037  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":1018:1028  msg.sender */\n      caller\n        /* \"contracts/contract.sol\":1018:1037  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/contract.sol\":1010:1055  require(msg.sender == owner, \"Not the owner\") */\n      tag_44\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_45\n      swap1\n      tag_46\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_44:\n        /* \"contracts/contract.sol\":1279:1285  token0 */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":1279:1293  token0.approve */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x095ea7b3\n        /* \"contracts/contract.sol\":1302:1317  positionManager */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":1320:1334  amount0Desired */\n      dup7\n        /* \"contracts/contract.sol\":1279:1335  token0.approve(address(positionManager), amount0Desired) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_48\n      swap3\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_48:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_52\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_52:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      pop\n        /* \"contracts/contract.sol\":1345:1351  token1 */\n      0x04\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":1345:1359  token1.approve */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x095ea7b3\n        /* \"contracts/contract.sol\":1368:1383  positionManager */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":1386:1400  amount1Desired */\n      dup6\n        /* \"contracts/contract.sol\":1345:1401  token1.approve(address(positionManager), amount1Desired) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_55\n      swap3\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_55:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_56\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_56:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_58\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_58:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_59\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_59:\n      pop\n        /* \"contracts/contract.sol\":1482:1483  0 */\n      0x00\n        /* \"contracts/contract.sol\":1471:1478  tokenId */\n      sload(0x05)\n        /* \"contracts/contract.sol\":1471:1483  tokenId != 0 */\n      eq\n        /* \"contracts/contract.sol\":1467:2451  if (tokenId != 0) {... */\n      tag_60\n      jumpi\n        /* \"contracts/contract.sol\":1499:1564  INonfungiblePositionManager.DecreaseLiquidityParams memory params */\n      0x00\n        /* \"contracts/contract.sol\":1583:1859  INonfungiblePositionManager.DecreaseLiquidityParams({... */\n      mload(0x40)\n      dup1\n      0xa0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/contract.sol\":1666:1673  tokenId */\n      sload(0x05)\n        /* \"contracts/contract.sol\":1583:1859  INonfungiblePositionManager.DecreaseLiquidityParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":1706:1723  type(uint128).max */\n      0xffffffffffffffffffffffffffffffff\n        /* \"contracts/contract.sol\":1583:1859  INonfungiblePositionManager.DecreaseLiquidityParams({... */\n      dup1\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":1757:1758  0 */\n      0x00\n        /* \"contracts/contract.sol\":1583:1859  INonfungiblePositionManager.DecreaseLiquidityParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":1792:1793  0 */\n      0x00\n        /* \"contracts/contract.sol\":1583:1859  INonfungiblePositionManager.DecreaseLiquidityParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":1825:1840  block.timestamp */\n      timestamp\n        /* \"contracts/contract.sol\":1583:1859  INonfungiblePositionManager.DecreaseLiquidityParams({... */\n      dup2\n      mstore\n      pop\n        /* \"contracts/contract.sol\":1499:1859  INonfungiblePositionManager.DecreaseLiquidityParams memory params =... */\n      swap1\n      pop\n        /* \"contracts/contract.sol\":1874:1889  positionManager */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":1874:1907  positionManager.decreaseLiquidity */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x0c49ccbe\n        /* \"contracts/contract.sol\":1908:1914  params */\n      dup3\n        /* \"contracts/contract.sol\":1874:1915  positionManager.decreaseLiquidity(params) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_61\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_61:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_63\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_63:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_65\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_65:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_66\n      swap2\n      swap1\n      tag_67\n      jump\t// in\n    tag_66:\n      pop\n      pop\n        /* \"contracts/contract.sol\":1982:2044  INonfungiblePositionManager.CollectParams memory collectParams */\n      0x00\n        /* \"contracts/contract.sol\":2063:2310  INonfungiblePositionManager.CollectParams({... */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/contract.sol\":2136:2143  tokenId */\n      sload(0x05)\n        /* \"contracts/contract.sol\":2063:2310  INonfungiblePositionManager.CollectParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2184:2188  this */\n      address\n        /* \"contracts/contract.sol\":2063:2310  INonfungiblePositionManager.CollectParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2223:2240  type(uint128).max */\n      0xffffffffffffffffffffffffffffffff\n        /* \"contracts/contract.sol\":2063:2310  INonfungiblePositionManager.CollectParams({... */\n      dup1\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2274:2291  type(uint128).max */\n      0xffffffffffffffffffffffffffffffff\n        /* \"contracts/contract.sol\":2063:2310  INonfungiblePositionManager.CollectParams({... */\n      dup1\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/contract.sol\":1982:2310  INonfungiblePositionManager.CollectParams memory collectParams =... */\n      swap1\n      pop\n        /* \"contracts/contract.sol\":2325:2340  positionManager */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":2325:2348  positionManager.collect */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xfc6f7865\n        /* \"contracts/contract.sol\":2349:2362  collectParams */\n      dup3\n        /* \"contracts/contract.sol\":2325:2363  positionManager.collect(collectParams) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_68\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_68:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_70\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_70:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_72\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_72:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_73\n      swap2\n      swap1\n      tag_67\n      jump\t// in\n    tag_73:\n      pop\n      pop\n        /* \"contracts/contract.sol\":2411:2426  positionManager */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":2411:2431  positionManager.burn */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x42966c68\n        /* \"contracts/contract.sol\":2432:2439  tokenId */\n      sload(0x05)\n        /* \"contracts/contract.sol\":2411:2440  positionManager.burn(tokenId) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_74\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_74:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_77\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_77:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/contract.sol\":1467:2451  if (tokenId != 0) {... */\n      pop\n      pop\n    tag_60:\n        /* \"contracts/contract.sol\":2490:2546  INonfungiblePositionManager.MintParams memory mintParams */\n      0x00\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      mload(0x40)\n      dup1\n      0x0160\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/contract.sol\":2634:2640  token0 */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2675:2681  token1 */\n      0x04\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2705:2712  poolFee */\n      0x04\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffff\n      and\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      0xffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2741:2750  tickLower */\n      dup5\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      0x02\n      signextend\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2779:2788  tickUpper */\n      dup4\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      0x02\n      signextend\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2822:2836  amount0Desired */\n      dup7\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2870:2884  amount1Desired */\n      dup6\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2914:2915  0 */\n      0x00\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2945:2946  0 */\n      0x00\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":2983:2987  this */\n      address\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/contract.sol\":3016:3031  block.timestamp */\n      timestamp\n        /* \"contracts/contract.sol\":2561:3046  INonfungiblePositionManager.MintParams({... */\n      dup2\n      mstore\n      pop\n        /* \"contracts/contract.sol\":2490:3046  INonfungiblePositionManager.MintParams memory mintParams =... */\n      swap1\n      pop\n        /* \"contracts/contract.sol\":3075:3090  positionManager */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/contract.sol\":3075:3095  positionManager.mint */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x88316456\n        /* \"contracts/contract.sol\":3096:3106  mintParams */\n      dup3\n        /* \"contracts/contract.sol\":3075:3107  positionManager.mint(mintParams) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_78\n      swap2\n      swap1\n      tag_79\n      jump\t// in\n    tag_78:\n      0x80\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_80\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_80:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_82\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_82:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_83\n      swap2\n      swap1\n      tag_84\n      jump\t// in\n    tag_83:\n        /* \"contracts/contract.sol\":3057:3107  (tokenId, , , ) = positionManager.mint(mintParams) */\n      swap1\n      swap2\n      pop\n      swap1\n      pop\n      pop\n        /* \"contracts/contract.sol\":3058:3065  tokenId */\n      0x05\n      0x00\n        /* \"contracts/contract.sol\":3057:3107  (tokenId, , , ) = positionManager.mint(mintParams) */\n      dup3\n      swap2\n      swap1\n      pop\n      sstore\n      pop\n        /* \"contracts/contract.sol\":1065:1066  _ */\n      pop\n        /* \"contracts/contract.sol\":1079:3114  function adjustLiquidity(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/contract.sol\":382:432  INonfungiblePositionManager public positionManager */\n    tag_29:\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/contract.sol\":321:341  address public owner */\n    tag_33:\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/contract.sol\":347:376  ISwapRouter public swapRouter */\n    tag_37:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/contract.sol\":475:495  IERC20 public token1 */\n    tag_41:\n      0x04\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"#utility.yul\":7:144   */\n    tag_86:\n      0x00\n        /* \"#utility.yul\":92:98   */\n      dup2\n        /* \"#utility.yul\":86:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":108:138   */\n      tag_88\n        /* \"#utility.yul\":132:137   */\n      dup2\n        /* \"#utility.yul\":108:138   */\n      tag_89\n      jump\t// in\n    tag_88:\n        /* \"#utility.yul\":67:144   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":150:285   */\n    tag_90:\n      0x00\n        /* \"#utility.yul\":232:238   */\n      dup2\n        /* \"#utility.yul\":219:239   */\n      calldataload\n        /* \"#utility.yul\":210:239   */\n      swap1\n      pop\n        /* \"#utility.yul\":248:279   */\n      tag_92\n        /* \"#utility.yul\":273:278   */\n      dup2\n        /* \"#utility.yul\":248:279   */\n      tag_93\n      jump\t// in\n    tag_92:\n        /* \"#utility.yul\":200:285   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":291:434   */\n    tag_94:\n      0x00\n        /* \"#utility.yul\":379:385   */\n      dup2\n        /* \"#utility.yul\":373:386   */\n      mload\n        /* \"#utility.yul\":364:386   */\n      swap1\n      pop\n        /* \"#utility.yul\":395:428   */\n      tag_96\n        /* \"#utility.yul\":422:427   */\n      dup2\n        /* \"#utility.yul\":395:428   */\n      tag_97\n      jump\t// in\n    tag_96:\n        /* \"#utility.yul\":354:434   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":440:579   */\n    tag_98:\n      0x00\n        /* \"#utility.yul\":524:530   */\n      dup2\n        /* \"#utility.yul\":511:531   */\n      calldataload\n        /* \"#utility.yul\":502:531   */\n      swap1\n      pop\n        /* \"#utility.yul\":540:573   */\n      tag_100\n        /* \"#utility.yul\":567:572   */\n      dup2\n        /* \"#utility.yul\":540:573   */\n      tag_101\n      jump\t// in\n    tag_100:\n        /* \"#utility.yul\":492:579   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":585:728   */\n    tag_102:\n      0x00\n        /* \"#utility.yul\":673:679   */\n      dup2\n        /* \"#utility.yul\":667:680   */\n      mload\n        /* \"#utility.yul\":658:680   */\n      swap1\n      pop\n        /* \"#utility.yul\":689:722   */\n      tag_104\n        /* \"#utility.yul\":716:721   */\n      dup2\n        /* \"#utility.yul\":689:722   */\n      tag_101\n      jump\t// in\n    tag_104:\n        /* \"#utility.yul\":648:728   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":734:1012   */\n    tag_54:\n      0x00\n        /* \"#utility.yul\":850:852   */\n      0x20\n        /* \"#utility.yul\":838:847   */\n      dup3\n        /* \"#utility.yul\":829:836   */\n      dup5\n        /* \"#utility.yul\":825:848   */\n      sub\n        /* \"#utility.yul\":821:853   */\n      slt\n        /* \"#utility.yul\":818:820   */\n      iszero\n      tag_106\n      jumpi\n        /* \"#utility.yul\":866:867   */\n      0x00\n        /* \"#utility.yul\":863:864   */\n      dup1\n        /* \"#utility.yul\":856:868   */\n      revert\n        /* \"#utility.yul\":818:820   */\n    tag_106:\n        /* \"#utility.yul\":909:910   */\n      0x00\n        /* \"#utility.yul\":934:995   */\n      tag_107\n        /* \"#utility.yul\":987:994   */\n      dup5\n        /* \"#utility.yul\":978:984   */\n      dup3\n        /* \"#utility.yul\":967:976   */\n      dup6\n        /* \"#utility.yul\":963:985   */\n      add\n        /* \"#utility.yul\":934:995   */\n      tag_86\n      jump\t// in\n    tag_107:\n        /* \"#utility.yul\":924:995   */\n      swap2\n      pop\n        /* \"#utility.yul\":880:1005   */\n      pop\n        /* \"#utility.yul\":808:1012   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1018:1771   */\n    tag_84:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":1188:1191   */\n      0x80\n        /* \"#utility.yul\":1176:1185   */\n      dup6\n        /* \"#utility.yul\":1167:1174   */\n      dup8\n        /* \"#utility.yul\":1163:1186   */\n      sub\n        /* \"#utility.yul\":1159:1192   */\n      slt\n        /* \"#utility.yul\":1156:1158   */\n      iszero\n      tag_109\n      jumpi\n        /* \"#utility.yul\":1205:1206   */\n      0x00\n        /* \"#utility.yul\":1202:1203   */\n      dup1\n        /* \"#utility.yul\":1195:1207   */\n      revert\n        /* \"#utility.yul\":1156:1158   */\n    tag_109:\n        /* \"#utility.yul\":1248:1249   */\n      0x00\n        /* \"#utility.yul\":1273:1337   */\n      tag_110\n        /* \"#utility.yul\":1329:1336   */\n      dup8\n        /* \"#utility.yul\":1320:1326   */\n      dup3\n        /* \"#utility.yul\":1309:1318   */\n      dup9\n        /* \"#utility.yul\":1305:1327   */\n      add\n        /* \"#utility.yul\":1273:1337   */\n      tag_102\n      jump\t// in\n    tag_110:\n        /* \"#utility.yul\":1263:1337   */\n      swap5\n      pop\n        /* \"#utility.yul\":1219:1347   */\n      pop\n        /* \"#utility.yul\":1386:1388   */\n      0x20\n        /* \"#utility.yul\":1412:1476   */\n      tag_111\n        /* \"#utility.yul\":1468:1475   */\n      dup8\n        /* \"#utility.yul\":1459:1465   */\n      dup3\n        /* \"#utility.yul\":1448:1457   */\n      dup9\n        /* \"#utility.yul\":1444:1466   */\n      add\n        /* \"#utility.yul\":1412:1476   */\n      tag_94\n      jump\t// in\n    tag_111:\n        /* \"#utility.yul\":1402:1476   */\n      swap4\n      pop\n        /* \"#utility.yul\":1357:1486   */\n      pop\n        /* \"#utility.yul\":1525:1527   */\n      0x40\n        /* \"#utility.yul\":1551:1615   */\n      tag_112\n        /* \"#utility.yul\":1607:1614   */\n      dup8\n        /* \"#utility.yul\":1598:1604   */\n      dup3\n        /* \"#utility.yul\":1587:1596   */\n      dup9\n        /* \"#utility.yul\":1583:1605   */\n      add\n        /* \"#utility.yul\":1551:1615   */\n      tag_102\n      jump\t// in\n    tag_112:\n        /* \"#utility.yul\":1541:1615   */\n      swap3\n      pop\n        /* \"#utility.yul\":1496:1625   */\n      pop\n        /* \"#utility.yul\":1664:1666   */\n      0x60\n        /* \"#utility.yul\":1690:1754   */\n      tag_113\n        /* \"#utility.yul\":1746:1753   */\n      dup8\n        /* \"#utility.yul\":1737:1743   */\n      dup3\n        /* \"#utility.yul\":1726:1735   */\n      dup9\n        /* \"#utility.yul\":1722:1744   */\n      add\n        /* \"#utility.yul\":1690:1754   */\n      tag_102\n      jump\t// in\n    tag_113:\n        /* \"#utility.yul\":1680:1754   */\n      swap2\n      pop\n        /* \"#utility.yul\":1635:1764   */\n      pop\n        /* \"#utility.yul\":1146:1771   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1777:2217   */\n    tag_67:\n      0x00\n      dup1\n        /* \"#utility.yul\":1913:1915   */\n      0x40\n        /* \"#utility.yul\":1901:1910   */\n      dup4\n        /* \"#utility.yul\":1892:1899   */\n      dup6\n        /* \"#utility.yul\":1888:1911   */\n      sub\n        /* \"#utility.yul\":1884:1916   */\n      slt\n        /* \"#utility.yul\":1881:1883   */\n      iszero\n      tag_115\n      jumpi\n        /* \"#utility.yul\":1929:1930   */\n      0x00\n        /* \"#utility.yul\":1926:1927   */\n      dup1\n        /* \"#utility.yul\":1919:1931   */\n      revert\n        /* \"#utility.yul\":1881:1883   */\n    tag_115:\n        /* \"#utility.yul\":1972:1973   */\n      0x00\n        /* \"#utility.yul\":1997:2061   */\n      tag_116\n        /* \"#utility.yul\":2053:2060   */\n      dup6\n        /* \"#utility.yul\":2044:2050   */\n      dup3\n        /* \"#utility.yul\":2033:2042   */\n      dup7\n        /* \"#utility.yul\":2029:2051   */\n      add\n        /* \"#utility.yul\":1997:2061   */\n      tag_102\n      jump\t// in\n    tag_116:\n        /* \"#utility.yul\":1987:2061   */\n      swap3\n      pop\n        /* \"#utility.yul\":1943:2071   */\n      pop\n        /* \"#utility.yul\":2110:2112   */\n      0x20\n        /* \"#utility.yul\":2136:2200   */\n      tag_117\n        /* \"#utility.yul\":2192:2199   */\n      dup6\n        /* \"#utility.yul\":2183:2189   */\n      dup3\n        /* \"#utility.yul\":2172:2181   */\n      dup7\n        /* \"#utility.yul\":2168:2190   */\n      add\n        /* \"#utility.yul\":2136:2200   */\n      tag_102\n      jump\t// in\n    tag_117:\n        /* \"#utility.yul\":2126:2200   */\n      swap2\n      pop\n        /* \"#utility.yul\":2081:2210   */\n      pop\n        /* \"#utility.yul\":1871:2217   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2223:2913   */\n    tag_26:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":2378:2381   */\n      0x80\n        /* \"#utility.yul\":2366:2375   */\n      dup6\n        /* \"#utility.yul\":2357:2364   */\n      dup8\n        /* \"#utility.yul\":2353:2376   */\n      sub\n        /* \"#utility.yul\":2349:2382   */\n      slt\n        /* \"#utility.yul\":2346:2348   */\n      iszero\n      tag_119\n      jumpi\n        /* \"#utility.yul\":2395:2396   */\n      0x00\n        /* \"#utility.yul\":2392:2393   */\n      dup1\n        /* \"#utility.yul\":2385:2397   */\n      revert\n        /* \"#utility.yul\":2346:2348   */\n    tag_119:\n        /* \"#utility.yul\":2438:2439   */\n      0x00\n        /* \"#utility.yul\":2463:2516   */\n      tag_120\n        /* \"#utility.yul\":2508:2515   */\n      dup8\n        /* \"#utility.yul\":2499:2505   */\n      dup3\n        /* \"#utility.yul\":2488:2497   */\n      dup9\n        /* \"#utility.yul\":2484:2506   */\n      add\n        /* \"#utility.yul\":2463:2516   */\n      tag_98\n      jump\t// in\n    tag_120:\n        /* \"#utility.yul\":2453:2516   */\n      swap5\n      pop\n        /* \"#utility.yul\":2409:2526   */\n      pop\n        /* \"#utility.yul\":2565:2567   */\n      0x20\n        /* \"#utility.yul\":2591:2644   */\n      tag_121\n        /* \"#utility.yul\":2636:2643   */\n      dup8\n        /* \"#utility.yul\":2627:2633   */\n      dup3\n        /* \"#utility.yul\":2616:2625   */\n      dup9\n        /* \"#utility.yul\":2612:2634   */\n      add\n        /* \"#utility.yul\":2591:2644   */\n      tag_98\n      jump\t// in\n    tag_121:\n        /* \"#utility.yul\":2581:2644   */\n      swap4\n      pop\n        /* \"#utility.yul\":2536:2654   */\n      pop\n        /* \"#utility.yul\":2693:2695   */\n      0x40\n        /* \"#utility.yul\":2719:2770   */\n      tag_122\n        /* \"#utility.yul\":2762:2769   */\n      dup8\n        /* \"#utility.yul\":2753:2759   */\n      dup3\n        /* \"#utility.yul\":2742:2751   */\n      dup9\n        /* \"#utility.yul\":2738:2760   */\n      add\n        /* \"#utility.yul\":2719:2770   */\n      tag_90\n      jump\t// in\n    tag_122:\n        /* \"#utility.yul\":2709:2770   */\n      swap3\n      pop\n        /* \"#utility.yul\":2664:2780   */\n      pop\n        /* \"#utility.yul\":2819:2821   */\n      0x60\n        /* \"#utility.yul\":2845:2896   */\n      tag_123\n        /* \"#utility.yul\":2888:2895   */\n      dup8\n        /* \"#utility.yul\":2879:2885   */\n      dup3\n        /* \"#utility.yul\":2868:2877   */\n      dup9\n        /* \"#utility.yul\":2864:2886   */\n      add\n        /* \"#utility.yul\":2845:2896   */\n      tag_90\n      jump\t// in\n    tag_123:\n        /* \"#utility.yul\":2835:2896   */\n      swap2\n      pop\n        /* \"#utility.yul\":2790:2906   */\n      pop\n        /* \"#utility.yul\":2336:2913   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2919:3027   */\n    tag_124:\n        /* \"#utility.yul\":2996:3020   */\n      tag_126\n        /* \"#utility.yul\":3014:3019   */\n      dup2\n        /* \"#utility.yul\":2996:3020   */\n      tag_127\n      jump\t// in\n    tag_126:\n        /* \"#utility.yul\":2991:2994   */\n      dup3\n        /* \"#utility.yul\":2984:3021   */\n      mstore\n        /* \"#utility.yul\":2974:3027   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3033:3151   */\n    tag_128:\n        /* \"#utility.yul\":3120:3144   */\n      tag_130\n        /* \"#utility.yul\":3138:3143   */\n      dup2\n        /* \"#utility.yul\":3120:3144   */\n      tag_127\n      jump\t// in\n    tag_130:\n        /* \"#utility.yul\":3115:3118   */\n      dup3\n        /* \"#utility.yul\":3108:3145   */\n      mstore\n        /* \"#utility.yul\":3098:3151   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3157:3314   */\n    tag_131:\n        /* \"#utility.yul\":3257:3307   */\n      tag_133\n        /* \"#utility.yul\":3301:3306   */\n      dup2\n        /* \"#utility.yul\":3257:3307   */\n      tag_134\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":3252:3255   */\n      dup3\n        /* \"#utility.yul\":3245:3308   */\n      mstore\n        /* \"#utility.yul\":3235:3314   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3320:3521   */\n    tag_135:\n        /* \"#utility.yul\":3442:3514   */\n      tag_137\n        /* \"#utility.yul\":3508:3513   */\n      dup2\n        /* \"#utility.yul\":3442:3514   */\n      tag_138\n      jump\t// in\n    tag_137:\n        /* \"#utility.yul\":3437:3440   */\n      dup3\n        /* \"#utility.yul\":3430:3515   */\n      mstore\n        /* \"#utility.yul\":3420:3521   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3527:3696   */\n    tag_139:\n        /* \"#utility.yul\":3633:3689   */\n      tag_141\n        /* \"#utility.yul\":3683:3688   */\n      dup2\n        /* \"#utility.yul\":3633:3689   */\n      tag_142\n      jump\t// in\n    tag_141:\n        /* \"#utility.yul\":3628:3631   */\n      dup3\n        /* \"#utility.yul\":3621:3690   */\n      mstore\n        /* \"#utility.yul\":3611:3696   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3702:3804   */\n    tag_143:\n        /* \"#utility.yul\":3775:3797   */\n      tag_145\n        /* \"#utility.yul\":3791:3796   */\n      dup2\n        /* \"#utility.yul\":3775:3797   */\n      tag_146\n      jump\t// in\n    tag_145:\n        /* \"#utility.yul\":3770:3773   */\n      dup3\n        /* \"#utility.yul\":3763:3798   */\n      mstore\n        /* \"#utility.yul\":3753:3804   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3810:4121   */\n    tag_147:\n      0x00\n        /* \"#utility.yul\":3973:4040   */\n      tag_149\n        /* \"#utility.yul\":4037:4039   */\n      0x0d\n        /* \"#utility.yul\":4032:4035   */\n      dup4\n        /* \"#utility.yul\":3973:4040   */\n      tag_150\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":3966:4040   */\n      swap2\n      pop\n        /* \"#utility.yul\":4070:4085   */\n      0x4e6f7420746865206f776e657200000000000000000000000000000000000000\n        /* \"#utility.yul\":4066:4067   */\n      0x00\n        /* \"#utility.yul\":4061:4064   */\n      dup4\n        /* \"#utility.yul\":4057:4068   */\n      add\n        /* \"#utility.yul\":4050:4086   */\n      mstore\n        /* \"#utility.yul\":4112:4114   */\n      0x20\n        /* \"#utility.yul\":4107:4110   */\n      dup3\n        /* \"#utility.yul\":4103:4115   */\n      add\n        /* \"#utility.yul\":4096:4115   */\n      swap1\n      pop\n        /* \"#utility.yul\":3956:4121   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4235:5120   */\n    tag_151:\n        /* \"#utility.yul\":4392:4396   */\n      0x80\n        /* \"#utility.yul\":4387:4390   */\n      dup3\n        /* \"#utility.yul\":4383:4397   */\n      add\n        /* \"#utility.yul\":4482:4486   */\n      0x00\n        /* \"#utility.yul\":4475:4480   */\n      dup3\n        /* \"#utility.yul\":4471:4487   */\n      add\n        /* \"#utility.yul\":4465:4488   */\n      mload\n        /* \"#utility.yul\":4501:4564   */\n      tag_153\n        /* \"#utility.yul\":4558:4562   */\n      0x00\n        /* \"#utility.yul\":4553:4556   */\n      dup6\n        /* \"#utility.yul\":4549:4563   */\n      add\n        /* \"#utility.yul\":4535:4547   */\n      dup3\n        /* \"#utility.yul\":4501:4564   */\n      tag_154\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":4407:4574   */\n      pop\n        /* \"#utility.yul\":4661:4665   */\n      0x20\n        /* \"#utility.yul\":4654:4659   */\n      dup3\n        /* \"#utility.yul\":4650:4666   */\n      add\n        /* \"#utility.yul\":4644:4667   */\n      mload\n        /* \"#utility.yul\":4680:4743   */\n      tag_155\n        /* \"#utility.yul\":4737:4741   */\n      0x20\n        /* \"#utility.yul\":4732:4735   */\n      dup6\n        /* \"#utility.yul\":4728:4742   */\n      add\n        /* \"#utility.yul\":4714:4726   */\n      dup3\n        /* \"#utility.yul\":4680:4743   */\n      tag_124\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":4584:4753   */\n      pop\n        /* \"#utility.yul\":4841:4845   */\n      0x40\n        /* \"#utility.yul\":4834:4839   */\n      dup3\n        /* \"#utility.yul\":4830:4846   */\n      add\n        /* \"#utility.yul\":4824:4847   */\n      mload\n        /* \"#utility.yul\":4860:4923   */\n      tag_156\n        /* \"#utility.yul\":4917:4921   */\n      0x40\n        /* \"#utility.yul\":4912:4915   */\n      dup6\n        /* \"#utility.yul\":4908:4922   */\n      add\n        /* \"#utility.yul\":4894:4906   */\n      dup3\n        /* \"#utility.yul\":4860:4923   */\n      tag_157\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":4763:4933   */\n      pop\n        /* \"#utility.yul\":5021:5025   */\n      0x60\n        /* \"#utility.yul\":5014:5019   */\n      dup3\n        /* \"#utility.yul\":5010:5026   */\n      add\n        /* \"#utility.yul\":5004:5027   */\n      mload\n        /* \"#utility.yul\":5040:5103   */\n      tag_158\n        /* \"#utility.yul\":5097:5101   */\n      0x60\n        /* \"#utility.yul\":5092:5095   */\n      dup6\n        /* \"#utility.yul\":5088:5102   */\n      add\n        /* \"#utility.yul\":5074:5086   */\n      dup3\n        /* \"#utility.yul\":5040:5103   */\n      tag_157\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":4943:5113   */\n      pop\n        /* \"#utility.yul\":4361:5120   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5254:6337   */\n    tag_159:\n        /* \"#utility.yul\":5431:5435   */\n      0xa0\n        /* \"#utility.yul\":5426:5429   */\n      dup3\n        /* \"#utility.yul\":5422:5436   */\n      add\n        /* \"#utility.yul\":5521:5525   */\n      0x00\n        /* \"#utility.yul\":5514:5519   */\n      dup3\n        /* \"#utility.yul\":5510:5526   */\n      add\n        /* \"#utility.yul\":5504:5527   */\n      mload\n        /* \"#utility.yul\":5540:5603   */\n      tag_161\n        /* \"#utility.yul\":5597:5601   */\n      0x00\n        /* \"#utility.yul\":5592:5595   */\n      dup6\n        /* \"#utility.yul\":5588:5602   */\n      add\n        /* \"#utility.yul\":5574:5586   */\n      dup3\n        /* \"#utility.yul\":5540:5603   */\n      tag_154\n      jump\t// in\n    tag_161:\n        /* \"#utility.yul\":5446:5613   */\n      pop\n        /* \"#utility.yul\":5700:5704   */\n      0x20\n        /* \"#utility.yul\":5693:5698   */\n      dup3\n        /* \"#utility.yul\":5689:5705   */\n      add\n        /* \"#utility.yul\":5683:5706   */\n      mload\n        /* \"#utility.yul\":5719:5782   */\n      tag_162\n        /* \"#utility.yul\":5776:5780   */\n      0x20\n        /* \"#utility.yul\":5771:5774   */\n      dup6\n        /* \"#utility.yul\":5767:5781   */\n      add\n        /* \"#utility.yul\":5753:5765   */\n      dup3\n        /* \"#utility.yul\":5719:5782   */\n      tag_157\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":5623:5792   */\n      pop\n        /* \"#utility.yul\":5880:5884   */\n      0x40\n        /* \"#utility.yul\":5873:5878   */\n      dup3\n        /* \"#utility.yul\":5869:5885   */\n      add\n        /* \"#utility.yul\":5863:5886   */\n      mload\n        /* \"#utility.yul\":5899:5962   */\n      tag_163\n        /* \"#utility.yul\":5956:5960   */\n      0x40\n        /* \"#utility.yul\":5951:5954   */\n      dup6\n        /* \"#utility.yul\":5947:5961   */\n      add\n        /* \"#utility.yul\":5933:5945   */\n      dup3\n        /* \"#utility.yul\":5899:5962   */\n      tag_154\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":5802:5972   */\n      pop\n        /* \"#utility.yul\":6060:6064   */\n      0x60\n        /* \"#utility.yul\":6053:6058   */\n      dup3\n        /* \"#utility.yul\":6049:6065   */\n      add\n        /* \"#utility.yul\":6043:6066   */\n      mload\n        /* \"#utility.yul\":6079:6142   */\n      tag_164\n        /* \"#utility.yul\":6136:6140   */\n      0x60\n        /* \"#utility.yul\":6131:6134   */\n      dup6\n        /* \"#utility.yul\":6127:6141   */\n      add\n        /* \"#utility.yul\":6113:6125   */\n      dup3\n        /* \"#utility.yul\":6079:6142   */\n      tag_154\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":5982:6152   */\n      pop\n        /* \"#utility.yul\":6238:6242   */\n      0x80\n        /* \"#utility.yul\":6231:6236   */\n      dup3\n        /* \"#utility.yul\":6227:6243   */\n      add\n        /* \"#utility.yul\":6221:6244   */\n      mload\n        /* \"#utility.yul\":6257:6320   */\n      tag_165\n        /* \"#utility.yul\":6314:6318   */\n      0x80\n        /* \"#utility.yul\":6309:6312   */\n      dup6\n        /* \"#utility.yul\":6305:6319   */\n      add\n        /* \"#utility.yul\":6291:6303   */\n      dup3\n        /* \"#utility.yul\":6257:6320   */\n      tag_154\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":6162:6330   */\n      pop\n        /* \"#utility.yul\":5400:6337   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6445:8580   */\n    tag_166:\n        /* \"#utility.yul\":6596:6602   */\n      0x0160\n        /* \"#utility.yul\":6591:6594   */\n      dup3\n        /* \"#utility.yul\":6587:6603   */\n      add\n        /* \"#utility.yul\":6687:6691   */\n      0x00\n        /* \"#utility.yul\":6680:6685   */\n      dup3\n        /* \"#utility.yul\":6676:6692   */\n      add\n        /* \"#utility.yul\":6670:6693   */\n      mload\n        /* \"#utility.yul\":6706:6769   */\n      tag_168\n        /* \"#utility.yul\":6763:6767   */\n      0x00\n        /* \"#utility.yul\":6758:6761   */\n      dup6\n        /* \"#utility.yul\":6754:6768   */\n      add\n        /* \"#utility.yul\":6740:6752   */\n      dup3\n        /* \"#utility.yul\":6706:6769   */\n      tag_124\n      jump\t// in\n    tag_168:\n        /* \"#utility.yul\":6613:6779   */\n      pop\n        /* \"#utility.yul\":6863:6867   */\n      0x20\n        /* \"#utility.yul\":6856:6861   */\n      dup3\n        /* \"#utility.yul\":6852:6868   */\n      add\n        /* \"#utility.yul\":6846:6869   */\n      mload\n        /* \"#utility.yul\":6882:6945   */\n      tag_169\n        /* \"#utility.yul\":6939:6943   */\n      0x20\n        /* \"#utility.yul\":6934:6937   */\n      dup6\n        /* \"#utility.yul\":6930:6944   */\n      add\n        /* \"#utility.yul\":6916:6928   */\n      dup3\n        /* \"#utility.yul\":6882:6945   */\n      tag_124\n      jump\t// in\n    tag_169:\n        /* \"#utility.yul\":6789:6955   */\n      pop\n        /* \"#utility.yul\":7036:7040   */\n      0x40\n        /* \"#utility.yul\":7029:7034   */\n      dup3\n        /* \"#utility.yul\":7025:7041   */\n      add\n        /* \"#utility.yul\":7019:7042   */\n      mload\n        /* \"#utility.yul\":7055:7116   */\n      tag_170\n        /* \"#utility.yul\":7110:7114   */\n      0x40\n        /* \"#utility.yul\":7105:7108   */\n      dup6\n        /* \"#utility.yul\":7101:7115   */\n      add\n        /* \"#utility.yul\":7087:7099   */\n      dup3\n        /* \"#utility.yul\":7055:7116   */\n      tag_171\n      jump\t// in\n    tag_170:\n        /* \"#utility.yul\":6965:7126   */\n      pop\n        /* \"#utility.yul\":7213:7217   */\n      0x60\n        /* \"#utility.yul\":7206:7211   */\n      dup3\n        /* \"#utility.yul\":7202:7218   */\n      add\n        /* \"#utility.yul\":7196:7219   */\n      mload\n        /* \"#utility.yul\":7232:7291   */\n      tag_172\n        /* \"#utility.yul\":7285:7289   */\n      0x60\n        /* \"#utility.yul\":7280:7283   */\n      dup6\n        /* \"#utility.yul\":7276:7290   */\n      add\n        /* \"#utility.yul\":7262:7274   */\n      dup3\n        /* \"#utility.yul\":7232:7291   */\n      tag_143\n      jump\t// in\n    tag_172:\n        /* \"#utility.yul\":7136:7301   */\n      pop\n        /* \"#utility.yul\":7388:7392   */\n      0x80\n        /* \"#utility.yul\":7381:7386   */\n      dup3\n        /* \"#utility.yul\":7377:7393   */\n      add\n        /* \"#utility.yul\":7371:7394   */\n      mload\n        /* \"#utility.yul\":7407:7466   */\n      tag_173\n        /* \"#utility.yul\":7460:7464   */\n      0x80\n        /* \"#utility.yul\":7455:7458   */\n      dup6\n        /* \"#utility.yul\":7451:7465   */\n      add\n        /* \"#utility.yul\":7437:7449   */\n      dup3\n        /* \"#utility.yul\":7407:7466   */\n      tag_143\n      jump\t// in\n    tag_173:\n        /* \"#utility.yul\":7311:7476   */\n      pop\n        /* \"#utility.yul\":7568:7572   */\n      0xa0\n        /* \"#utility.yul\":7561:7566   */\n      dup3\n        /* \"#utility.yul\":7557:7573   */\n      add\n        /* \"#utility.yul\":7551:7574   */\n      mload\n        /* \"#utility.yul\":7587:7650   */\n      tag_174\n        /* \"#utility.yul\":7644:7648   */\n      0xa0\n        /* \"#utility.yul\":7639:7642   */\n      dup6\n        /* \"#utility.yul\":7635:7649   */\n      add\n        /* \"#utility.yul\":7621:7633   */\n      dup3\n        /* \"#utility.yul\":7587:7650   */\n      tag_154\n      jump\t// in\n    tag_174:\n        /* \"#utility.yul\":7486:7660   */\n      pop\n        /* \"#utility.yul\":7752:7756   */\n      0xc0\n        /* \"#utility.yul\":7745:7750   */\n      dup3\n        /* \"#utility.yul\":7741:7757   */\n      add\n        /* \"#utility.yul\":7735:7758   */\n      mload\n        /* \"#utility.yul\":7771:7834   */\n      tag_175\n        /* \"#utility.yul\":7828:7832   */\n      0xc0\n        /* \"#utility.yul\":7823:7826   */\n      dup6\n        /* \"#utility.yul\":7819:7833   */\n      add\n        /* \"#utility.yul\":7805:7817   */\n      dup3\n        /* \"#utility.yul\":7771:7834   */\n      tag_154\n      jump\t// in\n    tag_175:\n        /* \"#utility.yul\":7670:7844   */\n      pop\n        /* \"#utility.yul\":7932:7936   */\n      0xe0\n        /* \"#utility.yul\":7925:7930   */\n      dup3\n        /* \"#utility.yul\":7921:7937   */\n      add\n        /* \"#utility.yul\":7915:7938   */\n      mload\n        /* \"#utility.yul\":7951:8014   */\n      tag_176\n        /* \"#utility.yul\":8008:8012   */\n      0xe0\n        /* \"#utility.yul\":8003:8006   */\n      dup6\n        /* \"#utility.yul\":7999:8013   */\n      add\n        /* \"#utility.yul\":7985:7997   */\n      dup3\n        /* \"#utility.yul\":7951:8014   */\n      tag_154\n      jump\t// in\n    tag_176:\n        /* \"#utility.yul\":7854:8024   */\n      pop\n        /* \"#utility.yul\":8112:8118   */\n      0x0100\n        /* \"#utility.yul\":8105:8110   */\n      dup3\n        /* \"#utility.yul\":8101:8119   */\n      add\n        /* \"#utility.yul\":8095:8120   */\n      mload\n        /* \"#utility.yul\":8133:8198   */\n      tag_177\n        /* \"#utility.yul\":8190:8196   */\n      0x0100\n        /* \"#utility.yul\":8185:8188   */\n      dup6\n        /* \"#utility.yul\":8181:8197   */\n      add\n        /* \"#utility.yul\":8167:8179   */\n      dup3\n        /* \"#utility.yul\":8133:8198   */\n      tag_154\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":8034:8208   */\n      pop\n        /* \"#utility.yul\":8295:8301   */\n      0x0120\n        /* \"#utility.yul\":8288:8293   */\n      dup3\n        /* \"#utility.yul\":8284:8302   */\n      add\n        /* \"#utility.yul\":8278:8303   */\n      mload\n        /* \"#utility.yul\":8316:8381   */\n      tag_178\n        /* \"#utility.yul\":8373:8379   */\n      0x0120\n        /* \"#utility.yul\":8368:8371   */\n      dup6\n        /* \"#utility.yul\":8364:8380   */\n      add\n        /* \"#utility.yul\":8350:8362   */\n      dup3\n        /* \"#utility.yul\":8316:8381   */\n      tag_124\n      jump\t// in\n    tag_178:\n        /* \"#utility.yul\":8218:8391   */\n      pop\n        /* \"#utility.yul\":8477:8483   */\n      0x0140\n        /* \"#utility.yul\":8470:8475   */\n      dup3\n        /* \"#utility.yul\":8466:8484   */\n      add\n        /* \"#utility.yul\":8460:8485   */\n      mload\n        /* \"#utility.yul\":8498:8563   */\n      tag_179\n        /* \"#utility.yul\":8555:8561   */\n      0x0140\n        /* \"#utility.yul\":8550:8553   */\n      dup6\n        /* \"#utility.yul\":8546:8562   */\n      add\n        /* \"#utility.yul\":8532:8544   */\n      dup3\n        /* \"#utility.yul\":8498:8563   */\n      tag_154\n      jump\t// in\n    tag_179:\n        /* \"#utility.yul\":8401:8573   */\n      pop\n        /* \"#utility.yul\":6565:8580   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8586:8694   */\n    tag_157:\n        /* \"#utility.yul\":8663:8687   */\n      tag_181\n        /* \"#utility.yul\":8681:8686   */\n      dup2\n        /* \"#utility.yul\":8663:8687   */\n      tag_182\n      jump\t// in\n    tag_181:\n        /* \"#utility.yul\":8658:8661   */\n      dup3\n        /* \"#utility.yul\":8651:8688   */\n      mstore\n        /* \"#utility.yul\":8641:8694   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8700:8805   */\n    tag_171:\n        /* \"#utility.yul\":8775:8798   */\n      tag_184\n        /* \"#utility.yul\":8792:8797   */\n      dup2\n        /* \"#utility.yul\":8775:8798   */\n      tag_185\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":8770:8773   */\n      dup3\n        /* \"#utility.yul\":8763:8799   */\n      mstore\n        /* \"#utility.yul\":8753:8805   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8811:8926   */\n    tag_186:\n        /* \"#utility.yul\":8896:8919   */\n      tag_188\n        /* \"#utility.yul\":8913:8918   */\n      dup2\n        /* \"#utility.yul\":8896:8919   */\n      tag_185\n      jump\t// in\n    tag_188:\n        /* \"#utility.yul\":8891:8894   */\n      dup3\n        /* \"#utility.yul\":8884:8920   */\n      mstore\n        /* \"#utility.yul\":8874:8926   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8932:9040   */\n    tag_154:\n        /* \"#utility.yul\":9009:9033   */\n      tag_190\n        /* \"#utility.yul\":9027:9032   */\n      dup2\n        /* \"#utility.yul\":9009:9033   */\n      tag_191\n      jump\t// in\n    tag_190:\n        /* \"#utility.yul\":9004:9007   */\n      dup3\n        /* \"#utility.yul\":8997:9034   */\n      mstore\n        /* \"#utility.yul\":8987:9040   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9046:9164   */\n    tag_192:\n        /* \"#utility.yul\":9133:9157   */\n      tag_194\n        /* \"#utility.yul\":9151:9156   */\n      dup2\n        /* \"#utility.yul\":9133:9157   */\n      tag_191\n      jump\t// in\n    tag_194:\n        /* \"#utility.yul\":9128:9131   */\n      dup3\n        /* \"#utility.yul\":9121:9158   */\n      mstore\n        /* \"#utility.yul\":9111:9164   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9170:9392   */\n    tag_35:\n      0x00\n        /* \"#utility.yul\":9301:9303   */\n      0x20\n        /* \"#utility.yul\":9290:9299   */\n      dup3\n        /* \"#utility.yul\":9286:9304   */\n      add\n        /* \"#utility.yul\":9278:9304   */\n      swap1\n      pop\n        /* \"#utility.yul\":9314:9385   */\n      tag_196\n        /* \"#utility.yul\":9382:9383   */\n      0x00\n        /* \"#utility.yul\":9371:9380   */\n      dup4\n        /* \"#utility.yul\":9367:9384   */\n      add\n        /* \"#utility.yul\":9358:9364   */\n      dup5\n        /* \"#utility.yul\":9314:9385   */\n      tag_128\n      jump\t// in\n    tag_196:\n        /* \"#utility.yul\":9268:9392   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9398:9730   */\n    tag_49:\n      0x00\n        /* \"#utility.yul\":9557:9559   */\n      0x40\n        /* \"#utility.yul\":9546:9555   */\n      dup3\n        /* \"#utility.yul\":9542:9560   */\n      add\n        /* \"#utility.yul\":9534:9560   */\n      swap1\n      pop\n        /* \"#utility.yul\":9570:9641   */\n      tag_198\n        /* \"#utility.yul\":9638:9639   */\n      0x00\n        /* \"#utility.yul\":9627:9636   */\n      dup4\n        /* \"#utility.yul\":9623:9640   */\n      add\n        /* \"#utility.yul\":9614:9620   */\n      dup6\n        /* \"#utility.yul\":9570:9641   */\n      tag_128\n      jump\t// in\n    tag_198:\n        /* \"#utility.yul\":9651:9723   */\n      tag_199\n        /* \"#utility.yul\":9719:9721   */\n      0x20\n        /* \"#utility.yul\":9708:9717   */\n      dup4\n        /* \"#utility.yul\":9704:9722   */\n      add\n        /* \"#utility.yul\":9695:9701   */\n      dup5\n        /* \"#utility.yul\":9651:9723   */\n      tag_192\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":9524:9730   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9736:9984   */\n    tag_19:\n      0x00\n        /* \"#utility.yul\":9880:9882   */\n      0x20\n        /* \"#utility.yul\":9869:9878   */\n      dup3\n        /* \"#utility.yul\":9865:9883   */\n      add\n        /* \"#utility.yul\":9857:9883   */\n      swap1\n      pop\n        /* \"#utility.yul\":9893:9977   */\n      tag_201\n        /* \"#utility.yul\":9974:9975   */\n      0x00\n        /* \"#utility.yul\":9963:9972   */\n      dup4\n        /* \"#utility.yul\":9959:9976   */\n      add\n        /* \"#utility.yul\":9950:9956   */\n      dup5\n        /* \"#utility.yul\":9893:9977   */\n      tag_131\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":9847:9984   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9990:10282   */\n    tag_31:\n      0x00\n        /* \"#utility.yul\":10156:10158   */\n      0x20\n        /* \"#utility.yul\":10145:10154   */\n      dup3\n        /* \"#utility.yul\":10141:10159   */\n      add\n        /* \"#utility.yul\":10133:10159   */\n      swap1\n      pop\n        /* \"#utility.yul\":10169:10275   */\n      tag_203\n        /* \"#utility.yul\":10272:10273   */\n      0x00\n        /* \"#utility.yul\":10261:10270   */\n      dup4\n        /* \"#utility.yul\":10257:10274   */\n      add\n        /* \"#utility.yul\":10248:10254   */\n      dup5\n        /* \"#utility.yul\":10169:10275   */\n      tag_135\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":10123:10282   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10288:10548   */\n    tag_39:\n      0x00\n        /* \"#utility.yul\":10438:10440   */\n      0x20\n        /* \"#utility.yul\":10427:10436   */\n      dup3\n        /* \"#utility.yul\":10423:10441   */\n      add\n        /* \"#utility.yul\":10415:10441   */\n      swap1\n      pop\n        /* \"#utility.yul\":10451:10541   */\n      tag_205\n        /* \"#utility.yul\":10538:10539   */\n      0x00\n        /* \"#utility.yul\":10527:10536   */\n      dup4\n        /* \"#utility.yul\":10523:10540   */\n      add\n        /* \"#utility.yul\":10514:10520   */\n      dup5\n        /* \"#utility.yul\":10451:10541   */\n      tag_139\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":10405:10548   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10554:10973   */\n    tag_46:\n      0x00\n        /* \"#utility.yul\":10758:10760   */\n      0x20\n        /* \"#utility.yul\":10747:10756   */\n      dup3\n        /* \"#utility.yul\":10743:10761   */\n      add\n        /* \"#utility.yul\":10735:10761   */\n      swap1\n      pop\n        /* \"#utility.yul\":10807:10816   */\n      dup2\n        /* \"#utility.yul\":10801:10805   */\n      dup2\n        /* \"#utility.yul\":10797:10817   */\n      sub\n        /* \"#utility.yul\":10793:10794   */\n      0x00\n        /* \"#utility.yul\":10782:10791   */\n      dup4\n        /* \"#utility.yul\":10778:10795   */\n      add\n        /* \"#utility.yul\":10771:10818   */\n      mstore\n        /* \"#utility.yul\":10835:10966   */\n      tag_207\n        /* \"#utility.yul\":10961:10965   */\n      dup2\n        /* \"#utility.yul\":10835:10966   */\n      tag_147\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":10827:10966   */\n      swap1\n      pop\n        /* \"#utility.yul\":10725:10973   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10979:11322   */\n    tag_69:\n      0x00\n        /* \"#utility.yul\":11170:11173   */\n      0x80\n        /* \"#utility.yul\":11159:11168   */\n      dup3\n        /* \"#utility.yul\":11155:11174   */\n      add\n        /* \"#utility.yul\":11147:11174   */\n      swap1\n      pop\n        /* \"#utility.yul\":11184:11315   */\n      tag_209\n        /* \"#utility.yul\":11312:11313   */\n      0x00\n        /* \"#utility.yul\":11301:11310   */\n      dup4\n        /* \"#utility.yul\":11297:11314   */\n      add\n        /* \"#utility.yul\":11288:11294   */\n      dup5\n        /* \"#utility.yul\":11184:11315   */\n      tag_151\n      jump\t// in\n    tag_209:\n        /* \"#utility.yul\":11137:11322   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11328:11711   */\n    tag_62:\n      0x00\n        /* \"#utility.yul\":11539:11542   */\n      0xa0\n        /* \"#utility.yul\":11528:11537   */\n      dup3\n        /* \"#utility.yul\":11524:11543   */\n      add\n        /* \"#utility.yul\":11516:11543   */\n      swap1\n      pop\n        /* \"#utility.yul\":11553:11704   */\n      tag_211\n        /* \"#utility.yul\":11701:11702   */\n      0x00\n        /* \"#utility.yul\":11690:11699   */\n      dup4\n        /* \"#utility.yul\":11686:11703   */\n      add\n        /* \"#utility.yul\":11677:11683   */\n      dup5\n        /* \"#utility.yul\":11553:11704   */\n      tag_159\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":11506:11711   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11717:12048   */\n    tag_79:\n      0x00\n        /* \"#utility.yul\":11902:11905   */\n      0x0160\n        /* \"#utility.yul\":11891:11900   */\n      dup3\n        /* \"#utility.yul\":11887:11906   */\n      add\n        /* \"#utility.yul\":11879:11906   */\n      swap1\n      pop\n        /* \"#utility.yul\":11916:12041   */\n      tag_213\n        /* \"#utility.yul\":12038:12039   */\n      0x00\n        /* \"#utility.yul\":12027:12036   */\n      dup4\n        /* \"#utility.yul\":12023:12040   */\n      add\n        /* \"#utility.yul\":12014:12020   */\n      dup5\n        /* \"#utility.yul\":11916:12041   */\n      tag_166\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":11869:12048   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12054:12272   */\n    tag_15:\n      0x00\n        /* \"#utility.yul\":12183:12185   */\n      0x20\n        /* \"#utility.yul\":12172:12181   */\n      dup3\n        /* \"#utility.yul\":12168:12186   */\n      add\n        /* \"#utility.yul\":12160:12186   */\n      swap1\n      pop\n        /* \"#utility.yul\":12196:12265   */\n      tag_215\n        /* \"#utility.yul\":12262:12263   */\n      0x00\n        /* \"#utility.yul\":12251:12260   */\n      dup4\n        /* \"#utility.yul\":12247:12264   */\n      add\n        /* \"#utility.yul\":12238:12244   */\n      dup5\n        /* \"#utility.yul\":12196:12265   */\n      tag_186\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":12150:12272   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12278:12500   */\n    tag_23:\n      0x00\n        /* \"#utility.yul\":12409:12411   */\n      0x20\n        /* \"#utility.yul\":12398:12407   */\n      dup3\n        /* \"#utility.yul\":12394:12412   */\n      add\n        /* \"#utility.yul\":12386:12412   */\n      swap1\n      pop\n        /* \"#utility.yul\":12422:12493   */\n      tag_217\n        /* \"#utility.yul\":12490:12491   */\n      0x00\n        /* \"#utility.yul\":12479:12488   */\n      dup4\n        /* \"#utility.yul\":12475:12492   */\n      add\n        /* \"#utility.yul\":12466:12472   */\n      dup5\n        /* \"#utility.yul\":12422:12493   */\n      tag_192\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":12376:12500   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12506:12675   */\n    tag_150:\n      0x00\n        /* \"#utility.yul\":12624:12630   */\n      dup3\n        /* \"#utility.yul\":12619:12622   */\n      dup3\n        /* \"#utility.yul\":12612:12631   */\n      mstore\n        /* \"#utility.yul\":12664:12668   */\n      0x20\n        /* \"#utility.yul\":12659:12662   */\n      dup3\n        /* \"#utility.yul\":12655:12669   */\n      add\n        /* \"#utility.yul\":12640:12669   */\n      swap1\n      pop\n        /* \"#utility.yul\":12602:12675   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12681:12777   */\n    tag_127:\n      0x00\n        /* \"#utility.yul\":12747:12771   */\n      tag_220\n        /* \"#utility.yul\":12765:12770   */\n      dup3\n        /* \"#utility.yul\":12747:12771   */\n      tag_221\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":12736:12771   */\n      swap1\n      pop\n        /* \"#utility.yul\":12726:12777   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12783:12873   */\n    tag_222:\n      0x00\n        /* \"#utility.yul\":12860:12865   */\n      dup2\n        /* \"#utility.yul\":12853:12866   */\n      iszero\n        /* \"#utility.yul\":12846:12867   */\n      iszero\n        /* \"#utility.yul\":12835:12867   */\n      swap1\n      pop\n        /* \"#utility.yul\":12825:12873   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12879:12969   */\n    tag_146:\n      0x00\n        /* \"#utility.yul\":12957:12962   */\n      dup2\n        /* \"#utility.yul\":12954:12955   */\n      0x02\n        /* \"#utility.yul\":12943:12963   */\n      signextend\n        /* \"#utility.yul\":12932:12963   */\n      swap1\n      pop\n        /* \"#utility.yul\":12922:12969   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12975:13093   */\n    tag_182:\n      0x00\n        /* \"#utility.yul\":13052:13086   */\n      0xffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":13045:13050   */\n      dup3\n        /* \"#utility.yul\":13041:13087   */\n      and\n        /* \"#utility.yul\":13030:13087   */\n      swap1\n      pop\n        /* \"#utility.yul\":13020:13093   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13099:13225   */\n    tag_221:\n      0x00\n        /* \"#utility.yul\":13176:13218   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":13169:13174   */\n      dup3\n        /* \"#utility.yul\":13165:13219   */\n      and\n        /* \"#utility.yul\":13154:13219   */\n      swap1\n      pop\n        /* \"#utility.yul\":13144:13225   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13231:13322   */\n    tag_185:\n      0x00\n        /* \"#utility.yul\":13307:13315   */\n      0xffffff\n        /* \"#utility.yul\":13300:13305   */\n      dup3\n        /* \"#utility.yul\":13296:13316   */\n      and\n        /* \"#utility.yul\":13285:13316   */\n      swap1\n      pop\n        /* \"#utility.yul\":13275:13322   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13328:13405   */\n    tag_191:\n      0x00\n        /* \"#utility.yul\":13394:13399   */\n      dup2\n        /* \"#utility.yul\":13383:13399   */\n      swap1\n      pop\n        /* \"#utility.yul\":13373:13405   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13411:13563   */\n    tag_134:\n      0x00\n        /* \"#utility.yul\":13507:13557   */\n      tag_230\n        /* \"#utility.yul\":13551:13556   */\n      dup3\n        /* \"#utility.yul\":13507:13557   */\n      tag_231\n      jump\t// in\n    tag_230:\n        /* \"#utility.yul\":13494:13557   */\n      swap1\n      pop\n        /* \"#utility.yul\":13484:13563   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13569:13695   */\n    tag_231:\n      0x00\n        /* \"#utility.yul\":13665:13689   */\n      tag_233\n        /* \"#utility.yul\":13683:13688   */\n      dup3\n        /* \"#utility.yul\":13665:13689   */\n      tag_221\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":13652:13689   */\n      swap1\n      pop\n        /* \"#utility.yul\":13642:13695   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13701:13897   */\n    tag_138:\n      0x00\n        /* \"#utility.yul\":13819:13891   */\n      tag_235\n        /* \"#utility.yul\":13885:13890   */\n      dup3\n        /* \"#utility.yul\":13819:13891   */\n      tag_236\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":13806:13891   */\n      swap1\n      pop\n        /* \"#utility.yul\":13796:13897   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13903:14051   */\n    tag_236:\n      0x00\n        /* \"#utility.yul\":14021:14045   */\n      tag_238\n        /* \"#utility.yul\":14039:14044   */\n      dup3\n        /* \"#utility.yul\":14021:14045   */\n      tag_221\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":14008:14045   */\n      swap1\n      pop\n        /* \"#utility.yul\":13998:14051   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14057:14221   */\n    tag_142:\n      0x00\n        /* \"#utility.yul\":14159:14215   */\n      tag_240\n        /* \"#utility.yul\":14209:14214   */\n      dup3\n        /* \"#utility.yul\":14159:14215   */\n      tag_241\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":14146:14215   */\n      swap1\n      pop\n        /* \"#utility.yul\":14136:14221   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14227:14359   */\n    tag_241:\n      0x00\n        /* \"#utility.yul\":14329:14353   */\n      tag_243\n        /* \"#utility.yul\":14347:14352   */\n      dup3\n        /* \"#utility.yul\":14329:14353   */\n      tag_221\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":14316:14353   */\n      swap1\n      pop\n        /* \"#utility.yul\":14306:14359   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14365:14481   */\n    tag_89:\n        /* \"#utility.yul\":14435:14456   */\n      tag_245\n        /* \"#utility.yul\":14450:14455   */\n      dup2\n        /* \"#utility.yul\":14435:14456   */\n      tag_222\n      jump\t// in\n    tag_245:\n        /* \"#utility.yul\":14428:14433   */\n      dup2\n        /* \"#utility.yul\":14425:14457   */\n      eq\n        /* \"#utility.yul\":14415:14417   */\n      tag_246\n      jumpi\n        /* \"#utility.yul\":14471:14472   */\n      0x00\n        /* \"#utility.yul\":14468:14469   */\n      dup1\n        /* \"#utility.yul\":14461:14473   */\n      revert\n        /* \"#utility.yul\":14415:14417   */\n    tag_246:\n        /* \"#utility.yul\":14405:14481   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14487:14605   */\n    tag_93:\n        /* \"#utility.yul\":14558:14580   */\n      tag_248\n        /* \"#utility.yul\":14574:14579   */\n      dup2\n        /* \"#utility.yul\":14558:14580   */\n      tag_146\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":14551:14556   */\n      dup2\n        /* \"#utility.yul\":14548:14581   */\n      eq\n        /* \"#utility.yul\":14538:14540   */\n      tag_249\n      jumpi\n        /* \"#utility.yul\":14595:14596   */\n      0x00\n        /* \"#utility.yul\":14592:14593   */\n      dup1\n        /* \"#utility.yul\":14585:14597   */\n      revert\n        /* \"#utility.yul\":14538:14540   */\n    tag_249:\n        /* \"#utility.yul\":14528:14605   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14611:14733   */\n    tag_97:\n        /* \"#utility.yul\":14684:14708   */\n      tag_251\n        /* \"#utility.yul\":14702:14707   */\n      dup2\n        /* \"#utility.yul\":14684:14708   */\n      tag_182\n      jump\t// in\n    tag_251:\n        /* \"#utility.yul\":14677:14682   */\n      dup2\n        /* \"#utility.yul\":14674:14709   */\n      eq\n        /* \"#utility.yul\":14664:14666   */\n      tag_252\n      jumpi\n        /* \"#utility.yul\":14723:14724   */\n      0x00\n        /* \"#utility.yul\":14720:14721   */\n      dup1\n        /* \"#utility.yul\":14713:14725   */\n      revert\n        /* \"#utility.yul\":14664:14666   */\n    tag_252:\n        /* \"#utility.yul\":14654:14733   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14739:14861   */\n    tag_101:\n        /* \"#utility.yul\":14812:14836   */\n      tag_254\n        /* \"#utility.yul\":14830:14835   */\n      dup2\n        /* \"#utility.yul\":14812:14836   */\n      tag_191\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":14805:14810   */\n      dup2\n        /* \"#utility.yul\":14802:14837   */\n      eq\n        /* \"#utility.yul\":14792:14794   */\n      tag_255\n      jumpi\n        /* \"#utility.yul\":14851:14852   */\n      0x00\n        /* \"#utility.yul\":14848:14849   */\n      dup1\n        /* \"#utility.yul\":14841:14853   */\n      revert\n        /* \"#utility.yul\":14792:14794   */\n    tag_255:\n        /* \"#utility.yul\":14782:14861   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220814813cf6cbf2c4059ef974ebf668602a20d52df45d039413c0bd9f36bc0123d64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1799:14",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "70:80:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "80:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "89:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "89:13:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "80:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "138:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "111:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "111:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "111:33:14"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "48:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "56:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "64:5:14",
														"type": ""
													}
												],
												"src": "7:143:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "218:79:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "228:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "243:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "237:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "237:13:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "228:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "285:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint24",
																	"nodeType": "YulIdentifier",
																	"src": "259:25:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "259:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "259:32:14"
														}
													]
												},
												"name": "abi_decode_t_uint24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "196:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "204:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "212:5:14",
														"type": ""
													}
												],
												"src": "156:141:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "447:764:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "494:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "503:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "506:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "496:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "496:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "496:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "468:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "477:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "464:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "464:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "489:3:14",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "460:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "460:33:14"
															},
															"nodeType": "YulIf",
															"src": "457:2:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "520:128:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "535:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "549:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "539:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "564:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "610:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "621:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "606:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "606:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "630:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "574:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "574:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "564:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "658:129:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "673:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "687:2:14",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "677:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "703:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "749:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "760:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "745:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "745:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "769:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "713:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "713:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "703:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "797:129:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "812:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "826:2:14",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "816:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "842:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "888:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "899:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "884:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "884:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "908:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "852:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "852:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "842:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "936:129:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "951:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "965:2:14",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "955:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "981:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1027:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1038:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1023:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1023:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1047:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "991:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "991:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "981:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1075:129:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1090:17:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1104:3:14",
																		"type": "",
																		"value": "128"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1094:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1121:73:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1166:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1177:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1162:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1162:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1186:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint24_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1131:30:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1131:63:14"
																	},
																	"variableNames": [
																		{
																			"name": "value4",
																			"nodeType": "YulIdentifier",
																			"src": "1121:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "385:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "396:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "408:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "416:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "424:6:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "432:6:14",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "440:6:14",
														"type": ""
													}
												],
												"src": "303:908:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1262:51:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1272:35:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1301:5:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1283:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1283:24:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1272:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1244:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1254:7:14",
														"type": ""
													}
												],
												"src": "1217:96:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1364:81:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1374:65:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1389:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1396:42:14",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1385:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1385:54:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1374:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1346:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1356:7:14",
														"type": ""
													}
												],
												"src": "1319:126:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1495:47:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1505:31:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1520:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1527:8:14",
																		"type": "",
																		"value": "0xffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1516:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1516:20:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1505:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1477:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1487:7:14",
														"type": ""
													}
												],
												"src": "1451:91:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1591:79:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1648:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1657:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1660:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1650:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1650:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1650:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1614:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1639:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1621:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1621:24:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1611:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1611:35:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1604:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1604:43:14"
															},
															"nodeType": "YulIf",
															"src": "1601:2:14"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1584:5:14",
														"type": ""
													}
												],
												"src": "1548:122:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1718:78:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1774:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1783:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1786:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1776:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1776:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1776:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1741:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1765:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint24",
																					"nodeType": "YulIdentifier",
																					"src": "1748:16:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1748:23:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1738:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1738:34:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1731:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1731:42:14"
															},
															"nodeType": "YulIf",
															"src": "1728:2:14"
														}
													]
												},
												"name": "validator_revert_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1711:5:14",
														"type": ""
													}
												],
												"src": "1676:120:14"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_uint24_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint24(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_uint24_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint24_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint24(value) -> cleaned {\n        cleaned := and(value, 0xffffff)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint24(value) {\n        if iszero(eq(value, cleanup_t_uint24(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162001295380380620012958339818101604052810190620000379190620001d3565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460146101000a81548162ffffff021916908362ffffff1602179055505050505050620002cc565b600081519050620001b68162000298565b92915050565b600081519050620001cd81620002b2565b92915050565b600080600080600060a08688031215620001ec57600080fd5b6000620001fc88828901620001a5565b95505060206200020f88828901620001a5565b94505060406200022288828901620001a5565b93505060606200023588828901620001a5565b92505060806200024888828901620001bc565b9150509295509295909350565b6000620002628262000269565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b620002a38162000255565b8114620002af57600080fd5b50565b620002bd8162000289565b8114620002c957600080fd5b50565b610fb980620002dc6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063791b98bc1161005b578063791b98bc146101035780638da5cb5b14610121578063c31c9c071461013f578063d21220a71461015d57610088565b8063089fe6aa1461008d5780630dfe1681146100ab57806317d70f7c146100c957806365237b90146100e7575b600080fd5b61009561017b565b6040516100a29190610df4565b60405180910390f35b6100b3610190565b6040516100c09190610d31565b60405180910390f35b6100d16101b6565b6040516100de9190610e0f565b60405180910390f35b61010160048036038101906100fc9190610a07565b6101bc565b005b61010b610840565b6040516101189190610d4c565b60405180910390f35b610129610866565b6040516101369190610ced565b60405180910390f35b61014761088a565b6040516101549190610d67565b60405180910390f35b6101656108b0565b6040516101729190610d31565b60405180910390f35b600460149054906101000a900462ffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024190610d82565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b81526004016102c9929190610d08565b602060405180830381600087803b1580156102e357600080fd5b505af11580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b919061093f565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b815260040161039b929190610d08565b602060405180830381600087803b1580156103b557600080fd5b505af11580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed919061093f565b506000600554146106885760006040518060a0016040528060055481526020016fffffffffffffffffffffffffffffffff801681526020016000815260200160008152602001428152509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c49ccbe826040518263ffffffff1660e01b81526004016104949190610dbd565b6040805180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e591906109cb565b50506000604051806080016040528060055481526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016fffffffffffffffffffffffffffffffff801681526020016fffffffffffffffffffffffffffffffff80168152509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc6f7865826040518263ffffffff1660e01b81526004016105a39190610da2565b6040805180830381600087803b1580156105bc57600080fd5b505af11580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f491906109cb565b5050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c686005546040518263ffffffff1660e01b81526004016106539190610e0f565b600060405180830381600087803b15801561066d57600080fd5b505af1158015610681573d6000803e3d6000fd5b5050505050505b6000604051806101600160405280600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600460149054906101000a900462ffffff1662ffffff1681526020018460020b81526020018360020b815260200186815260200185815260200160008152602001600081526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388316456826040518263ffffffff1660e01b81526004016107d79190610dd8565b608060405180830381600087803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190610968565b909150905050600560008291905055505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000815190506108e581610f27565b92915050565b6000813590506108fa81610f3e565b92915050565b60008151905061090f81610f55565b92915050565b60008135905061092481610f6c565b92915050565b60008151905061093981610f6c565b92915050565b60006020828403121561095157600080fd5b600061095f848285016108d6565b91505092915050565b6000806000806080858703121561097e57600080fd5b600061098c8782880161092a565b945050602061099d87828801610900565b93505060406109ae8782880161092a565b92505060606109bf8782880161092a565b91505092959194509250565b600080604083850312156109de57600080fd5b60006109ec8582860161092a565b92505060206109fd8582860161092a565b9150509250929050565b60008060008060808587031215610a1d57600080fd5b6000610a2b87828801610915565b9450506020610a3c87828801610915565b9350506040610a4d878288016108eb565b9250506060610a5e878288016108eb565b91505092959194509250565b610a7381610e3b565b82525050565b610a8281610e3b565b82525050565b610a9181610ebb565b82525050565b610aa081610edf565b82525050565b610aaf81610f03565b82525050565b610abe81610e59565b82525050565b6000610ad1600d83610e2a565b91507f4e6f7420746865206f776e6572000000000000000000000000000000000000006000830152602082019050919050565b608082016000820151610b1a6000850182610ccf565b506020820151610b2d6020850182610a6a565b506040820151610b406040850182610ca2565b506060820151610b536060850182610ca2565b50505050565b60a082016000820151610b6f6000850182610ccf565b506020820151610b826020850182610ca2565b506040820151610b956040850182610ccf565b506060820151610ba86060850182610ccf565b506080820151610bbb6080850182610ccf565b50505050565b61016082016000820151610bd86000850182610a6a565b506020820151610beb6020850182610a6a565b506040820151610bfe6040850182610cb1565b506060820151610c116060850182610ab5565b506080820151610c246080850182610ab5565b5060a0820151610c3760a0850182610ccf565b5060c0820151610c4a60c0850182610ccf565b5060e0820151610c5d60e0850182610ccf565b50610100820151610c72610100850182610ccf565b50610120820151610c87610120850182610a6a565b50610140820151610c9c610140850182610ccf565b50505050565b610cab81610e66565b82525050565b610cba81610ea2565b82525050565b610cc981610ea2565b82525050565b610cd881610eb1565b82525050565b610ce781610eb1565b82525050565b6000602082019050610d026000830184610a79565b92915050565b6000604082019050610d1d6000830185610a79565b610d2a6020830184610cde565b9392505050565b6000602082019050610d466000830184610a88565b92915050565b6000602082019050610d616000830184610a97565b92915050565b6000602082019050610d7c6000830184610aa6565b92915050565b60006020820190508181036000830152610d9b81610ac4565b9050919050565b6000608082019050610db76000830184610b04565b92915050565b600060a082019050610dd26000830184610b59565b92915050565b600061016082019050610dee6000830184610bc1565b92915050565b6000602082019050610e096000830184610cc0565b92915050565b6000602082019050610e246000830184610cde565b92915050565b600082825260208201905092915050565b6000610e4682610e82565b9050919050565b60008115159050919050565b60008160020b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b6000610ec682610ecd565b9050919050565b6000610ed882610e82565b9050919050565b6000610eea82610ef1565b9050919050565b6000610efc82610e82565b9050919050565b6000610f0e82610f15565b9050919050565b6000610f2082610e82565b9050919050565b610f3081610e4d565b8114610f3b57600080fd5b50565b610f4781610e59565b8114610f5257600080fd5b50565b610f5e81610e66565b8114610f6957600080fd5b50565b610f7581610eb1565b8114610f8057600080fd5b5056fea2646970667358221220814813cf6cbf2c4059ef974ebf668602a20d52df45d039413c0bd9f36bc0123d64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1295 CODESIZE SUB DUP1 PUSH3 0x1295 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1D3 JUMP JUMPDEST CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x4 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP PUSH3 0x2CC JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1B6 DUP2 PUSH3 0x298 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1CD DUP2 PUSH3 0x2B2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1FC DUP9 DUP3 DUP10 ADD PUSH3 0x1A5 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH3 0x20F DUP9 DUP3 DUP10 ADD PUSH3 0x1A5 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH3 0x222 DUP9 DUP3 DUP10 ADD PUSH3 0x1A5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH3 0x235 DUP9 DUP3 DUP10 ADD PUSH3 0x1A5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH3 0x248 DUP9 DUP3 DUP10 ADD PUSH3 0x1BC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x262 DUP3 PUSH3 0x269 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2A3 DUP2 PUSH3 0x255 JUMP JUMPDEST DUP2 EQ PUSH3 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x2BD DUP2 PUSH3 0x289 JUMP JUMPDEST DUP2 EQ PUSH3 0x2C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xFB9 DUP1 PUSH3 0x2DC PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x791B98BC GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x791B98BC EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x15D JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x89FE6AA EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0xDFE1681 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x17D70F7C EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x65237B90 EQ PUSH2 0xE7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x17B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB3 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD1 PUSH2 0x1B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDE SWAP2 SWAP1 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x101 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFC SWAP2 SWAP1 PUSH2 0xA07 JUMP JUMPDEST PUSH2 0x1BC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10B PUSH2 0x840 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xD4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x129 PUSH2 0x866 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x136 SWAP2 SWAP1 PUSH2 0xCED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x154 SWAP2 SWAP1 PUSH2 0xD67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x165 PUSH2 0x8B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH3 0xFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x24A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x241 SWAP1 PUSH2 0xD82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C9 SWAP3 SWAP2 SWAP1 PUSH2 0xD08 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x93F JUMP JUMPDEST POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x39B SWAP3 SWAP2 SWAP1 PUSH2 0xD08 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0x93F JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x5 SLOAD EQ PUSH2 0x688 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC49CCBE DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x494 SWAP2 SWAP1 PUSH2 0xDBD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E5 SWAP2 SWAP1 PUSH2 0x9CB JUMP JUMPDEST POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SLOAD DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFC6F7865 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A3 SWAP2 SWAP1 PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F4 SWAP2 SWAP1 PUSH2 0x9CB JUMP JUMPDEST POP POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42966C68 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x653 SWAP2 SWAP1 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x681 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x88316456 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D7 SWAP2 SWAP1 PUSH2 0xDD8 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x805 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x829 SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST SWAP1 SWAP2 POP SWAP1 POP POP PUSH1 0x5 PUSH1 0x0 DUP3 SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x8E5 DUP2 PUSH2 0xF27 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8FA DUP2 PUSH2 0xF3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x90F DUP2 PUSH2 0xF55 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x924 DUP2 PUSH2 0xF6C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x939 DUP2 PUSH2 0xF6C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x95F DUP5 DUP3 DUP6 ADD PUSH2 0x8D6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x97E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x98C DUP8 DUP3 DUP9 ADD PUSH2 0x92A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x99D DUP8 DUP3 DUP9 ADD PUSH2 0x900 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x9AE DUP8 DUP3 DUP9 ADD PUSH2 0x92A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x9BF DUP8 DUP3 DUP9 ADD PUSH2 0x92A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x9EC DUP6 DUP3 DUP7 ADD PUSH2 0x92A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x9FD DUP6 DUP3 DUP7 ADD PUSH2 0x92A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA2B DUP8 DUP3 DUP9 ADD PUSH2 0x915 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xA3C DUP8 DUP3 DUP9 ADD PUSH2 0x915 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xA4D DUP8 DUP3 DUP9 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xA5E DUP8 DUP3 DUP9 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0xA73 DUP2 PUSH2 0xE3B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA82 DUP2 PUSH2 0xE3B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA91 DUP2 PUSH2 0xEBB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xAA0 DUP2 PUSH2 0xEDF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xAAF DUP2 PUSH2 0xF03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xABE DUP2 PUSH2 0xE59 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD1 PUSH1 0xD DUP4 PUSH2 0xE2A JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F7420746865206F776E657200000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0xB1A PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xB2D PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xA6A JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xB40 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xCA2 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xB53 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xCA2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0xB6F PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xB82 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xCA2 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xB95 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xBA8 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xBBB PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x160 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0xBD8 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0xA6A JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xBEB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xA6A JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xBFE PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xCB1 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xC11 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xAB5 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xC24 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0xAB5 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0xC37 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0xC4A PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0xC5D PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0xC72 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0xC87 PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0xA6A JUMP JUMPDEST POP PUSH2 0x140 DUP3 ADD MLOAD PUSH2 0xC9C PUSH2 0x140 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xCAB DUP2 PUSH2 0xE66 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCBA DUP2 PUSH2 0xEA2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCC9 DUP2 PUSH2 0xEA2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCD8 DUP2 PUSH2 0xEB1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCE7 DUP2 PUSH2 0xEB1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD02 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA79 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xD1D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xA79 JUMP JUMPDEST PUSH2 0xD2A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCDE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD46 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA88 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD61 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA97 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD7C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xAA6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD9B DUP2 PUSH2 0xAC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0xDB7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB04 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xDD2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0xDEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBC1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE09 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCC0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE24 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCDE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE46 DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC6 DUP3 PUSH2 0xECD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED8 DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEEA DUP3 PUSH2 0xEF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFC DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0E DUP3 PUSH2 0xF15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF20 DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF30 DUP2 PUSH2 0xE4D JUMP JUMPDEST DUP2 EQ PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xF47 DUP2 PUSH2 0xE59 JUMP JUMPDEST DUP2 EQ PUSH2 0xF52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xF5E DUP2 PUSH2 0xE66 JUMP JUMPDEST DUP2 EQ PUSH2 0xF69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xF75 DUP2 PUSH2 0xEB1 JUMP JUMPDEST DUP2 EQ PUSH2 0xF80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 0x48 SGT 0xCF PUSH13 0xBF2C4059EF974EBF668602A20D MSTORE 0xDF GASLIMIT 0xD0 CODECOPY COINBASE EXTCODECOPY SIGNEXTEND 0xD9 RETURN PUSH12 0xC0123D64736F6C6343000706 STOP CALLER ",
							"sourceMap": "289:2827:13:-:0;;;566:407;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;740:10;732:5;;:18;;;;;;;;;;;;;;;;;;785:11;760:10;;:37;;;;;;;;;;;;;;;;;;853:16;807:15;;:63;;;;;;;;;;;;;;;;;;896:7;880:6;;:24;;;;;;;;;;;;;;;;;;930:7;914:6;;:24;;;;;;;;;;;;;;;;;;958:8;948:7;;:18;;;;;;;;;;;;;;;;;;566:407;;;;;289:2827;;7:143:14;;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;70:80;;;;:::o;156:141::-;;243:6;237:13;228:22;;259:32;285:5;259:32;:::i;:::-;218:79;;;;:::o;303:908::-;;;;;;489:3;477:9;468:7;464:23;460:33;457:2;;;506:1;503;496:12;457:2;549:1;574:64;630:7;621:6;610:9;606:22;574:64;:::i;:::-;564:74;;520:128;687:2;713:64;769:7;760:6;749:9;745:22;713:64;:::i;:::-;703:74;;658:129;826:2;852:64;908:7;899:6;888:9;884:22;852:64;:::i;:::-;842:74;;797:129;965:2;991:64;1047:7;1038:6;1027:9;1023:22;991:64;:::i;:::-;981:74;;936:129;1104:3;1131:63;1186:7;1177:6;1166:9;1162:22;1131:63;:::i;:::-;1121:73;;1075:129;447:764;;;;;;;;:::o;1217:96::-;;1283:24;1301:5;1283:24;:::i;:::-;1272:35;;1262:51;;;:::o;1319:126::-;;1396:42;1389:5;1385:54;1374:65;;1364:81;;;:::o;1451:91::-;;1527:8;1520:5;1516:20;1505:31;;1495:47;;;:::o;1548:122::-;1621:24;1639:5;1621:24;:::i;:::-;1614:5;1611:35;1601:2;;1660:1;1657;1650:12;1601:2;1591:79;:::o;1676:120::-;1748:23;1765:5;1748:23;:::i;:::-;1741:5;1738:34;1728:2;;1786:1;1783;1776:12;1728:2;1718:78;:::o;289:2827:13:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:14864:14",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "67:77:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "77:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "92:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "86:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "86:13:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "77:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "132:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "108:23:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "108:30:14"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "45:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "53:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "61:5:14",
														"type": ""
													}
												],
												"src": "7:137:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "200:85:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "210:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "232:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "219:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "219:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "273:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "248:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "248:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "248:31:14"
														}
													]
												},
												"name": "abi_decode_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "178:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "186:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "194:5:14",
														"type": ""
													}
												],
												"src": "150:135:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "354:80:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "364:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "379:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "373:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "373:13:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "364:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "422:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint128",
																	"nodeType": "YulIdentifier",
																	"src": "395:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "395:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "395:33:14"
														}
													]
												},
												"name": "abi_decode_t_uint128_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "332:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "340:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "348:5:14",
														"type": ""
													}
												],
												"src": "291:143:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "492:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "502:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "524:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "511:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "511:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "502:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "567:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "540:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:33:14"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "470:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "478:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "486:5:14",
														"type": ""
													}
												],
												"src": "440:139:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "648:80:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "658:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "673:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "667:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "667:13:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "658:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "716:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "689:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "689:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "689:33:14"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "626:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "634:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "642:5:14",
														"type": ""
													}
												],
												"src": "585:143:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "808:204:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "854:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "863:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "866:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "856:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "856:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "856:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "829:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "838:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "825:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "825:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "850:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "821:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "821:32:14"
															},
															"nodeType": "YulIf",
															"src": "818:2:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "880:125:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "895:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "909:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "899:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "924:71:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "967:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "978:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "963:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "963:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "987:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "934:28:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "934:61:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "924:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "778:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "789:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "801:6:14",
														"type": ""
													}
												],
												"src": "734:278:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1146:625:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1193:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1202:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1205:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1195:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1195:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1195:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1167:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1176:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1163:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1163:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1188:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1159:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1159:33:14"
															},
															"nodeType": "YulIf",
															"src": "1156:2:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "1219:128:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1234:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1248:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1238:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1263:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1309:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1320:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1305:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1305:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1329:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1273:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1273:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1263:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1357:129:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1372:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1386:2:14",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1376:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1402:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1448:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1459:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1444:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1444:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1468:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint128_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1412:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1412:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1402:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1496:129:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1511:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1525:2:14",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1515:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1541:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1587:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1598:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1583:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1583:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1607:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1551:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1551:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "1541:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1635:129:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1650:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1664:2:14",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1654:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1680:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1726:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1737:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1722:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1722:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1746:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1690:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1690:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "1680:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1092:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1103:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1115:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1123:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1131:6:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1139:6:14",
														"type": ""
													}
												],
												"src": "1018:753:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1871:346:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1917:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1926:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1929:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1919:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1919:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1919:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1892:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1901:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1888:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1888:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1913:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1884:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1884:32:14"
															},
															"nodeType": "YulIf",
															"src": "1881:2:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "1943:128:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1958:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1972:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1962:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1987:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2033:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2044:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2029:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2029:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2053:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1997:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1997:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1987:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2081:129:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2096:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2110:2:14",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2100:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2126:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2172:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2183:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2168:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2168:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2192:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "2136:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2136:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2126:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1833:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1844:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1856:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1864:6:14",
														"type": ""
													}
												],
												"src": "1777:440:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2336:577:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2383:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2392:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2395:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2385:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2385:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2385:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2357:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2366:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2353:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2353:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2378:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2349:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2349:33:14"
															},
															"nodeType": "YulIf",
															"src": "2346:2:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "2409:117:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2424:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2438:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2428:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2453:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2488:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2499:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2484:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2484:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2508:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2463:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2463:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2453:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2536:118:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2551:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2565:2:14",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2555:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2581:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2616:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2627:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2612:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2612:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2636:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2591:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2591:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2581:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2664:116:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2679:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2693:2:14",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2683:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2709:61:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2742:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2753:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2738:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2738:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2762:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_int24",
																			"nodeType": "YulIdentifier",
																			"src": "2719:18:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2719:51:14"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "2709:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2790:116:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2805:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2819:2:14",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2809:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2835:61:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2868:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2879:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2864:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2864:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2888:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_int24",
																			"nodeType": "YulIdentifier",
																			"src": "2845:18:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2845:51:14"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "2835:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256t_int24t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2282:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2293:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2305:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2313:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2321:6:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2329:6:14",
														"type": ""
													}
												],
												"src": "2223:690:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2974:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2991:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3014:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2996:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2996:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2984:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2984:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2984:37:14"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2962:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2969:3:14",
														"type": ""
													}
												],
												"src": "2919:108:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3098:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3115:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3138:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3120:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3120:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3108:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3108:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3108:37:14"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3086:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3093:3:14",
														"type": ""
													}
												],
												"src": "3033:118:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3235:79:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3252:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3301:5:14"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IERC20_$77_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3257:43:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3257:50:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3245:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3245:63:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3245:63:14"
														}
													]
												},
												"name": "abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3223:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3230:3:14",
														"type": ""
													}
												],
												"src": "3157:157:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3420:101:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3437:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3508:5:14"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_INonfungiblePositionManager_$508_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3442:65:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3442:72:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3430:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3430:85:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3430:85:14"
														}
													]
												},
												"name": "abi_encode_t_contract$_INonfungiblePositionManager_$508_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3408:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3415:3:14",
														"type": ""
													}
												],
												"src": "3320:201:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3611:85:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3628:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3683:5:14"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_ISwapRouter_$665_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3633:49:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3633:56:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3621:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3621:69:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3621:69:14"
														}
													]
												},
												"name": "abi_encode_t_contract$_ISwapRouter_$665_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3599:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3606:3:14",
														"type": ""
													}
												],
												"src": "3527:169:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3753:51:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3770:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3791:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_int24",
																			"nodeType": "YulIdentifier",
																			"src": "3775:15:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3775:22:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3763:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3763:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3763:35:14"
														}
													]
												},
												"name": "abi_encode_t_int24_to_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3741:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3748:3:14",
														"type": ""
													}
												],
												"src": "3702:102:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3956:165:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3966:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4032:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4037:2:14",
																		"type": "",
																		"value": "13"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3973:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3973:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "3966:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4061:3:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4066:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4057:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4057:11:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4070:15:14",
																		"type": "",
																		"value": "Not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4050:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4050:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4050:36:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4096:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4107:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4112:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4103:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4103:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4096:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3944:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3952:3:14",
														"type": ""
													}
												],
												"src": "3810:311:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4361:759:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4371:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4387:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4392:4:14",
																		"type": "",
																		"value": "0x80"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4383:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4383:14:14"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "4375:4:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4407:167:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4445:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4475:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4482:4:14",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4471:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4471:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "4465:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4465:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "4449:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "4535:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "4553:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4558:4:14",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4549:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4549:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4501:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4501:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "4501:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4584:169:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4624:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4654:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4661:4:14",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4650:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4650:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "4644:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4644:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "4628:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "4714:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "4732:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4737:4:14",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4728:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4728:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4680:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4680:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "4680:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4763:170:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4804:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4834:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4841:4:14",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4830:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4830:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "4824:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4824:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "4808:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "4894:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "4912:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4917:4:14",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4908:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4908:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint128_to_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "4860:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4860:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "4860:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4943:170:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4984:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5014:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5021:4:14",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5010:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5010:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "5004:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5004:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "4988:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "5074:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "5092:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5097:4:14",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5088:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5088:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint128_to_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "5040:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5040:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5040:63:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_CollectParams_$491_memory_ptr_to_t_struct$_CollectParams_$491_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4348:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4355:3:14",
														"type": ""
													}
												],
												"src": "4235:885:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5400:937:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5410:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5426:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5431:4:14",
																		"type": "",
																		"value": "0xa0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5422:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5422:14:14"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "5414:4:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5446:167:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5484:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5514:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5521:4:14",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5510:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5510:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "5504:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5504:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "5488:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "5574:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "5592:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5597:4:14",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5588:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5588:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5540:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5540:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5540:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5623:169:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5663:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5693:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5700:4:14",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5689:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5689:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "5683:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5683:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "5667:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "5753:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "5771:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5776:4:14",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5767:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5767:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint128_to_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "5719:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5719:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5719:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5802:170:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5843:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5873:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5880:4:14",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5869:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5869:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "5863:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5863:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "5847:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "5933:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "5951:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5956:4:14",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5947:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5947:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5899:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5899:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5899:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5982:170:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6023:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6053:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6060:4:14",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6049:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6049:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "6043:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6043:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "6027:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "6113:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "6131:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6136:4:14",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6127:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6127:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "6079:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6079:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6079:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6162:168:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6201:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6231:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6238:4:14",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6227:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6227:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "6221:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6221:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "6205:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "6291:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "6309:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6314:4:14",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6305:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6305:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "6257:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6257:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6257:63:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_DecreaseLiquidityParams_$472_memory_ptr_to_t_struct$_DecreaseLiquidityParams_$472_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5387:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5394:3:14",
														"type": ""
													}
												],
												"src": "5254:1083:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6565:2015:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6575:28:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6591:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6596:6:14",
																		"type": "",
																		"value": "0x0160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6587:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6587:16:14"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "6579:4:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6613:166:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6650:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6680:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6687:4:14",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6676:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6676:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "6670:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6670:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "6654:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "6740:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "6758:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6763:4:14",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6754:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6754:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6706:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6706:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6706:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6789:166:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6826:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6856:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6863:4:14",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6852:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6852:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "6846:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6846:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "6830:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "6916:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "6934:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6939:4:14",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6930:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6930:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6882:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6882:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6882:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6965:161:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6999:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7029:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7036:4:14",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7025:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7025:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7019:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7019:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7003:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7087:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7105:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7110:4:14",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7101:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7101:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint24_to_t_uint24",
																			"nodeType": "YulIdentifier",
																			"src": "7055:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7055:61:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7055:61:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7136:165:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7176:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7206:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7213:4:14",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7202:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7202:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7196:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7196:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7180:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7262:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7280:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7285:4:14",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7276:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7276:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_int24_to_t_int24",
																			"nodeType": "YulIdentifier",
																			"src": "7232:29:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7232:59:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7232:59:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7311:165:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7351:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7381:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7388:4:14",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7377:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7377:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7371:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7371:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7355:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7437:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7455:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7460:4:14",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7451:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7451:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_int24_to_t_int24",
																			"nodeType": "YulIdentifier",
																			"src": "7407:29:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7407:59:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7407:59:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7486:174:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7531:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7561:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7568:4:14",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7557:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7557:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7551:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7551:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7535:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7621:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7639:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7644:4:14",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7635:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7635:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7587:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7587:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7587:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7670:174:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7715:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7745:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7752:4:14",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7741:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7741:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7735:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7735:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7719:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7805:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "7823:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7828:4:14",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7819:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7819:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7771:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7771:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7771:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7854:170:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7895:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7925:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7932:4:14",
																						"type": "",
																						"value": "0xe0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7921:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7921:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7915:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7915:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "7899:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "7985:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8003:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8008:4:14",
																						"type": "",
																						"value": "0xe0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7999:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7999:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7951:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7951:63:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "7951:63:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8034:174:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8075:45:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8105:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8112:6:14",
																						"type": "",
																						"value": "0x0100"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8101:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8101:18:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8095:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8095:25:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8079:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8167:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8185:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8190:6:14",
																						"type": "",
																						"value": "0x0100"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8181:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8181:16:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8133:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8133:65:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8133:65:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8218:173:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8258:45:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8288:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8295:6:14",
																						"type": "",
																						"value": "0x0120"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8284:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8284:18:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8278:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8278:25:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8262:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8350:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8368:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8373:6:14",
																						"type": "",
																						"value": "0x0120"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8364:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8364:16:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_address_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "8316:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8316:65:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8316:65:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "8401:172:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "8440:45:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "8470:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8477:6:14",
																						"type": "",
																						"value": "0x0140"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8466:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8466:18:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "8460:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8460:25:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "8444:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "8532:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "8550:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8555:6:14",
																						"type": "",
																						"value": "0x0140"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8546:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8546:16:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8498:33:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8498:65:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "8498:65:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_MintParams_$422_memory_ptr_to_t_struct$_MintParams_$422_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6552:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6559:3:14",
														"type": ""
													}
												],
												"src": "6445:2135:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8641:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8658:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8681:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint128",
																			"nodeType": "YulIdentifier",
																			"src": "8663:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8663:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8651:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8651:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8651:37:14"
														}
													]
												},
												"name": "abi_encode_t_uint128_to_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8629:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8636:3:14",
														"type": ""
													}
												],
												"src": "8586:108:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8753:52:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8770:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8792:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint24",
																			"nodeType": "YulIdentifier",
																			"src": "8775:16:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8775:23:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8763:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8763:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8763:36:14"
														}
													]
												},
												"name": "abi_encode_t_uint24_to_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8741:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8748:3:14",
														"type": ""
													}
												],
												"src": "8700:105:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8874:52:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8891:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8913:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint24",
																			"nodeType": "YulIdentifier",
																			"src": "8896:16:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8896:23:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8884:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8884:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8884:36:14"
														}
													]
												},
												"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8862:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8869:3:14",
														"type": ""
													}
												],
												"src": "8811:115:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8987:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9004:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9027:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9009:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9009:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8997:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8997:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8997:37:14"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8975:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8982:3:14",
														"type": ""
													}
												],
												"src": "8932:108:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9111:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9128:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9151:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9133:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9133:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9121:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9121:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9121:37:14"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9099:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9106:3:14",
														"type": ""
													}
												],
												"src": "9046:118:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9268:124:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9278:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9290:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9301:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9286:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9286:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9278:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9358:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9371:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9382:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9367:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9367:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9314:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9314:71:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9314:71:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9240:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9252:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9263:4:14",
														"type": ""
													}
												],
												"src": "9170:222:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9524:206:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9534:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9546:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9557:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9542:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9542:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9534:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9614:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9627:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9638:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9623:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9623:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9570:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9570:71:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9570:71:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9695:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9708:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9719:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9704:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9704:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9651:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9651:72:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9651:72:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9488:9:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9500:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9508:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9519:4:14",
														"type": ""
													}
												],
												"src": "9398:332:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9847:137:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9857:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9869:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9880:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9865:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9865:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9857:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9950:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9963:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9974:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9959:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9959:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9893:56:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9893:84:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9893:84:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9819:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9831:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9842:4:14",
														"type": ""
													}
												],
												"src": "9736:248:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10123:159:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10133:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10145:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10156:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10141:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10141:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10133:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10248:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10261:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10272:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10257:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10257:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_INonfungiblePositionManager_$508_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10169:78:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10169:106:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10169:106:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_INonfungiblePositionManager_$508__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10095:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10107:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10118:4:14",
														"type": ""
													}
												],
												"src": "9990:292:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10405:143:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10415:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10427:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10438:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10423:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10423:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10415:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10514:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10527:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10538:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10523:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10523:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_ISwapRouter_$665_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10451:62:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10451:90:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10451:90:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ISwapRouter_$665__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10377:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10389:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10400:4:14",
														"type": ""
													}
												],
												"src": "10288:260:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10725:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10735:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10747:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10758:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10743:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10743:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10735:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10782:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10793:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10778:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10778:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10801:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10807:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10797:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10797:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10771:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10771:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10771:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10827:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10961:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10835:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10835:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10827:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10705:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10720:4:14",
														"type": ""
													}
												],
												"src": "10554:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11137:185:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11147:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11159:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11170:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11155:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11155:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11147:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11288:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11301:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11312:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11297:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11297:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_struct$_CollectParams_$491_memory_ptr_to_t_struct$_CollectParams_$491_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11184:103:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11184:131:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11184:131:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_CollectParams_$491_memory_ptr__to_t_struct$_CollectParams_$491_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11109:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11121:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11132:4:14",
														"type": ""
													}
												],
												"src": "10979:343:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11506:205:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11516:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11528:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11539:3:14",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11524:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11524:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11516:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11677:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11690:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11701:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11686:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11686:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_struct$_DecreaseLiquidityParams_$472_memory_ptr_to_t_struct$_DecreaseLiquidityParams_$472_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11553:123:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11553:151:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11553:151:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_DecreaseLiquidityParams_$472_memory_ptr__to_t_struct$_DecreaseLiquidityParams_$472_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11478:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11490:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11501:4:14",
														"type": ""
													}
												],
												"src": "11328:383:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11869:179:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11879:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11891:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11902:3:14",
																		"type": "",
																		"value": "352"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11887:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11887:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11879:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12014:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12027:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12038:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12023:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12023:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_struct$_MintParams_$422_memory_ptr_to_t_struct$_MintParams_$422_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11916:97:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11916:125:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11916:125:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_MintParams_$422_memory_ptr__to_t_struct$_MintParams_$422_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11841:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11853:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11864:4:14",
														"type": ""
													}
												],
												"src": "11717:331:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12150:122:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12160:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12172:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12183:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12168:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12168:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12160:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12238:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12251:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12262:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12247:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12247:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint24_to_t_uint24_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12196:41:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12196:69:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12196:69:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12122:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12134:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12145:4:14",
														"type": ""
													}
												],
												"src": "12054:218:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12376:124:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12386:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12398:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12409:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12394:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12394:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12386:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12466:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12479:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12490:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12475:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12475:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12422:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12422:71:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12422:71:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12348:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12360:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12371:4:14",
														"type": ""
													}
												],
												"src": "12278:222:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12602:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12619:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12624:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12612:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12612:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12612:19:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12640:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12659:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12664:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12655:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12655:14:14"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "12640:11:14"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12574:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "12579:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "12590:11:14",
														"type": ""
													}
												],
												"src": "12506:169:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12726:51:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12736:35:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12765:5:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "12747:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12747:24:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "12736:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12708:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "12718:7:14",
														"type": ""
													}
												],
												"src": "12681:96:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12825:48:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12835:32:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12860:5:14"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "12853:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12853:13:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12846:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12846:21:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "12835:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12807:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "12817:7:14",
														"type": ""
													}
												],
												"src": "12783:90:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12922:47:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12932:31:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12954:1:14",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12957:5:14"
																	}
																],
																"functionName": {
																	"name": "signextend",
																	"nodeType": "YulIdentifier",
																	"src": "12943:10:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12943:20:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "12932:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12904:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "12914:7:14",
														"type": ""
													}
												],
												"src": "12879:90:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13020:73:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13030:57:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13045:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13052:34:14",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13041:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13041:46:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "13030:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13002:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "13012:7:14",
														"type": ""
													}
												],
												"src": "12975:118:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13144:81:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13154:65:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13169:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13176:42:14",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13165:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13165:54:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "13154:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13126:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "13136:7:14",
														"type": ""
													}
												],
												"src": "13099:126:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13275:47:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13285:31:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13300:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13307:8:14",
																		"type": "",
																		"value": "0xffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13296:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13296:20:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "13285:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13257:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "13267:7:14",
														"type": ""
													}
												],
												"src": "13231:91:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13373:32:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13383:16:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "13394:5:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "13383:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13355:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "13365:7:14",
														"type": ""
													}
												],
												"src": "13328:77:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13484:79:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13494:63:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13551:5:14"
																	}
																],
																"functionName": {
																	"name": "convert_t_contract$_IERC20_$77_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "13507:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13507:50:14"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "13494:9:14"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IERC20_$77_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13464:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "13474:9:14",
														"type": ""
													}
												],
												"src": "13411:152:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13642:53:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13652:37:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13683:5:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "13665:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13665:24:14"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "13652:9:14"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IERC20_$77_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13622:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "13632:9:14",
														"type": ""
													}
												],
												"src": "13569:126:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13796:101:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13806:85:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13885:5:14"
																	}
																],
																"functionName": {
																	"name": "convert_t_contract$_INonfungiblePositionManager_$508_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "13819:65:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13819:72:14"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "13806:9:14"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_INonfungiblePositionManager_$508_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13776:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "13786:9:14",
														"type": ""
													}
												],
												"src": "13701:196:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13998:53:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14008:37:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14039:5:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "14021:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14021:24:14"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "14008:9:14"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_INonfungiblePositionManager_$508_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13978:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "13988:9:14",
														"type": ""
													}
												],
												"src": "13903:148:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14136:85:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14146:69:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14209:5:14"
																	}
																],
																"functionName": {
																	"name": "convert_t_contract$_ISwapRouter_$665_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "14159:49:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14159:56:14"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "14146:9:14"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_ISwapRouter_$665_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14116:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "14126:9:14",
														"type": ""
													}
												],
												"src": "14057:164:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14306:53:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14316:37:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14347:5:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "14329:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14329:24:14"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "14316:9:14"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_ISwapRouter_$665_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14286:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "14296:9:14",
														"type": ""
													}
												],
												"src": "14227:132:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14405:76:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14459:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14468:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14471:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14461:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14461:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14461:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14428:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "14450:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "14435:14:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14435:21:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "14425:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14425:32:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14418:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14418:40:14"
															},
															"nodeType": "YulIf",
															"src": "14415:2:14"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14398:5:14",
														"type": ""
													}
												],
												"src": "14365:116:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14528:77:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14583:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14592:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14595:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14585:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14585:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14585:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14551:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "14574:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_int24",
																					"nodeType": "YulIdentifier",
																					"src": "14558:15:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14558:22:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "14548:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14548:33:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14541:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14541:41:14"
															},
															"nodeType": "YulIf",
															"src": "14538:2:14"
														}
													]
												},
												"name": "validator_revert_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14521:5:14",
														"type": ""
													}
												],
												"src": "14487:118:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14654:79:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14711:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14720:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14723:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14713:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14713:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14713:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14677:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "14702:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint128",
																					"nodeType": "YulIdentifier",
																					"src": "14684:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14684:24:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "14674:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14674:35:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14667:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14667:43:14"
															},
															"nodeType": "YulIf",
															"src": "14664:2:14"
														}
													]
												},
												"name": "validator_revert_t_uint128",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14647:5:14",
														"type": ""
													}
												],
												"src": "14611:122:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14782:79:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14839:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14848:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14851:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14841:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14841:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14841:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14805:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "14830:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "14812:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14812:24:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "14802:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14802:35:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14795:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14795:43:14"
															},
															"nodeType": "YulIf",
															"src": "14792:2:14"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14775:5:14",
														"type": ""
													}
												],
												"src": "14739:122:14"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_int24(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_int24(value)\n    }\n\n    function abi_decode_t_uint128_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint128(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint128_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_int24t_int24(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_int24(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_int24(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$77_to_t_address(value))\n    }\n\n    function abi_encode_t_contract$_INonfungiblePositionManager_$508_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_INonfungiblePositionManager_$508_to_t_address(value))\n    }\n\n    function abi_encode_t_contract$_ISwapRouter_$665_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ISwapRouter_$665_to_t_address(value))\n    }\n\n    function abi_encode_t_int24_to_t_int24(value, pos) {\n        mstore(pos, cleanup_t_int24(value))\n    }\n\n    function abi_encode_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n\n        mstore(add(pos, 0), \"Not the owner\")\n\n        end := add(pos, 32)\n    }\n\n    // struct INonfungiblePositionManager.CollectParams -> struct INonfungiblePositionManager.CollectParams\n    function abi_encode_t_struct$_CollectParams_$491_memory_ptr_to_t_struct$_CollectParams_$491_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x80)\n\n        {\n            // tokenId\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // recipient\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // amount0Max\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint128_to_t_uint128(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // amount1Max\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint128_to_t_uint128(memberValue0, add(pos, 0x60))\n        }\n\n    }\n\n    // struct INonfungiblePositionManager.DecreaseLiquidityParams -> struct INonfungiblePositionManager.DecreaseLiquidityParams\n    function abi_encode_t_struct$_DecreaseLiquidityParams_$472_memory_ptr_to_t_struct$_DecreaseLiquidityParams_$472_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0xa0)\n\n        {\n            // tokenId\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // liquidity\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint128_to_t_uint128(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // amount0Min\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // amount1Min\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // deadline\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x80))\n        }\n\n    }\n\n    // struct INonfungiblePositionManager.MintParams -> struct INonfungiblePositionManager.MintParams\n    function abi_encode_t_struct$_MintParams_$422_memory_ptr_to_t_struct$_MintParams_$422_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0160)\n\n        {\n            // token0\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // token1\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // fee\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint24_to_t_uint24(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // tickLower\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_int24_to_t_int24(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // tickUpper\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_int24_to_t_int24(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // amount0Desired\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // amount1Desired\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xc0))\n        }\n\n        {\n            // amount0Min\n\n            let memberValue0 := mload(add(value, 0xe0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xe0))\n        }\n\n        {\n            // amount1Min\n\n            let memberValue0 := mload(add(value, 0x0100))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x0100))\n        }\n\n        {\n            // recipient\n\n            let memberValue0 := mload(add(value, 0x0120))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x0120))\n        }\n\n        {\n            // deadline\n\n            let memberValue0 := mload(add(value, 0x0140))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x0140))\n        }\n\n    }\n\n    function abi_encode_t_uint128_to_t_uint128(value, pos) {\n        mstore(pos, cleanup_t_uint128(value))\n    }\n\n    function abi_encode_t_uint24_to_t_uint24(value, pos) {\n        mstore(pos, cleanup_t_uint24(value))\n    }\n\n    function abi_encode_t_uint24_to_t_uint24_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint24(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_contract$_INonfungiblePositionManager_$508__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_INonfungiblePositionManager_$508_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_contract$_ISwapRouter_$665__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_ISwapRouter_$665_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_struct$_CollectParams_$491_memory_ptr__to_t_struct$_CollectParams_$491_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_struct$_CollectParams_$491_memory_ptr_to_t_struct$_CollectParams_$491_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_struct$_DecreaseLiquidityParams_$472_memory_ptr__to_t_struct$_DecreaseLiquidityParams_$472_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_struct$_DecreaseLiquidityParams_$472_memory_ptr_to_t_struct$_DecreaseLiquidityParams_$472_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_struct$_MintParams_$422_memory_ptr__to_t_struct$_MintParams_$422_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 352)\n\n        abi_encode_t_struct$_MintParams_$422_memory_ptr_to_t_struct$_MintParams_$422_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint24_to_t_uint24_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_int24(value) -> cleaned {\n        cleaned := signextend(2, value)\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint24(value) -> cleaned {\n        cleaned := and(value, 0xffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_contract$_IERC20_$77_to_t_address(value) -> converted {\n        converted := convert_t_contract$_IERC20_$77_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IERC20_$77_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function convert_t_contract$_INonfungiblePositionManager_$508_to_t_address(value) -> converted {\n        converted := convert_t_contract$_INonfungiblePositionManager_$508_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_INonfungiblePositionManager_$508_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function convert_t_contract$_ISwapRouter_$665_to_t_address(value) -> converted {\n        converted := convert_t_contract$_ISwapRouter_$665_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ISwapRouter_$665_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_int24(value) {\n        if iszero(eq(value, cleanup_t_int24(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint128(value) {\n        if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100885760003560e01c8063791b98bc1161005b578063791b98bc146101035780638da5cb5b14610121578063c31c9c071461013f578063d21220a71461015d57610088565b8063089fe6aa1461008d5780630dfe1681146100ab57806317d70f7c146100c957806365237b90146100e7575b600080fd5b61009561017b565b6040516100a29190610df4565b60405180910390f35b6100b3610190565b6040516100c09190610d31565b60405180910390f35b6100d16101b6565b6040516100de9190610e0f565b60405180910390f35b61010160048036038101906100fc9190610a07565b6101bc565b005b61010b610840565b6040516101189190610d4c565b60405180910390f35b610129610866565b6040516101369190610ced565b60405180910390f35b61014761088a565b6040516101549190610d67565b60405180910390f35b6101656108b0565b6040516101729190610d31565b60405180910390f35b600460149054906101000a900462ffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024190610d82565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518363ffffffff1660e01b81526004016102c9929190610d08565b602060405180830381600087803b1580156102e357600080fd5b505af11580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b919061093f565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b815260040161039b929190610d08565b602060405180830381600087803b1580156103b557600080fd5b505af11580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed919061093f565b506000600554146106885760006040518060a0016040528060055481526020016fffffffffffffffffffffffffffffffff801681526020016000815260200160008152602001428152509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c49ccbe826040518263ffffffff1660e01b81526004016104949190610dbd565b6040805180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e591906109cb565b50506000604051806080016040528060055481526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016fffffffffffffffffffffffffffffffff801681526020016fffffffffffffffffffffffffffffffff80168152509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc6f7865826040518263ffffffff1660e01b81526004016105a39190610da2565b6040805180830381600087803b1580156105bc57600080fd5b505af11580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f491906109cb565b5050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c686005546040518263ffffffff1660e01b81526004016106539190610e0f565b600060405180830381600087803b15801561066d57600080fd5b505af1158015610681573d6000803e3d6000fd5b5050505050505b6000604051806101600160405280600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600460149054906101000a900462ffffff1662ffffff1681526020018460020b81526020018360020b815260200186815260200185815260200160008152602001600081526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388316456826040518263ffffffff1660e01b81526004016107d79190610dd8565b608060405180830381600087803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190610968565b909150905050600560008291905055505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000815190506108e581610f27565b92915050565b6000813590506108fa81610f3e565b92915050565b60008151905061090f81610f55565b92915050565b60008135905061092481610f6c565b92915050565b60008151905061093981610f6c565b92915050565b60006020828403121561095157600080fd5b600061095f848285016108d6565b91505092915050565b6000806000806080858703121561097e57600080fd5b600061098c8782880161092a565b945050602061099d87828801610900565b93505060406109ae8782880161092a565b92505060606109bf8782880161092a565b91505092959194509250565b600080604083850312156109de57600080fd5b60006109ec8582860161092a565b92505060206109fd8582860161092a565b9150509250929050565b60008060008060808587031215610a1d57600080fd5b6000610a2b87828801610915565b9450506020610a3c87828801610915565b9350506040610a4d878288016108eb565b9250506060610a5e878288016108eb565b91505092959194509250565b610a7381610e3b565b82525050565b610a8281610e3b565b82525050565b610a9181610ebb565b82525050565b610aa081610edf565b82525050565b610aaf81610f03565b82525050565b610abe81610e59565b82525050565b6000610ad1600d83610e2a565b91507f4e6f7420746865206f776e6572000000000000000000000000000000000000006000830152602082019050919050565b608082016000820151610b1a6000850182610ccf565b506020820151610b2d6020850182610a6a565b506040820151610b406040850182610ca2565b506060820151610b536060850182610ca2565b50505050565b60a082016000820151610b6f6000850182610ccf565b506020820151610b826020850182610ca2565b506040820151610b956040850182610ccf565b506060820151610ba86060850182610ccf565b506080820151610bbb6080850182610ccf565b50505050565b61016082016000820151610bd86000850182610a6a565b506020820151610beb6020850182610a6a565b506040820151610bfe6040850182610cb1565b506060820151610c116060850182610ab5565b506080820151610c246080850182610ab5565b5060a0820151610c3760a0850182610ccf565b5060c0820151610c4a60c0850182610ccf565b5060e0820151610c5d60e0850182610ccf565b50610100820151610c72610100850182610ccf565b50610120820151610c87610120850182610a6a565b50610140820151610c9c610140850182610ccf565b50505050565b610cab81610e66565b82525050565b610cba81610ea2565b82525050565b610cc981610ea2565b82525050565b610cd881610eb1565b82525050565b610ce781610eb1565b82525050565b6000602082019050610d026000830184610a79565b92915050565b6000604082019050610d1d6000830185610a79565b610d2a6020830184610cde565b9392505050565b6000602082019050610d466000830184610a88565b92915050565b6000602082019050610d616000830184610a97565b92915050565b6000602082019050610d7c6000830184610aa6565b92915050565b60006020820190508181036000830152610d9b81610ac4565b9050919050565b6000608082019050610db76000830184610b04565b92915050565b600060a082019050610dd26000830184610b59565b92915050565b600061016082019050610dee6000830184610bc1565b92915050565b6000602082019050610e096000830184610cc0565b92915050565b6000602082019050610e246000830184610cde565b92915050565b600082825260208201905092915050565b6000610e4682610e82565b9050919050565b60008115159050919050565b60008160020b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b6000610ec682610ecd565b9050919050565b6000610ed882610e82565b9050919050565b6000610eea82610ef1565b9050919050565b6000610efc82610e82565b9050919050565b6000610f0e82610f15565b9050919050565b6000610f2082610e82565b9050919050565b610f3081610e4d565b8114610f3b57600080fd5b50565b610f4781610e59565b8114610f5257600080fd5b50565b610f5e81610e66565b8114610f6957600080fd5b50565b610f7581610eb1565b8114610f8057600080fd5b5056fea2646970667358221220814813cf6cbf2c4059ef974ebf668602a20d52df45d039413c0bd9f36bc0123d64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x791B98BC GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x791B98BC EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x15D JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x89FE6AA EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0xDFE1681 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x17D70F7C EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x65237B90 EQ PUSH2 0xE7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x17B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB3 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD1 PUSH2 0x1B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDE SWAP2 SWAP1 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x101 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFC SWAP2 SWAP1 PUSH2 0xA07 JUMP JUMPDEST PUSH2 0x1BC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10B PUSH2 0x840 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xD4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x129 PUSH2 0x866 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x136 SWAP2 SWAP1 PUSH2 0xCED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x154 SWAP2 SWAP1 PUSH2 0xD67 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x165 PUSH2 0x8B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH3 0xFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x24A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x241 SWAP1 PUSH2 0xD82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C9 SWAP3 SWAP2 SWAP1 PUSH2 0xD08 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x93F JUMP JUMPDEST POP PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x39B SWAP3 SWAP2 SWAP1 PUSH2 0xD08 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0x93F JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x5 SLOAD EQ PUSH2 0x688 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC49CCBE DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x494 SWAP2 SWAP1 PUSH2 0xDBD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E5 SWAP2 SWAP1 PUSH2 0x9CB JUMP JUMPDEST POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SLOAD DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFC6F7865 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A3 SWAP2 SWAP1 PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F4 SWAP2 SWAP1 PUSH2 0x9CB JUMP JUMPDEST POP POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42966C68 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x653 SWAP2 SWAP1 PUSH2 0xE0F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x681 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH3 0xFFFFFF AND PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP SWAP1 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x88316456 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7D7 SWAP2 SWAP1 PUSH2 0xDD8 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x805 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x829 SWAP2 SWAP1 PUSH2 0x968 JUMP JUMPDEST SWAP1 SWAP2 POP SWAP1 POP POP PUSH1 0x5 PUSH1 0x0 DUP3 SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x8E5 DUP2 PUSH2 0xF27 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8FA DUP2 PUSH2 0xF3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x90F DUP2 PUSH2 0xF55 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x924 DUP2 PUSH2 0xF6C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x939 DUP2 PUSH2 0xF6C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x95F DUP5 DUP3 DUP6 ADD PUSH2 0x8D6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x97E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x98C DUP8 DUP3 DUP9 ADD PUSH2 0x92A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x99D DUP8 DUP3 DUP9 ADD PUSH2 0x900 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x9AE DUP8 DUP3 DUP9 ADD PUSH2 0x92A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x9BF DUP8 DUP3 DUP9 ADD PUSH2 0x92A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x9EC DUP6 DUP3 DUP7 ADD PUSH2 0x92A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x9FD DUP6 DUP3 DUP7 ADD PUSH2 0x92A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA2B DUP8 DUP3 DUP9 ADD PUSH2 0x915 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xA3C DUP8 DUP3 DUP9 ADD PUSH2 0x915 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xA4D DUP8 DUP3 DUP9 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xA5E DUP8 DUP3 DUP9 ADD PUSH2 0x8EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0xA73 DUP2 PUSH2 0xE3B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA82 DUP2 PUSH2 0xE3B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA91 DUP2 PUSH2 0xEBB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xAA0 DUP2 PUSH2 0xEDF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xAAF DUP2 PUSH2 0xF03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xABE DUP2 PUSH2 0xE59 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD1 PUSH1 0xD DUP4 PUSH2 0xE2A JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F7420746865206F776E657200000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0xB1A PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xB2D PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xA6A JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xB40 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xCA2 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xB53 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xCA2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0xB6F PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xB82 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xCA2 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xB95 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xBA8 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xBBB PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x160 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0xBD8 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0xA6A JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xBEB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xA6A JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xBFE PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xCB1 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xC11 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0xAB5 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0xC24 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0xAB5 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0xC37 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0xC4A PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0xC5D PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0xC72 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0xC87 PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0xA6A JUMP JUMPDEST POP PUSH2 0x140 DUP3 ADD MLOAD PUSH2 0xC9C PUSH2 0x140 DUP6 ADD DUP3 PUSH2 0xCCF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xCAB DUP2 PUSH2 0xE66 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCBA DUP2 PUSH2 0xEA2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCC9 DUP2 PUSH2 0xEA2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCD8 DUP2 PUSH2 0xEB1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xCE7 DUP2 PUSH2 0xEB1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD02 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA79 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xD1D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xA79 JUMP JUMPDEST PUSH2 0xD2A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCDE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD46 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA88 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD61 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xA97 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD7C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xAA6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD9B DUP2 PUSH2 0xAC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0xDB7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB04 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xDD2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0xDEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBC1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE09 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCC0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE24 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCDE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE46 DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC6 DUP3 PUSH2 0xECD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED8 DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEEA DUP3 PUSH2 0xEF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFC DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0E DUP3 PUSH2 0xF15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF20 DUP3 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF30 DUP2 PUSH2 0xE4D JUMP JUMPDEST DUP2 EQ PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xF47 DUP2 PUSH2 0xE59 JUMP JUMPDEST DUP2 EQ PUSH2 0xF52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xF5E DUP2 PUSH2 0xE66 JUMP JUMPDEST DUP2 EQ PUSH2 0xF69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xF75 DUP2 PUSH2 0xEB1 JUMP JUMPDEST DUP2 EQ PUSH2 0xF80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 0x48 SGT 0xCF PUSH13 0xBF2C4059EF974EBF668602A20D MSTORE 0xDF GASLIMIT 0xD0 CODECOPY COINBASE EXTCODECOPY SIGNEXTEND 0xD9 RETURN PUSH12 0xC0123D64736F6C6343000706 STOP CALLER ",
							"sourceMap": "289:2827:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;509:21;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;439:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;537:22;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1079:2035;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;382:50;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;321:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;347:29;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;475:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;509:21;;;;;;;;;;;;;:::o;439:20::-;;;;;;;;;;;;;:::o;537:22::-;;;;:::o;1079:2035::-;1032:5;;;;;;;;;;1018:19;;:10;:19;;;1010:45;;;;;;;;;;;;:::i;:::-;;;;;;;;;1279:6:::1;;;;;;;;;;;:14;;;1302:15;;;;;;;;;;;1320:14;1279:56;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1345:6;;;;;;;;;;;:14;;;1368:15;;;;;;;;;;;1386:14;1345:56;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1482:1;1471:7;;:12;1467:984;;1499:65;1583:276;;;;;;;;1666:7;;1583:276;;;;1706:17;1583:276:::0;::::1;;;;;1757:1;1583:276;;;;1792:1;1583:276;;;;1825:15;1583:276;;::::0;1499:360:::1;;1874:15;;;;;;;;;;;:33;;;1908:6;1874:41;;;;;;;;;;;;;;;:::i;:::-;;::::0;::::1;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1982:62;2063:247;;;;;;;;2136:7;;2063:247;;;;2184:4;2063:247;;;;;;2223:17;2063:247:::0;::::1;;;;;2274:17;2063:247:::0;::::1;;;::::0;1982:328:::1;;2325:15;;;;;;;;;;;:23;;;2349:13;2325:38;;;;;;;;;;;;;;;:::i;:::-;;::::0;::::1;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2411:15;;;;;;;;;;;:20;;;2432:7;;2411:29;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;1467:984;;;2490:56;2561:485;;;;;;;;2634:6;;;;;;;;;;;2561:485;;;;;;2675:6;;;;;;;;;;;2561:485;;;;;;2705:7;;;;;;;;;;;2561:485;;;;;;2741:9;2561:485;;;;;;2779:9;2561:485;;;;;;2822:14;2561:485;;;;2870:14;2561:485;;;;2914:1;2561:485;;;;2945:1;2561:485;;;;2983:4;2561:485;;;;;;3016:15;2561:485;;::::0;2490:556:::1;;3075:15;;;;;;;;;;;:20;;;3096:10;3075:32;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3057:50;;;;;;3058:7;;3057:50;;;;;;1065:1;1079:2035:::0;;;;:::o;382:50::-;;;;;;;;;;;;;:::o;321:20::-;;;;;;;;;;;;:::o;347:29::-;;;;;;;;;;;;;:::o;475:20::-;;;;;;;;;;;;;:::o;7:137:14:-;;92:6;86:13;77:22;;108:30;132:5;108:30;:::i;:::-;67:77;;;;:::o;150:135::-;;232:6;219:20;210:29;;248:31;273:5;248:31;:::i;:::-;200:85;;;;:::o;291:143::-;;379:6;373:13;364:22;;395:33;422:5;395:33;:::i;:::-;354:80;;;;:::o;440:139::-;;524:6;511:20;502:29;;540:33;567:5;540:33;:::i;:::-;492:87;;;;:::o;585:143::-;;673:6;667:13;658:22;;689:33;716:5;689:33;:::i;:::-;648:80;;;;:::o;734:278::-;;850:2;838:9;829:7;825:23;821:32;818:2;;;866:1;863;856:12;818:2;909:1;934:61;987:7;978:6;967:9;963:22;934:61;:::i;:::-;924:71;;880:125;808:204;;;;:::o;1018:753::-;;;;;1188:3;1176:9;1167:7;1163:23;1159:33;1156:2;;;1205:1;1202;1195:12;1156:2;1248:1;1273:64;1329:7;1320:6;1309:9;1305:22;1273:64;:::i;:::-;1263:74;;1219:128;1386:2;1412:64;1468:7;1459:6;1448:9;1444:22;1412:64;:::i;:::-;1402:74;;1357:129;1525:2;1551:64;1607:7;1598:6;1587:9;1583:22;1551:64;:::i;:::-;1541:74;;1496:129;1664:2;1690:64;1746:7;1737:6;1726:9;1722:22;1690:64;:::i;:::-;1680:74;;1635:129;1146:625;;;;;;;:::o;1777:440::-;;;1913:2;1901:9;1892:7;1888:23;1884:32;1881:2;;;1929:1;1926;1919:12;1881:2;1972:1;1997:64;2053:7;2044:6;2033:9;2029:22;1997:64;:::i;:::-;1987:74;;1943:128;2110:2;2136:64;2192:7;2183:6;2172:9;2168:22;2136:64;:::i;:::-;2126:74;;2081:129;1871:346;;;;;:::o;2223:690::-;;;;;2378:3;2366:9;2357:7;2353:23;2349:33;2346:2;;;2395:1;2392;2385:12;2346:2;2438:1;2463:53;2508:7;2499:6;2488:9;2484:22;2463:53;:::i;:::-;2453:63;;2409:117;2565:2;2591:53;2636:7;2627:6;2616:9;2612:22;2591:53;:::i;:::-;2581:63;;2536:118;2693:2;2719:51;2762:7;2753:6;2742:9;2738:22;2719:51;:::i;:::-;2709:61;;2664:116;2819:2;2845:51;2888:7;2879:6;2868:9;2864:22;2845:51;:::i;:::-;2835:61;;2790:116;2336:577;;;;;;;:::o;2919:108::-;2996:24;3014:5;2996:24;:::i;:::-;2991:3;2984:37;2974:53;;:::o;3033:118::-;3120:24;3138:5;3120:24;:::i;:::-;3115:3;3108:37;3098:53;;:::o;3157:157::-;3257:50;3301:5;3257:50;:::i;:::-;3252:3;3245:63;3235:79;;:::o;3320:201::-;3442:72;3508:5;3442:72;:::i;:::-;3437:3;3430:85;3420:101;;:::o;3527:169::-;3633:56;3683:5;3633:56;:::i;:::-;3628:3;3621:69;3611:85;;:::o;3702:102::-;3775:22;3791:5;3775:22;:::i;:::-;3770:3;3763:35;3753:51;;:::o;3810:311::-;;3973:67;4037:2;4032:3;3973:67;:::i;:::-;3966:74;;4070:15;4066:1;4061:3;4057:11;4050:36;4112:2;4107:3;4103:12;4096:19;;3956:165;;;:::o;4235:885::-;4392:4;4387:3;4383:14;4482:4;4475:5;4471:16;4465:23;4501:63;4558:4;4553:3;4549:14;4535:12;4501:63;:::i;:::-;4407:167;4661:4;4654:5;4650:16;4644:23;4680:63;4737:4;4732:3;4728:14;4714:12;4680:63;:::i;:::-;4584:169;4841:4;4834:5;4830:16;4824:23;4860:63;4917:4;4912:3;4908:14;4894:12;4860:63;:::i;:::-;4763:170;5021:4;5014:5;5010:16;5004:23;5040:63;5097:4;5092:3;5088:14;5074:12;5040:63;:::i;:::-;4943:170;4361:759;;;:::o;5254:1083::-;5431:4;5426:3;5422:14;5521:4;5514:5;5510:16;5504:23;5540:63;5597:4;5592:3;5588:14;5574:12;5540:63;:::i;:::-;5446:167;5700:4;5693:5;5689:16;5683:23;5719:63;5776:4;5771:3;5767:14;5753:12;5719:63;:::i;:::-;5623:169;5880:4;5873:5;5869:16;5863:23;5899:63;5956:4;5951:3;5947:14;5933:12;5899:63;:::i;:::-;5802:170;6060:4;6053:5;6049:16;6043:23;6079:63;6136:4;6131:3;6127:14;6113:12;6079:63;:::i;:::-;5982:170;6238:4;6231:5;6227:16;6221:23;6257:63;6314:4;6309:3;6305:14;6291:12;6257:63;:::i;:::-;6162:168;5400:937;;;:::o;6445:2135::-;6596:6;6591:3;6587:16;6687:4;6680:5;6676:16;6670:23;6706:63;6763:4;6758:3;6754:14;6740:12;6706:63;:::i;:::-;6613:166;6863:4;6856:5;6852:16;6846:23;6882:63;6939:4;6934:3;6930:14;6916:12;6882:63;:::i;:::-;6789:166;7036:4;7029:5;7025:16;7019:23;7055:61;7110:4;7105:3;7101:14;7087:12;7055:61;:::i;:::-;6965:161;7213:4;7206:5;7202:16;7196:23;7232:59;7285:4;7280:3;7276:14;7262:12;7232:59;:::i;:::-;7136:165;7388:4;7381:5;7377:16;7371:23;7407:59;7460:4;7455:3;7451:14;7437:12;7407:59;:::i;:::-;7311:165;7568:4;7561:5;7557:16;7551:23;7587:63;7644:4;7639:3;7635:14;7621:12;7587:63;:::i;:::-;7486:174;7752:4;7745:5;7741:16;7735:23;7771:63;7828:4;7823:3;7819:14;7805:12;7771:63;:::i;:::-;7670:174;7932:4;7925:5;7921:16;7915:23;7951:63;8008:4;8003:3;7999:14;7985:12;7951:63;:::i;:::-;7854:170;8112:6;8105:5;8101:18;8095:25;8133:65;8190:6;8185:3;8181:16;8167:12;8133:65;:::i;:::-;8034:174;8295:6;8288:5;8284:18;8278:25;8316:65;8373:6;8368:3;8364:16;8350:12;8316:65;:::i;:::-;8218:173;8477:6;8470:5;8466:18;8460:25;8498:65;8555:6;8550:3;8546:16;8532:12;8498:65;:::i;:::-;8401:172;6565:2015;;;:::o;8586:108::-;8663:24;8681:5;8663:24;:::i;:::-;8658:3;8651:37;8641:53;;:::o;8700:105::-;8775:23;8792:5;8775:23;:::i;:::-;8770:3;8763:36;8753:52;;:::o;8811:115::-;8896:23;8913:5;8896:23;:::i;:::-;8891:3;8884:36;8874:52;;:::o;8932:108::-;9009:24;9027:5;9009:24;:::i;:::-;9004:3;8997:37;8987:53;;:::o;9046:118::-;9133:24;9151:5;9133:24;:::i;:::-;9128:3;9121:37;9111:53;;:::o;9170:222::-;;9301:2;9290:9;9286:18;9278:26;;9314:71;9382:1;9371:9;9367:17;9358:6;9314:71;:::i;:::-;9268:124;;;;:::o;9398:332::-;;9557:2;9546:9;9542:18;9534:26;;9570:71;9638:1;9627:9;9623:17;9614:6;9570:71;:::i;:::-;9651:72;9719:2;9708:9;9704:18;9695:6;9651:72;:::i;:::-;9524:206;;;;;:::o;9736:248::-;;9880:2;9869:9;9865:18;9857:26;;9893:84;9974:1;9963:9;9959:17;9950:6;9893:84;:::i;:::-;9847:137;;;;:::o;9990:292::-;;10156:2;10145:9;10141:18;10133:26;;10169:106;10272:1;10261:9;10257:17;10248:6;10169:106;:::i;:::-;10123:159;;;;:::o;10288:260::-;;10438:2;10427:9;10423:18;10415:26;;10451:90;10538:1;10527:9;10523:17;10514:6;10451:90;:::i;:::-;10405:143;;;;:::o;10554:419::-;;10758:2;10747:9;10743:18;10735:26;;10807:9;10801:4;10797:20;10793:1;10782:9;10778:17;10771:47;10835:131;10961:4;10835:131;:::i;:::-;10827:139;;10725:248;;;:::o;10979:343::-;;11170:3;11159:9;11155:19;11147:27;;11184:131;11312:1;11301:9;11297:17;11288:6;11184:131;:::i;:::-;11137:185;;;;:::o;11328:383::-;;11539:3;11528:9;11524:19;11516:27;;11553:151;11701:1;11690:9;11686:17;11677:6;11553:151;:::i;:::-;11506:205;;;;:::o;11717:331::-;;11902:3;11891:9;11887:19;11879:27;;11916:125;12038:1;12027:9;12023:17;12014:6;11916:125;:::i;:::-;11869:179;;;;:::o;12054:218::-;;12183:2;12172:9;12168:18;12160:26;;12196:69;12262:1;12251:9;12247:17;12238:6;12196:69;:::i;:::-;12150:122;;;;:::o;12278:222::-;;12409:2;12398:9;12394:18;12386:26;;12422:71;12490:1;12479:9;12475:17;12466:6;12422:71;:::i;:::-;12376:124;;;;:::o;12506:169::-;;12624:6;12619:3;12612:19;12664:4;12659:3;12655:14;12640:29;;12602:73;;;;:::o;12681:96::-;;12747:24;12765:5;12747:24;:::i;:::-;12736:35;;12726:51;;;:::o;12783:90::-;;12860:5;12853:13;12846:21;12835:32;;12825:48;;;:::o;12879:90::-;;12957:5;12954:1;12943:20;12932:31;;12922:47;;;:::o;12975:118::-;;13052:34;13045:5;13041:46;13030:57;;13020:73;;;:::o;13099:126::-;;13176:42;13169:5;13165:54;13154:65;;13144:81;;;:::o;13231:91::-;;13307:8;13300:5;13296:20;13285:31;;13275:47;;;:::o;13328:77::-;;13394:5;13383:16;;13373:32;;;:::o;13411:152::-;;13507:50;13551:5;13507:50;:::i;:::-;13494:63;;13484:79;;;:::o;13569:126::-;;13665:24;13683:5;13665:24;:::i;:::-;13652:37;;13642:53;;;:::o;13701:196::-;;13819:72;13885:5;13819:72;:::i;:::-;13806:85;;13796:101;;;:::o;13903:148::-;;14021:24;14039:5;14021:24;:::i;:::-;14008:37;;13998:53;;;:::o;14057:164::-;;14159:56;14209:5;14159:56;:::i;:::-;14146:69;;14136:85;;;:::o;14227:132::-;;14329:24;14347:5;14329:24;:::i;:::-;14316:37;;14306:53;;;:::o;14365:116::-;14435:21;14450:5;14435:21;:::i;:::-;14428:5;14425:32;14415:2;;14471:1;14468;14461:12;14415:2;14405:76;:::o;14487:118::-;14558:22;14574:5;14558:22;:::i;:::-;14551:5;14548:33;14538:2;;14595:1;14592;14585:12;14538:2;14528:77;:::o;14611:122::-;14684:24;14702:5;14684:24;:::i;:::-;14677:5;14674:35;14664:2;;14723:1;14720;14713:12;14664:2;14654:79;:::o;14739:122::-;14812:24;14830:5;14812:24;:::i;:::-;14805:5;14802:35;14792:2;;14851:1;14848;14841:12;14792:2;14782:79;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "805000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"adjustLiquidity(uint256,uint256,int24,int24)": "infinite",
								"owner()": "1233",
								"poolFee()": "1222",
								"positionManager()": "1257",
								"swapRouter()": "1301",
								"token0()": "1280",
								"token1()": "1323",
								"tokenId()": "1174"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 289,
									"end": 3116,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "CALLVALUE",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 566,
									"end": 973,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 566,
									"end": 973,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 566,
									"end": 973,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 566,
									"end": 973,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "CODESIZE",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 566,
									"end": 973,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 566,
									"end": 973,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 566,
									"end": 973,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 566,
									"end": 973,
									"name": "tag",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 566,
									"end": 973,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 740,
									"end": 750,
									"name": "CALLER",
									"source": 13
								},
								{
									"begin": 732,
									"end": 737,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 732,
									"end": 737,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "PUSH",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 732,
									"end": 750,
									"name": "EXP",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 732,
									"end": 750,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 732,
									"end": 750,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 732,
									"end": 750,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 785,
									"end": 796,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 760,
									"end": 770,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 797,
									"name": "PUSH",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 760,
									"end": 797,
									"name": "EXP",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 760,
									"end": 797,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 760,
									"end": 797,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 760,
									"end": 797,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 853,
									"end": 869,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 807,
									"end": 822,
									"name": "PUSH",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 807,
									"end": 822,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 807,
									"end": 870,
									"name": "PUSH",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 807,
									"end": 870,
									"name": "EXP",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 807,
									"end": 870,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 807,
									"end": 870,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 807,
									"end": 870,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 896,
									"end": 903,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 880,
									"end": 886,
									"name": "PUSH",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 880,
									"end": 886,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 880,
									"end": 904,
									"name": "PUSH",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 880,
									"end": 904,
									"name": "EXP",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 880,
									"end": 904,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 880,
									"end": 904,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 880,
									"end": 904,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 930,
									"end": 937,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 914,
									"end": 920,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 914,
									"end": 920,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 914,
									"end": 938,
									"name": "PUSH",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 914,
									"end": 938,
									"name": "EXP",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 914,
									"end": 938,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 914,
									"end": 938,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 914,
									"end": 938,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 958,
									"end": 966,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 948,
									"end": 955,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 948,
									"end": 955,
									"name": "PUSH",
									"source": 13,
									"value": "14"
								},
								{
									"begin": 948,
									"end": 966,
									"name": "PUSH",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 948,
									"end": 966,
									"name": "EXP",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFF"
								},
								{
									"begin": 948,
									"end": 966,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "PUSH",
									"source": 13,
									"value": "FFFFFF"
								},
								{
									"begin": 948,
									"end": 966,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "MUL",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 948,
									"end": 966,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 566,
									"end": 973,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "6"
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 7,
									"end": 150,
									"name": "tag",
									"source": 14,
									"value": "8"
								},
								{
									"begin": 7,
									"end": 150,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 7,
									"end": 150,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 95,
									"end": 101,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 89,
									"end": 102,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 80,
									"end": 102,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 80,
									"end": 102,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "10"
								},
								{
									"begin": 138,
									"end": 143,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "11"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "tag",
									"source": 14,
									"value": "10"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 70,
									"end": 150,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 70,
									"end": 150,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 70,
									"end": 150,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 70,
									"end": 150,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 70,
									"end": 150,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 156,
									"end": 297,
									"name": "tag",
									"source": 14,
									"value": "12"
								},
								{
									"begin": 156,
									"end": 297,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 156,
									"end": 297,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 243,
									"end": 249,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 237,
									"end": 250,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 228,
									"end": 250,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 228,
									"end": 250,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 259,
									"end": 291,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "14"
								},
								{
									"begin": 285,
									"end": 290,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 259,
									"end": 291,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "15"
								},
								{
									"begin": 259,
									"end": 291,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 259,
									"end": 291,
									"name": "tag",
									"source": 14,
									"value": "14"
								},
								{
									"begin": 259,
									"end": 291,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 218,
									"end": 297,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 218,
									"end": 297,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 218,
									"end": 297,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 218,
									"end": 297,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 218,
									"end": 297,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 303,
									"end": 1211,
									"name": "tag",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 303,
									"end": 1211,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 303,
									"end": 1211,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 303,
									"end": 1211,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 303,
									"end": 1211,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 303,
									"end": 1211,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 303,
									"end": 1211,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 489,
									"end": 492,
									"name": "PUSH",
									"source": 14,
									"value": "A0"
								},
								{
									"begin": 477,
									"end": 486,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 468,
									"end": 475,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 464,
									"end": 487,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 460,
									"end": 493,
									"name": "SLT",
									"source": 14
								},
								{
									"begin": 457,
									"end": 459,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 457,
									"end": 459,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "17"
								},
								{
									"begin": 457,
									"end": 459,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 506,
									"end": 507,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 503,
									"end": 504,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 496,
									"end": 508,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 457,
									"end": 459,
									"name": "tag",
									"source": 14,
									"value": "17"
								},
								{
									"begin": 457,
									"end": 459,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 549,
									"end": 550,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 574,
									"end": 638,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "18"
								},
								{
									"begin": 630,
									"end": 637,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 621,
									"end": 627,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 610,
									"end": 619,
									"name": "DUP10",
									"source": 14
								},
								{
									"begin": 606,
									"end": 628,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 574,
									"end": 638,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "8"
								},
								{
									"begin": 574,
									"end": 638,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 574,
									"end": 638,
									"name": "tag",
									"source": 14,
									"value": "18"
								},
								{
									"begin": 574,
									"end": 638,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 564,
									"end": 638,
									"name": "SWAP6",
									"source": 14
								},
								{
									"begin": 564,
									"end": 638,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 520,
									"end": 648,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 687,
									"end": 689,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 713,
									"end": 777,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "19"
								},
								{
									"begin": 769,
									"end": 776,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 760,
									"end": 766,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 749,
									"end": 758,
									"name": "DUP10",
									"source": 14
								},
								{
									"begin": 745,
									"end": 767,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 713,
									"end": 777,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "8"
								},
								{
									"begin": 713,
									"end": 777,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 713,
									"end": 777,
									"name": "tag",
									"source": 14,
									"value": "19"
								},
								{
									"begin": 713,
									"end": 777,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 703,
									"end": 777,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 703,
									"end": 777,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 658,
									"end": 787,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 826,
									"end": 828,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 852,
									"end": 916,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 908,
									"end": 915,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 899,
									"end": 905,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 888,
									"end": 897,
									"name": "DUP10",
									"source": 14
								},
								{
									"begin": 884,
									"end": 906,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 852,
									"end": 916,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "8"
								},
								{
									"begin": 852,
									"end": 916,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 852,
									"end": 916,
									"name": "tag",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 852,
									"end": 916,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 842,
									"end": 916,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 842,
									"end": 916,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 797,
									"end": 926,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 965,
									"end": 967,
									"name": "PUSH",
									"source": 14,
									"value": "60"
								},
								{
									"begin": 991,
									"end": 1055,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "21"
								},
								{
									"begin": 1047,
									"end": 1054,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 1038,
									"end": 1044,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1027,
									"end": 1036,
									"name": "DUP10",
									"source": 14
								},
								{
									"begin": 1023,
									"end": 1045,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 991,
									"end": 1055,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "8"
								},
								{
									"begin": 991,
									"end": 1055,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 991,
									"end": 1055,
									"name": "tag",
									"source": 14,
									"value": "21"
								},
								{
									"begin": 991,
									"end": 1055,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 981,
									"end": 1055,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 981,
									"end": 1055,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 936,
									"end": 1065,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1104,
									"end": 1107,
									"name": "PUSH",
									"source": 14,
									"value": "80"
								},
								{
									"begin": 1131,
									"end": 1194,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 1186,
									"end": 1193,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 1177,
									"end": 1183,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1166,
									"end": 1175,
									"name": "DUP10",
									"source": 14
								},
								{
									"begin": 1162,
									"end": 1184,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1131,
									"end": 1194,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "12"
								},
								{
									"begin": 1131,
									"end": 1194,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 1131,
									"end": 1194,
									"name": "tag",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 1131,
									"end": 1194,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1121,
									"end": 1194,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1121,
									"end": 1194,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1075,
									"end": 1204,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 447,
									"end": 1211,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 447,
									"end": 1211,
									"name": "SWAP6",
									"source": 14
								},
								{
									"begin": 447,
									"end": 1211,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 447,
									"end": 1211,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 447,
									"end": 1211,
									"name": "SWAP6",
									"source": 14
								},
								{
									"begin": 447,
									"end": 1211,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 447,
									"end": 1211,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 447,
									"end": 1211,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 447,
									"end": 1211,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 1217,
									"end": 1313,
									"name": "tag",
									"source": 14,
									"value": "23"
								},
								{
									"begin": 1217,
									"end": 1313,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1217,
									"end": 1313,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1283,
									"end": 1307,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "25"
								},
								{
									"begin": 1301,
									"end": 1306,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1283,
									"end": 1307,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 1283,
									"end": 1307,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 1283,
									"end": 1307,
									"name": "tag",
									"source": 14,
									"value": "25"
								},
								{
									"begin": 1283,
									"end": 1307,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1272,
									"end": 1307,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1272,
									"end": 1307,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1262,
									"end": 1313,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1262,
									"end": 1313,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1262,
									"end": 1313,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1262,
									"end": 1313,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 1319,
									"end": 1445,
									"name": "tag",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 1319,
									"end": 1445,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1319,
									"end": 1445,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1396,
									"end": 1438,
									"name": "PUSH",
									"source": 14,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1389,
									"end": 1394,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1385,
									"end": 1439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1374,
									"end": 1439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1374,
									"end": 1439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1364,
									"end": 1445,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1364,
									"end": 1445,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1364,
									"end": 1445,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1364,
									"end": 1445,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 1451,
									"end": 1542,
									"name": "tag",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 1451,
									"end": 1542,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1451,
									"end": 1542,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1527,
									"end": 1535,
									"name": "PUSH",
									"source": 14,
									"value": "FFFFFF"
								},
								{
									"begin": 1520,
									"end": 1525,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1516,
									"end": 1536,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1505,
									"end": 1536,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1505,
									"end": 1536,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1495,
									"end": 1542,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1495,
									"end": 1542,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1495,
									"end": 1542,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1495,
									"end": 1542,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 1548,
									"end": 1670,
									"name": "tag",
									"source": 14,
									"value": "11"
								},
								{
									"begin": 1548,
									"end": 1670,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1621,
									"end": 1645,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 1639,
									"end": 1644,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1621,
									"end": 1645,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "23"
								},
								{
									"begin": 1621,
									"end": 1645,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 1621,
									"end": 1645,
									"name": "tag",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 1621,
									"end": 1645,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1614,
									"end": 1619,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1611,
									"end": 1646,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 1601,
									"end": 1603,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 1601,
									"end": 1603,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1660,
									"end": 1661,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1657,
									"end": 1658,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1650,
									"end": 1662,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1601,
									"end": 1603,
									"name": "tag",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 1601,
									"end": 1603,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1591,
									"end": 1670,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1591,
									"end": 1670,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 1676,
									"end": 1796,
									"name": "tag",
									"source": 14,
									"value": "15"
								},
								{
									"begin": 1676,
									"end": 1796,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1748,
									"end": 1771,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "34"
								},
								{
									"begin": 1765,
									"end": 1770,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1748,
									"end": 1771,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 1748,
									"end": 1771,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 1748,
									"end": 1771,
									"name": "tag",
									"source": 14,
									"value": "34"
								},
								{
									"begin": 1748,
									"end": 1771,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1741,
									"end": 1746,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1738,
									"end": 1772,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 1728,
									"end": 1730,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "35"
								},
								{
									"begin": 1728,
									"end": 1730,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1786,
									"end": 1787,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1783,
									"end": 1784,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1776,
									"end": 1788,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1728,
									"end": 1730,
									"name": "tag",
									"source": 14,
									"value": "35"
								},
								{
									"begin": 1728,
									"end": 1730,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1718,
									"end": 1796,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1718,
									"end": 1796,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "tag",
									"source": 13,
									"value": "6"
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 289,
									"end": 3116,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220814813cf6cbf2c4059ef974ebf668602a20d52df45d039413c0bd9f36bc0123d64736f6c63430007060033",
									".code": [
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "tag",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "791B98BC"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "791B98BC"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "8DA5CB5B"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "C31C9C07"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "D21220A7"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "tag",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "89FE6AA"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "DFE1681"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "17D70F7C"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "65237B90"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "tag",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 289,
											"end": 3116,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "tag",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "tag",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "tag",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "tag",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "tag",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "tag",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "tag",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "tag",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "23"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "tag",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "tag",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "tag",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "tag",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "STOP",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "tag",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "tag",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "tag",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "tag",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "33"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "tag",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "34"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "35"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "tag",
											"source": 13,
											"value": "34"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "tag",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "36"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "37"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "tag",
											"source": 13,
											"value": "36"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "38"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "39"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "tag",
											"source": 13,
											"value": "38"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "tag",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "tag",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "42"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "tag",
											"source": 13,
											"value": "42"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "tag",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFF"
										},
										{
											"begin": 509,
											"end": 530,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 509,
											"end": 530,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "tag",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 439,
											"end": 459,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 439,
											"end": 459,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "tag",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 537,
											"end": 559,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 537,
											"end": 559,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "tag",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1032,
											"end": 1037,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1018,
											"end": 1037,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1018,
											"end": 1037,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1018,
											"end": 1028,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 1018,
											"end": 1037,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1018,
											"end": 1037,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1018,
											"end": 1037,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "PUSH",
											"source": 13,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "45"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "46"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "tag",
											"source": 13,
											"value": "45"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "tag",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 1010,
											"end": 1055,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1279,
											"end": 1285,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1293,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1279,
											"end": 1293,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1293,
											"name": "PUSH",
											"source": 13,
											"value": "95EA7B3"
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1302,
											"end": 1317,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1320,
											"end": 1334,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "48"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "49"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "tag",
											"source": 13,
											"value": "48"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "50"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "tag",
											"source": 13,
											"value": "50"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "52"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "tag",
											"source": 13,
											"value": "52"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "53"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "54"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "tag",
											"source": 13,
											"value": "53"
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1279,
											"end": 1335,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1359,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1345,
											"end": 1359,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1359,
											"name": "PUSH",
											"source": 13,
											"value": "95EA7B3"
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1368,
											"end": 1383,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1386,
											"end": 1400,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "49"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "tag",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "56"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "tag",
											"source": 13,
											"value": "56"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "58"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "tag",
											"source": 13,
											"value": "58"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "54"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "tag",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1345,
											"end": 1401,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1482,
											"end": 1483,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1471,
											"end": 1478,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 1471,
											"end": 1478,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1471,
											"end": 1483,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1467,
											"end": 2451,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 1467,
											"end": 2451,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1499,
											"end": 1564,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "PUSH",
											"source": 13,
											"value": "A0"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1666,
											"end": 1673,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 1666,
											"end": 1673,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1706,
											"end": 1723,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1757,
											"end": 1758,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1792,
											"end": 1793,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1825,
											"end": 1840,
											"name": "TIMESTAMP",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1583,
											"end": 1859,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1499,
											"end": 1859,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1499,
											"end": 1859,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1874,
											"end": 1889,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1907,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1874,
											"end": 1907,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1907,
											"name": "PUSH",
											"source": 13,
											"value": "C49CCBE"
										},
										{
											"begin": 1908,
											"end": 1914,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "62"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "tag",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "tag",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "tag",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "66"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "tag",
											"source": 13,
											"value": "66"
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1874,
											"end": 1915,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1982,
											"end": 2044,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2136,
											"end": 2143,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 2136,
											"end": 2143,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2184,
											"end": 2188,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2223,
											"end": 2240,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2274,
											"end": 2291,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2063,
											"end": 2310,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1982,
											"end": 2310,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1982,
											"end": 2310,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2325,
											"end": 2340,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2348,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2325,
											"end": 2348,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2348,
											"name": "PUSH",
											"source": 13,
											"value": "FC6F7865"
										},
										{
											"begin": 2349,
											"end": 2362,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "69"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "tag",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "70"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "tag",
											"source": 13,
											"value": "70"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "72"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "tag",
											"source": 13,
											"value": "72"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "tag",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2325,
											"end": 2363,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2411,
											"end": 2426,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2431,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2411,
											"end": 2431,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2431,
											"name": "PUSH",
											"source": 13,
											"value": "42966C68"
										},
										{
											"begin": 2432,
											"end": 2439,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 2432,
											"end": 2439,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "23"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "tag",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "tag",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "77"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "tag",
											"source": 13,
											"value": "77"
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2440,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1467,
											"end": 2451,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1467,
											"end": 2451,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1467,
											"end": 2451,
											"name": "tag",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 1467,
											"end": 2451,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2490,
											"end": 2546,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "160"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "PUSH",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFF"
										},
										{
											"begin": 2705,
											"end": 2712,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFF"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2741,
											"end": 2750,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "SIGNEXTEND",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2779,
											"end": 2788,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "SIGNEXTEND",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2822,
											"end": 2836,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2870,
											"end": 2884,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2914,
											"end": 2915,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2945,
											"end": 2946,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2983,
											"end": 2987,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3016,
											"end": 3031,
											"name": "TIMESTAMP",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2561,
											"end": 3046,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2490,
											"end": 3046,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2490,
											"end": 3046,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3075,
											"end": 3090,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3095,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3075,
											"end": 3095,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3095,
											"name": "PUSH",
											"source": 13,
											"value": "88316456"
										},
										{
											"begin": 3096,
											"end": 3106,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "78"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "79"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "tag",
											"source": 13,
											"value": "78"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "tag",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "82"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "tag",
											"source": 13,
											"value": "82"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "83"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "tag",
											"source": 13,
											"value": "83"
										},
										{
											"begin": 3075,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3058,
											"end": 3065,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 3058,
											"end": 3065,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 3057,
											"end": 3107,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1065,
											"end": 1066,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 3114,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "tag",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 382,
											"end": 432,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 382,
											"end": 432,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "tag",
											"source": 13,
											"value": "33"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 321,
											"end": 341,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 321,
											"end": 341,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "tag",
											"source": 13,
											"value": "37"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 347,
											"end": 376,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 347,
											"end": 376,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "tag",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 475,
											"end": 495,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 475,
											"end": 495,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 144,
											"name": "tag",
											"source": 14,
											"value": "86"
										},
										{
											"begin": 7,
											"end": 144,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7,
											"end": 144,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 92,
											"end": 98,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 86,
											"end": 99,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 108,
											"end": 138,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "88"
										},
										{
											"begin": 132,
											"end": 137,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 108,
											"end": 138,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "89"
										},
										{
											"begin": 108,
											"end": 138,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 108,
											"end": 138,
											"name": "tag",
											"source": 14,
											"value": "88"
										},
										{
											"begin": 108,
											"end": 138,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 67,
											"end": 144,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 67,
											"end": 144,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 67,
											"end": 144,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 67,
											"end": 144,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 67,
											"end": 144,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 150,
											"end": 285,
											"name": "tag",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 150,
											"end": 285,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 150,
											"end": 285,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 238,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 219,
											"end": 239,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 210,
											"end": 239,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 210,
											"end": 239,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 248,
											"end": 279,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "92"
										},
										{
											"begin": 273,
											"end": 278,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 248,
											"end": 279,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "93"
										},
										{
											"begin": 248,
											"end": 279,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 248,
											"end": 279,
											"name": "tag",
											"source": 14,
											"value": "92"
										},
										{
											"begin": 248,
											"end": 279,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 200,
											"end": 285,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 200,
											"end": 285,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 200,
											"end": 285,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 200,
											"end": 285,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 200,
											"end": 285,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 291,
											"end": 434,
											"name": "tag",
											"source": 14,
											"value": "94"
										},
										{
											"begin": 291,
											"end": 434,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 291,
											"end": 434,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 379,
											"end": 385,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 373,
											"end": 386,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 364,
											"end": 386,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 364,
											"end": 386,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 395,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "96"
										},
										{
											"begin": 422,
											"end": 427,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 395,
											"end": 428,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "97"
										},
										{
											"begin": 395,
											"end": 428,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 395,
											"end": 428,
											"name": "tag",
											"source": 14,
											"value": "96"
										},
										{
											"begin": 395,
											"end": 428,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 354,
											"end": 434,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 354,
											"end": 434,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 354,
											"end": 434,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 354,
											"end": 434,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 354,
											"end": 434,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 440,
											"end": 579,
											"name": "tag",
											"source": 14,
											"value": "98"
										},
										{
											"begin": 440,
											"end": 579,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 440,
											"end": 579,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 524,
											"end": 530,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 511,
											"end": 531,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 502,
											"end": 531,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 502,
											"end": 531,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 540,
											"end": 573,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 567,
											"end": 572,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 540,
											"end": 573,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "101"
										},
										{
											"begin": 540,
											"end": 573,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 540,
											"end": 573,
											"name": "tag",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 540,
											"end": 573,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 492,
											"end": 579,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 492,
											"end": 579,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 492,
											"end": 579,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 492,
											"end": 579,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 492,
											"end": 579,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 585,
											"end": 728,
											"name": "tag",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 585,
											"end": 728,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 585,
											"end": 728,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 673,
											"end": 679,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 667,
											"end": 680,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 658,
											"end": 680,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 658,
											"end": 680,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 689,
											"end": 722,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "104"
										},
										{
											"begin": 716,
											"end": 721,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 689,
											"end": 722,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "101"
										},
										{
											"begin": 689,
											"end": 722,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 689,
											"end": 722,
											"name": "tag",
											"source": 14,
											"value": "104"
										},
										{
											"begin": 689,
											"end": 722,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 648,
											"end": 728,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 648,
											"end": 728,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 648,
											"end": 728,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 648,
											"end": 728,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 648,
											"end": 728,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 734,
											"end": 1012,
											"name": "tag",
											"source": 14,
											"value": "54"
										},
										{
											"begin": 734,
											"end": 1012,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 734,
											"end": 1012,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 850,
											"end": 852,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 838,
											"end": 847,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 829,
											"end": 836,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 825,
											"end": 848,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 821,
											"end": 853,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 818,
											"end": 820,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 818,
											"end": 820,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "106"
										},
										{
											"begin": 818,
											"end": 820,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 866,
											"end": 867,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 863,
											"end": 864,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 856,
											"end": 868,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 818,
											"end": 820,
											"name": "tag",
											"source": 14,
											"value": "106"
										},
										{
											"begin": 818,
											"end": 820,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 909,
											"end": 910,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 934,
											"end": 995,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "107"
										},
										{
											"begin": 987,
											"end": 994,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 978,
											"end": 984,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 967,
											"end": 976,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 963,
											"end": 985,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 934,
											"end": 995,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "86"
										},
										{
											"begin": 934,
											"end": 995,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 934,
											"end": 995,
											"name": "tag",
											"source": 14,
											"value": "107"
										},
										{
											"begin": 934,
											"end": 995,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 924,
											"end": 995,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 924,
											"end": 995,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 880,
											"end": 1005,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 808,
											"end": 1012,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 808,
											"end": 1012,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 808,
											"end": 1012,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 808,
											"end": 1012,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 808,
											"end": 1012,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1018,
											"end": 1771,
											"name": "tag",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 1018,
											"end": 1771,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1018,
											"end": 1771,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 1771,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1018,
											"end": 1771,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 1771,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1188,
											"end": 1191,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 1176,
											"end": 1185,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1167,
											"end": 1174,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 1163,
											"end": 1186,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1159,
											"end": 1192,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1156,
											"end": 1158,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1156,
											"end": 1158,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "109"
										},
										{
											"begin": 1156,
											"end": 1158,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1205,
											"end": 1206,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1202,
											"end": 1203,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1195,
											"end": 1207,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1156,
											"end": 1158,
											"name": "tag",
											"source": 14,
											"value": "109"
										},
										{
											"begin": 1156,
											"end": 1158,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1248,
											"end": 1249,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1337,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "110"
										},
										{
											"begin": 1329,
											"end": 1336,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 1320,
											"end": 1326,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1309,
											"end": 1318,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 1305,
											"end": 1327,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1273,
											"end": 1337,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 1273,
											"end": 1337,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1273,
											"end": 1337,
											"name": "tag",
											"source": 14,
											"value": "110"
										},
										{
											"begin": 1273,
											"end": 1337,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1263,
											"end": 1337,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1263,
											"end": 1337,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1219,
											"end": 1347,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1386,
											"end": 1388,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "111"
										},
										{
											"begin": 1468,
											"end": 1475,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 1459,
											"end": 1465,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1448,
											"end": 1457,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 1444,
											"end": 1466,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1412,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "94"
										},
										{
											"begin": 1412,
											"end": 1476,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1412,
											"end": 1476,
											"name": "tag",
											"source": 14,
											"value": "111"
										},
										{
											"begin": 1412,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1402,
											"end": 1476,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1402,
											"end": 1476,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1357,
											"end": 1486,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1525,
											"end": 1527,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1551,
											"end": 1615,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "112"
										},
										{
											"begin": 1607,
											"end": 1614,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 1598,
											"end": 1604,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1587,
											"end": 1596,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 1583,
											"end": 1605,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1551,
											"end": 1615,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 1551,
											"end": 1615,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1551,
											"end": 1615,
											"name": "tag",
											"source": 14,
											"value": "112"
										},
										{
											"begin": 1551,
											"end": 1615,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1541,
											"end": 1615,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1541,
											"end": 1615,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1496,
											"end": 1625,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1664,
											"end": 1666,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 1690,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "113"
										},
										{
											"begin": 1746,
											"end": 1753,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 1737,
											"end": 1743,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1726,
											"end": 1735,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 1722,
											"end": 1744,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1690,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 1690,
											"end": 1754,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1690,
											"end": 1754,
											"name": "tag",
											"source": 14,
											"value": "113"
										},
										{
											"begin": 1690,
											"end": 1754,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1680,
											"end": 1754,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1680,
											"end": 1754,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1635,
											"end": 1764,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1146,
											"end": 1771,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1146,
											"end": 1771,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 1146,
											"end": 1771,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1146,
											"end": 1771,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1146,
											"end": 1771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1146,
											"end": 1771,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1146,
											"end": 1771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1146,
											"end": 1771,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1777,
											"end": 2217,
											"name": "tag",
											"source": 14,
											"value": "67"
										},
										{
											"begin": 1777,
											"end": 2217,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1777,
											"end": 2217,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1777,
											"end": 2217,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1913,
											"end": 1915,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1910,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1892,
											"end": 1899,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1888,
											"end": 1911,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1884,
											"end": 1916,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1881,
											"end": 1883,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1881,
											"end": 1883,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "115"
										},
										{
											"begin": 1881,
											"end": 1883,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1929,
											"end": 1930,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1926,
											"end": 1927,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1919,
											"end": 1931,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1881,
											"end": 1883,
											"name": "tag",
											"source": 14,
											"value": "115"
										},
										{
											"begin": 1881,
											"end": 1883,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1972,
											"end": 1973,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1997,
											"end": 2061,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "116"
										},
										{
											"begin": 2053,
											"end": 2060,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2044,
											"end": 2050,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2033,
											"end": 2042,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 2029,
											"end": 2051,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1997,
											"end": 2061,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 1997,
											"end": 2061,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1997,
											"end": 2061,
											"name": "tag",
											"source": 14,
											"value": "116"
										},
										{
											"begin": 1997,
											"end": 2061,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1987,
											"end": 2061,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1987,
											"end": 2061,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1943,
											"end": 2071,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2110,
											"end": 2112,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2136,
											"end": 2200,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "117"
										},
										{
											"begin": 2192,
											"end": 2199,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2183,
											"end": 2189,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2172,
											"end": 2181,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 2168,
											"end": 2190,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2136,
											"end": 2200,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 2136,
											"end": 2200,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2136,
											"end": 2200,
											"name": "tag",
											"source": 14,
											"value": "117"
										},
										{
											"begin": 2136,
											"end": 2200,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2126,
											"end": 2200,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2126,
											"end": 2200,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2081,
											"end": 2210,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1871,
											"end": 2217,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1871,
											"end": 2217,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1871,
											"end": 2217,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1871,
											"end": 2217,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1871,
											"end": 2217,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1871,
											"end": 2217,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2223,
											"end": 2913,
											"name": "tag",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 2223,
											"end": 2913,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2223,
											"end": 2913,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2913,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2223,
											"end": 2913,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2223,
											"end": 2913,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2378,
											"end": 2381,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 2366,
											"end": 2375,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2357,
											"end": 2364,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 2353,
											"end": 2376,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2349,
											"end": 2382,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2346,
											"end": 2348,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2346,
											"end": 2348,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "119"
										},
										{
											"begin": 2346,
											"end": 2348,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2395,
											"end": 2396,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2392,
											"end": 2393,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2385,
											"end": 2397,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2346,
											"end": 2348,
											"name": "tag",
											"source": 14,
											"value": "119"
										},
										{
											"begin": 2346,
											"end": 2348,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2438,
											"end": 2439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2463,
											"end": 2516,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 2508,
											"end": 2515,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 2499,
											"end": 2505,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2488,
											"end": 2497,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 2484,
											"end": 2506,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2463,
											"end": 2516,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "98"
										},
										{
											"begin": 2463,
											"end": 2516,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2463,
											"end": 2516,
											"name": "tag",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 2463,
											"end": 2516,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2453,
											"end": 2516,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 2453,
											"end": 2516,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2409,
											"end": 2526,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2565,
											"end": 2567,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2591,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "121"
										},
										{
											"begin": 2636,
											"end": 2643,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 2627,
											"end": 2633,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2616,
											"end": 2625,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 2612,
											"end": 2634,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2591,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "98"
										},
										{
											"begin": 2591,
											"end": 2644,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2591,
											"end": 2644,
											"name": "tag",
											"source": 14,
											"value": "121"
										},
										{
											"begin": 2591,
											"end": 2644,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2581,
											"end": 2644,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2581,
											"end": 2644,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2536,
											"end": 2654,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2693,
											"end": 2695,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2719,
											"end": 2770,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 2762,
											"end": 2769,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 2753,
											"end": 2759,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2742,
											"end": 2751,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 2738,
											"end": 2760,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2719,
											"end": 2770,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 2719,
											"end": 2770,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2719,
											"end": 2770,
											"name": "tag",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 2719,
											"end": 2770,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2709,
											"end": 2770,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2709,
											"end": 2770,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2664,
											"end": 2780,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2819,
											"end": 2821,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 2845,
											"end": 2896,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "123"
										},
										{
											"begin": 2888,
											"end": 2895,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 2879,
											"end": 2885,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2868,
											"end": 2877,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 2864,
											"end": 2886,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2845,
											"end": 2896,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 2845,
											"end": 2896,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2845,
											"end": 2896,
											"name": "tag",
											"source": 14,
											"value": "123"
										},
										{
											"begin": 2845,
											"end": 2896,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2835,
											"end": 2896,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2835,
											"end": 2896,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2790,
											"end": 2906,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2336,
											"end": 2913,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2336,
											"end": 2913,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 2336,
											"end": 2913,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2336,
											"end": 2913,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 2336,
											"end": 2913,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2336,
											"end": 2913,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2336,
											"end": 2913,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2336,
											"end": 2913,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2919,
											"end": 3027,
											"name": "tag",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 2919,
											"end": 3027,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2996,
											"end": 3020,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "126"
										},
										{
											"begin": 3014,
											"end": 3019,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2996,
											"end": 3020,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "127"
										},
										{
											"begin": 2996,
											"end": 3020,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2996,
											"end": 3020,
											"name": "tag",
											"source": 14,
											"value": "126"
										},
										{
											"begin": 2996,
											"end": 3020,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2991,
											"end": 2994,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2984,
											"end": 3021,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2974,
											"end": 3027,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2974,
											"end": 3027,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2974,
											"end": 3027,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3033,
											"end": 3151,
											"name": "tag",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 3033,
											"end": 3151,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3120,
											"end": 3144,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "130"
										},
										{
											"begin": 3138,
											"end": 3143,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3120,
											"end": 3144,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "127"
										},
										{
											"begin": 3120,
											"end": 3144,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3120,
											"end": 3144,
											"name": "tag",
											"source": 14,
											"value": "130"
										},
										{
											"begin": 3120,
											"end": 3144,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3115,
											"end": 3118,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3108,
											"end": 3145,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3098,
											"end": 3151,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3098,
											"end": 3151,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3098,
											"end": 3151,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3157,
											"end": 3314,
											"name": "tag",
											"source": 14,
											"value": "131"
										},
										{
											"begin": 3157,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3257,
											"end": 3307,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "133"
										},
										{
											"begin": 3301,
											"end": 3306,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3257,
											"end": 3307,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "134"
										},
										{
											"begin": 3257,
											"end": 3307,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3257,
											"end": 3307,
											"name": "tag",
											"source": 14,
											"value": "133"
										},
										{
											"begin": 3257,
											"end": 3307,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3252,
											"end": 3255,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3245,
											"end": 3308,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3235,
											"end": 3314,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3235,
											"end": 3314,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3235,
											"end": 3314,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3320,
											"end": 3521,
											"name": "tag",
											"source": 14,
											"value": "135"
										},
										{
											"begin": 3320,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3442,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "137"
										},
										{
											"begin": 3508,
											"end": 3513,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3442,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "138"
										},
										{
											"begin": 3442,
											"end": 3514,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3442,
											"end": 3514,
											"name": "tag",
											"source": 14,
											"value": "137"
										},
										{
											"begin": 3442,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3437,
											"end": 3440,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3430,
											"end": 3515,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3420,
											"end": 3521,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3420,
											"end": 3521,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3420,
											"end": 3521,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3527,
											"end": 3696,
											"name": "tag",
											"source": 14,
											"value": "139"
										},
										{
											"begin": 3527,
											"end": 3696,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3633,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 3683,
											"end": 3688,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3633,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 3633,
											"end": 3689,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3633,
											"end": 3689,
											"name": "tag",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 3633,
											"end": 3689,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3628,
											"end": 3631,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3621,
											"end": 3690,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3611,
											"end": 3696,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3611,
											"end": 3696,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3611,
											"end": 3696,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3702,
											"end": 3804,
											"name": "tag",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 3702,
											"end": 3804,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3775,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 3791,
											"end": 3796,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3775,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 3775,
											"end": 3797,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3775,
											"end": 3797,
											"name": "tag",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 3775,
											"end": 3797,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3770,
											"end": 3773,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3763,
											"end": 3798,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3753,
											"end": 3804,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3753,
											"end": 3804,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3753,
											"end": 3804,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3810,
											"end": 4121,
											"name": "tag",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 3810,
											"end": 4121,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3810,
											"end": 4121,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3973,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 4037,
											"end": 4039,
											"name": "PUSH",
											"source": 14,
											"value": "D"
										},
										{
											"begin": 4032,
											"end": 4035,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3973,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 3973,
											"end": 4040,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3973,
											"end": 4040,
											"name": "tag",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 3973,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3966,
											"end": 4040,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3966,
											"end": 4040,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4070,
											"end": 4085,
											"name": "PUSH",
											"source": 14,
											"value": "4E6F7420746865206F776E657200000000000000000000000000000000000000"
										},
										{
											"begin": 4066,
											"end": 4067,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4061,
											"end": 4064,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4057,
											"end": 4068,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4050,
											"end": 4086,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4112,
											"end": 4114,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4107,
											"end": 4110,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4103,
											"end": 4115,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4096,
											"end": 4115,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4096,
											"end": 4115,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3956,
											"end": 4121,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3956,
											"end": 4121,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3956,
											"end": 4121,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3956,
											"end": 4121,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4235,
											"end": 5120,
											"name": "tag",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 4235,
											"end": 5120,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4392,
											"end": 4396,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 4387,
											"end": 4390,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4383,
											"end": 4397,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4482,
											"end": 4486,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4475,
											"end": 4480,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4471,
											"end": 4487,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4465,
											"end": 4488,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4501,
											"end": 4564,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 4558,
											"end": 4562,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4553,
											"end": 4556,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4549,
											"end": 4563,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4535,
											"end": 4547,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4501,
											"end": 4564,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 4501,
											"end": 4564,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4501,
											"end": 4564,
											"name": "tag",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 4501,
											"end": 4564,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4407,
											"end": 4574,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4661,
											"end": 4665,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4654,
											"end": 4659,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4650,
											"end": 4666,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4644,
											"end": 4667,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4680,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 4737,
											"end": 4741,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4732,
											"end": 4735,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4728,
											"end": 4742,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4714,
											"end": 4726,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4680,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 4680,
											"end": 4743,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4680,
											"end": 4743,
											"name": "tag",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 4680,
											"end": 4743,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4584,
											"end": 4753,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4841,
											"end": 4845,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4834,
											"end": 4839,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4830,
											"end": 4846,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4824,
											"end": 4847,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4860,
											"end": 4923,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "156"
										},
										{
											"begin": 4917,
											"end": 4921,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4912,
											"end": 4915,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4908,
											"end": 4922,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4894,
											"end": 4906,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4860,
											"end": 4923,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 4860,
											"end": 4923,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4860,
											"end": 4923,
											"name": "tag",
											"source": 14,
											"value": "156"
										},
										{
											"begin": 4860,
											"end": 4923,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4763,
											"end": 4933,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5021,
											"end": 5025,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5014,
											"end": 5019,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5010,
											"end": 5026,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5004,
											"end": 5027,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5040,
											"end": 5103,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 5097,
											"end": 5101,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5092,
											"end": 5095,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5088,
											"end": 5102,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5074,
											"end": 5086,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5040,
											"end": 5103,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 5040,
											"end": 5103,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5040,
											"end": 5103,
											"name": "tag",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 5040,
											"end": 5103,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4943,
											"end": 5113,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4361,
											"end": 5120,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4361,
											"end": 5120,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4361,
											"end": 5120,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4361,
											"end": 5120,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 5254,
											"end": 6337,
											"name": "tag",
											"source": 14,
											"value": "159"
										},
										{
											"begin": 5254,
											"end": 6337,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5431,
											"end": 5435,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 5426,
											"end": 5429,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5422,
											"end": 5436,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5521,
											"end": 5525,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5514,
											"end": 5519,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5510,
											"end": 5526,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5504,
											"end": 5527,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5540,
											"end": 5603,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 5597,
											"end": 5601,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5592,
											"end": 5595,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5588,
											"end": 5602,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5574,
											"end": 5586,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5540,
											"end": 5603,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 5540,
											"end": 5603,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5540,
											"end": 5603,
											"name": "tag",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 5540,
											"end": 5603,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5446,
											"end": 5613,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5700,
											"end": 5704,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5693,
											"end": 5698,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5689,
											"end": 5705,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5683,
											"end": 5706,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5719,
											"end": 5782,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 5776,
											"end": 5780,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5771,
											"end": 5774,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5767,
											"end": 5781,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5753,
											"end": 5765,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5719,
											"end": 5782,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 5719,
											"end": 5782,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5719,
											"end": 5782,
											"name": "tag",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 5719,
											"end": 5782,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5623,
											"end": 5792,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5880,
											"end": 5884,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5878,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5869,
											"end": 5885,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5863,
											"end": 5886,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5899,
											"end": 5962,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 5956,
											"end": 5960,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5951,
											"end": 5954,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5947,
											"end": 5961,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5933,
											"end": 5945,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5899,
											"end": 5962,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 5899,
											"end": 5962,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5899,
											"end": 5962,
											"name": "tag",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 5899,
											"end": 5962,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5802,
											"end": 5972,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6060,
											"end": 6064,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6053,
											"end": 6058,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6049,
											"end": 6065,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6043,
											"end": 6066,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6079,
											"end": 6142,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 6136,
											"end": 6140,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6131,
											"end": 6134,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6127,
											"end": 6141,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6113,
											"end": 6125,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6079,
											"end": 6142,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 6079,
											"end": 6142,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6079,
											"end": 6142,
											"name": "tag",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 6079,
											"end": 6142,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5982,
											"end": 6152,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6238,
											"end": 6242,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 6231,
											"end": 6236,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6227,
											"end": 6243,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6221,
											"end": 6244,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6257,
											"end": 6320,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 6314,
											"end": 6318,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 6309,
											"end": 6312,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6305,
											"end": 6319,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6291,
											"end": 6303,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6257,
											"end": 6320,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 6257,
											"end": 6320,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6257,
											"end": 6320,
											"name": "tag",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 6257,
											"end": 6320,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6162,
											"end": 6330,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5400,
											"end": 6337,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5400,
											"end": 6337,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5400,
											"end": 6337,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5400,
											"end": 6337,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 6445,
											"end": 8580,
											"name": "tag",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 6445,
											"end": 8580,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6596,
											"end": 6602,
											"name": "PUSH",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 6591,
											"end": 6594,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6587,
											"end": 6603,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6687,
											"end": 6691,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6680,
											"end": 6685,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6676,
											"end": 6692,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6670,
											"end": 6693,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6706,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 6763,
											"end": 6767,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6758,
											"end": 6761,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6754,
											"end": 6768,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6740,
											"end": 6752,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6706,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 6706,
											"end": 6769,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6706,
											"end": 6769,
											"name": "tag",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 6706,
											"end": 6769,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6613,
											"end": 6779,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6863,
											"end": 6867,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6856,
											"end": 6861,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6852,
											"end": 6868,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6846,
											"end": 6869,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6882,
											"end": 6945,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 6939,
											"end": 6943,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6934,
											"end": 6937,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6930,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6916,
											"end": 6928,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6882,
											"end": 6945,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 6882,
											"end": 6945,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6882,
											"end": 6945,
											"name": "tag",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 6882,
											"end": 6945,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6789,
											"end": 6955,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7036,
											"end": 7040,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7029,
											"end": 7034,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7025,
											"end": 7041,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7042,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7055,
											"end": 7116,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 7110,
											"end": 7114,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7105,
											"end": 7108,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7101,
											"end": 7115,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7087,
											"end": 7099,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7055,
											"end": 7116,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "171"
										},
										{
											"begin": 7055,
											"end": 7116,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7055,
											"end": 7116,
											"name": "tag",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 7055,
											"end": 7116,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6965,
											"end": 7126,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7213,
											"end": 7217,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 7206,
											"end": 7211,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7202,
											"end": 7218,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7196,
											"end": 7219,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7232,
											"end": 7291,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 7285,
											"end": 7289,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 7280,
											"end": 7283,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7276,
											"end": 7290,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7262,
											"end": 7274,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7232,
											"end": 7291,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 7232,
											"end": 7291,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7232,
											"end": 7291,
											"name": "tag",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 7232,
											"end": 7291,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7136,
											"end": 7301,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7388,
											"end": 7392,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 7381,
											"end": 7386,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7377,
											"end": 7393,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7371,
											"end": 7394,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7407,
											"end": 7466,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 7460,
											"end": 7464,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 7455,
											"end": 7458,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7451,
											"end": 7465,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7437,
											"end": 7449,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7407,
											"end": 7466,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 7407,
											"end": 7466,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7407,
											"end": 7466,
											"name": "tag",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 7407,
											"end": 7466,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7311,
											"end": 7476,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7568,
											"end": 7572,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 7561,
											"end": 7566,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7557,
											"end": 7573,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7551,
											"end": 7574,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7587,
											"end": 7650,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "174"
										},
										{
											"begin": 7644,
											"end": 7648,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 7639,
											"end": 7642,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7635,
											"end": 7649,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7621,
											"end": 7633,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7587,
											"end": 7650,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 7587,
											"end": 7650,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7587,
											"end": 7650,
											"name": "tag",
											"source": 14,
											"value": "174"
										},
										{
											"begin": 7587,
											"end": 7650,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7486,
											"end": 7660,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7752,
											"end": 7756,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 7745,
											"end": 7750,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7741,
											"end": 7757,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7735,
											"end": 7758,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7771,
											"end": 7834,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "175"
										},
										{
											"begin": 7828,
											"end": 7832,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 7823,
											"end": 7826,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7819,
											"end": 7833,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7805,
											"end": 7817,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7771,
											"end": 7834,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 7771,
											"end": 7834,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7771,
											"end": 7834,
											"name": "tag",
											"source": 14,
											"value": "175"
										},
										{
											"begin": 7771,
											"end": 7834,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7670,
											"end": 7844,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7932,
											"end": 7936,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 7925,
											"end": 7930,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7921,
											"end": 7937,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7915,
											"end": 7938,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7951,
											"end": 8014,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "176"
										},
										{
											"begin": 8008,
											"end": 8012,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 8003,
											"end": 8006,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7999,
											"end": 8013,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7985,
											"end": 7997,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7951,
											"end": 8014,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 7951,
											"end": 8014,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7951,
											"end": 8014,
											"name": "tag",
											"source": 14,
											"value": "176"
										},
										{
											"begin": 7951,
											"end": 8014,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7854,
											"end": 8024,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8112,
											"end": 8118,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 8105,
											"end": 8110,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8101,
											"end": 8119,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8095,
											"end": 8120,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 8133,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 8190,
											"end": 8196,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 8185,
											"end": 8188,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8167,
											"end": 8179,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8133,
											"end": 8198,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 8133,
											"end": 8198,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8133,
											"end": 8198,
											"name": "tag",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 8133,
											"end": 8198,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8034,
											"end": 8208,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8295,
											"end": 8301,
											"name": "PUSH",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 8288,
											"end": 8293,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8284,
											"end": 8302,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8278,
											"end": 8303,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 8316,
											"end": 8381,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "178"
										},
										{
											"begin": 8373,
											"end": 8379,
											"name": "PUSH",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 8368,
											"end": 8371,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 8364,
											"end": 8380,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8350,
											"end": 8362,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8316,
											"end": 8381,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 8316,
											"end": 8381,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8316,
											"end": 8381,
											"name": "tag",
											"source": 14,
											"value": "178"
										},
										{
											"begin": 8316,
											"end": 8381,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8218,
											"end": 8391,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8477,
											"end": 8483,
											"name": "PUSH",
											"source": 14,
											"value": "140"
										},
										{
											"begin": 8470,
											"end": 8475,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8466,
											"end": 8484,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8460,
											"end": 8485,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 8498,
											"end": 8563,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "179"
										},
										{
											"begin": 8555,
											"end": 8561,
											"name": "PUSH",
											"source": 14,
											"value": "140"
										},
										{
											"begin": 8550,
											"end": 8553,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 8546,
											"end": 8562,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8532,
											"end": 8544,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8498,
											"end": 8563,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 8498,
											"end": 8563,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8498,
											"end": 8563,
											"name": "tag",
											"source": 14,
											"value": "179"
										},
										{
											"begin": 8498,
											"end": 8563,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8401,
											"end": 8573,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6565,
											"end": 8580,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6565,
											"end": 8580,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6565,
											"end": 8580,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6565,
											"end": 8580,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8586,
											"end": 8694,
											"name": "tag",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 8586,
											"end": 8694,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8663,
											"end": 8687,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 8681,
											"end": 8686,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8663,
											"end": 8687,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "182"
										},
										{
											"begin": 8663,
											"end": 8687,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8663,
											"end": 8687,
											"name": "tag",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 8663,
											"end": 8687,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8658,
											"end": 8661,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8651,
											"end": 8688,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8641,
											"end": 8694,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8641,
											"end": 8694,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8641,
											"end": 8694,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8700,
											"end": 8805,
											"name": "tag",
											"source": 14,
											"value": "171"
										},
										{
											"begin": 8700,
											"end": 8805,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8775,
											"end": 8798,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "184"
										},
										{
											"begin": 8792,
											"end": 8797,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8775,
											"end": 8798,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 8775,
											"end": 8798,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8775,
											"end": 8798,
											"name": "tag",
											"source": 14,
											"value": "184"
										},
										{
											"begin": 8775,
											"end": 8798,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8770,
											"end": 8773,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8763,
											"end": 8799,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8753,
											"end": 8805,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8753,
											"end": 8805,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8753,
											"end": 8805,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8811,
											"end": 8926,
											"name": "tag",
											"source": 14,
											"value": "186"
										},
										{
											"begin": 8811,
											"end": 8926,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8919,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 8913,
											"end": 8918,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8919,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 8896,
											"end": 8919,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8896,
											"end": 8919,
											"name": "tag",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 8896,
											"end": 8919,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8891,
											"end": 8894,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8884,
											"end": 8920,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8874,
											"end": 8926,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8874,
											"end": 8926,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8874,
											"end": 8926,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8932,
											"end": 9040,
											"name": "tag",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 8932,
											"end": 9040,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9009,
											"end": 9033,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 9027,
											"end": 9032,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9009,
											"end": 9033,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "191"
										},
										{
											"begin": 9009,
											"end": 9033,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9009,
											"end": 9033,
											"name": "tag",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 9009,
											"end": 9033,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9004,
											"end": 9007,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8997,
											"end": 9034,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8987,
											"end": 9040,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8987,
											"end": 9040,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8987,
											"end": 9040,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9046,
											"end": 9164,
											"name": "tag",
											"source": 14,
											"value": "192"
										},
										{
											"begin": 9046,
											"end": 9164,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9133,
											"end": 9157,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 9151,
											"end": 9156,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9133,
											"end": 9157,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "191"
										},
										{
											"begin": 9133,
											"end": 9157,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9133,
											"end": 9157,
											"name": "tag",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 9133,
											"end": 9157,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9128,
											"end": 9131,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9121,
											"end": 9158,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9111,
											"end": 9164,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9111,
											"end": 9164,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9111,
											"end": 9164,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9170,
											"end": 9392,
											"name": "tag",
											"source": 14,
											"value": "35"
										},
										{
											"begin": 9170,
											"end": 9392,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9170,
											"end": 9392,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9301,
											"end": 9303,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9290,
											"end": 9299,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9286,
											"end": 9304,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9278,
											"end": 9304,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9278,
											"end": 9304,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9314,
											"end": 9385,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "196"
										},
										{
											"begin": 9382,
											"end": 9383,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9371,
											"end": 9380,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9367,
											"end": 9384,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9358,
											"end": 9364,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 9314,
											"end": 9385,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 9314,
											"end": 9385,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9314,
											"end": 9385,
											"name": "tag",
											"source": 14,
											"value": "196"
										},
										{
											"begin": 9314,
											"end": 9385,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9268,
											"end": 9392,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 9268,
											"end": 9392,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9268,
											"end": 9392,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9268,
											"end": 9392,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9268,
											"end": 9392,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9398,
											"end": 9730,
											"name": "tag",
											"source": 14,
											"value": "49"
										},
										{
											"begin": 9398,
											"end": 9730,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9398,
											"end": 9730,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9557,
											"end": 9559,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9546,
											"end": 9555,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9542,
											"end": 9560,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9560,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9560,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9570,
											"end": 9641,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "198"
										},
										{
											"begin": 9638,
											"end": 9639,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9627,
											"end": 9636,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9623,
											"end": 9640,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9614,
											"end": 9620,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 9570,
											"end": 9641,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 9570,
											"end": 9641,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9570,
											"end": 9641,
											"name": "tag",
											"source": 14,
											"value": "198"
										},
										{
											"begin": 9570,
											"end": 9641,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9651,
											"end": 9723,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "199"
										},
										{
											"begin": 9719,
											"end": 9721,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9708,
											"end": 9717,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9704,
											"end": 9722,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9695,
											"end": 9701,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 9651,
											"end": 9723,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "192"
										},
										{
											"begin": 9651,
											"end": 9723,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9651,
											"end": 9723,
											"name": "tag",
											"source": 14,
											"value": "199"
										},
										{
											"begin": 9651,
											"end": 9723,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9524,
											"end": 9730,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 9524,
											"end": 9730,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 9524,
											"end": 9730,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9524,
											"end": 9730,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9524,
											"end": 9730,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9524,
											"end": 9730,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9736,
											"end": 9984,
											"name": "tag",
											"source": 14,
											"value": "19"
										},
										{
											"begin": 9736,
											"end": 9984,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9984,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9880,
											"end": 9882,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9869,
											"end": 9878,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9865,
											"end": 9883,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9857,
											"end": 9883,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9857,
											"end": 9883,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9893,
											"end": 9977,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "201"
										},
										{
											"begin": 9974,
											"end": 9975,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9963,
											"end": 9972,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9959,
											"end": 9976,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9950,
											"end": 9956,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 9893,
											"end": 9977,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "131"
										},
										{
											"begin": 9893,
											"end": 9977,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9893,
											"end": 9977,
											"name": "tag",
											"source": 14,
											"value": "201"
										},
										{
											"begin": 9893,
											"end": 9977,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9847,
											"end": 9984,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 9847,
											"end": 9984,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9847,
											"end": 9984,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9847,
											"end": 9984,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9847,
											"end": 9984,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9990,
											"end": 10282,
											"name": "tag",
											"source": 14,
											"value": "31"
										},
										{
											"begin": 9990,
											"end": 10282,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9990,
											"end": 10282,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10156,
											"end": 10158,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10145,
											"end": 10154,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10141,
											"end": 10159,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10133,
											"end": 10159,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10133,
											"end": 10159,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10169,
											"end": 10275,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "203"
										},
										{
											"begin": 10272,
											"end": 10273,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10261,
											"end": 10270,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10257,
											"end": 10274,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10248,
											"end": 10254,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 10169,
											"end": 10275,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "135"
										},
										{
											"begin": 10169,
											"end": 10275,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10169,
											"end": 10275,
											"name": "tag",
											"source": 14,
											"value": "203"
										},
										{
											"begin": 10169,
											"end": 10275,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10123,
											"end": 10282,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 10123,
											"end": 10282,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10123,
											"end": 10282,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10123,
											"end": 10282,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10123,
											"end": 10282,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10288,
											"end": 10548,
											"name": "tag",
											"source": 14,
											"value": "39"
										},
										{
											"begin": 10288,
											"end": 10548,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10288,
											"end": 10548,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10438,
											"end": 10440,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10427,
											"end": 10436,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10423,
											"end": 10441,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10415,
											"end": 10441,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10415,
											"end": 10441,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10451,
											"end": 10541,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "205"
										},
										{
											"begin": 10538,
											"end": 10539,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10527,
											"end": 10536,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10523,
											"end": 10540,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10514,
											"end": 10520,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 10451,
											"end": 10541,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "139"
										},
										{
											"begin": 10451,
											"end": 10541,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10451,
											"end": 10541,
											"name": "tag",
											"source": 14,
											"value": "205"
										},
										{
											"begin": 10451,
											"end": 10541,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10405,
											"end": 10548,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 10405,
											"end": 10548,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10405,
											"end": 10548,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10405,
											"end": 10548,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10405,
											"end": 10548,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10554,
											"end": 10973,
											"name": "tag",
											"source": 14,
											"value": "46"
										},
										{
											"begin": 10554,
											"end": 10973,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10554,
											"end": 10973,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10758,
											"end": 10760,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10747,
											"end": 10756,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10743,
											"end": 10761,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10735,
											"end": 10761,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10735,
											"end": 10761,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10807,
											"end": 10816,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10801,
											"end": 10805,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 10793,
											"end": 10794,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10782,
											"end": 10791,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10778,
											"end": 10795,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10771,
											"end": 10818,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10835,
											"end": 10966,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "207"
										},
										{
											"begin": 10961,
											"end": 10965,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10835,
											"end": 10966,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 10835,
											"end": 10966,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10835,
											"end": 10966,
											"name": "tag",
											"source": 14,
											"value": "207"
										},
										{
											"begin": 10835,
											"end": 10966,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10827,
											"end": 10966,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10827,
											"end": 10966,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10725,
											"end": 10973,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10725,
											"end": 10973,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10725,
											"end": 10973,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10725,
											"end": 10973,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10979,
											"end": 11322,
											"name": "tag",
											"source": 14,
											"value": "69"
										},
										{
											"begin": 10979,
											"end": 11322,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10979,
											"end": 11322,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11170,
											"end": 11173,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 11159,
											"end": 11168,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11155,
											"end": 11174,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11147,
											"end": 11174,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11147,
											"end": 11174,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11184,
											"end": 11315,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "209"
										},
										{
											"begin": 11312,
											"end": 11313,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11301,
											"end": 11310,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11297,
											"end": 11314,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11288,
											"end": 11294,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11184,
											"end": 11315,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 11184,
											"end": 11315,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11184,
											"end": 11315,
											"name": "tag",
											"source": 14,
											"value": "209"
										},
										{
											"begin": 11184,
											"end": 11315,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11137,
											"end": 11322,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 11137,
											"end": 11322,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11137,
											"end": 11322,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11137,
											"end": 11322,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11137,
											"end": 11322,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11328,
											"end": 11711,
											"name": "tag",
											"source": 14,
											"value": "62"
										},
										{
											"begin": 11328,
											"end": 11711,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11328,
											"end": 11711,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11539,
											"end": 11542,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 11528,
											"end": 11537,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11524,
											"end": 11543,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11516,
											"end": 11543,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11516,
											"end": 11543,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11553,
											"end": 11704,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "211"
										},
										{
											"begin": 11701,
											"end": 11702,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11690,
											"end": 11699,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11686,
											"end": 11703,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11677,
											"end": 11683,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11553,
											"end": 11704,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "159"
										},
										{
											"begin": 11553,
											"end": 11704,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11553,
											"end": 11704,
											"name": "tag",
											"source": 14,
											"value": "211"
										},
										{
											"begin": 11553,
											"end": 11704,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11506,
											"end": 11711,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 11506,
											"end": 11711,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11506,
											"end": 11711,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11506,
											"end": 11711,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11506,
											"end": 11711,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11717,
											"end": 12048,
											"name": "tag",
											"source": 14,
											"value": "79"
										},
										{
											"begin": 11717,
											"end": 12048,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11717,
											"end": 12048,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11902,
											"end": 11905,
											"name": "PUSH",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 11891,
											"end": 11900,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11887,
											"end": 11906,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11879,
											"end": 11906,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11879,
											"end": 11906,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11916,
											"end": 12041,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "213"
										},
										{
											"begin": 12038,
											"end": 12039,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12027,
											"end": 12036,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12023,
											"end": 12040,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12014,
											"end": 12020,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11916,
											"end": 12041,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 11916,
											"end": 12041,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11916,
											"end": 12041,
											"name": "tag",
											"source": 14,
											"value": "213"
										},
										{
											"begin": 11916,
											"end": 12041,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11869,
											"end": 12048,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 11869,
											"end": 12048,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11869,
											"end": 12048,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11869,
											"end": 12048,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11869,
											"end": 12048,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12054,
											"end": 12272,
											"name": "tag",
											"source": 14,
											"value": "15"
										},
										{
											"begin": 12054,
											"end": 12272,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12054,
											"end": 12272,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12183,
											"end": 12185,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12172,
											"end": 12181,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12168,
											"end": 12186,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12160,
											"end": 12186,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12160,
											"end": 12186,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12196,
											"end": 12265,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "215"
										},
										{
											"begin": 12262,
											"end": 12263,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12251,
											"end": 12260,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12247,
											"end": 12264,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12238,
											"end": 12244,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 12196,
											"end": 12265,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "186"
										},
										{
											"begin": 12196,
											"end": 12265,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12196,
											"end": 12265,
											"name": "tag",
											"source": 14,
											"value": "215"
										},
										{
											"begin": 12196,
											"end": 12265,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12150,
											"end": 12272,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12150,
											"end": 12272,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12150,
											"end": 12272,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12150,
											"end": 12272,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12150,
											"end": 12272,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12278,
											"end": 12500,
											"name": "tag",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 12278,
											"end": 12500,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12278,
											"end": 12500,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12409,
											"end": 12411,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12398,
											"end": 12407,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12394,
											"end": 12412,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12386,
											"end": 12412,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12386,
											"end": 12412,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12422,
											"end": 12493,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "217"
										},
										{
											"begin": 12490,
											"end": 12491,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12479,
											"end": 12488,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12475,
											"end": 12492,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12466,
											"end": 12472,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 12422,
											"end": 12493,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "192"
										},
										{
											"begin": 12422,
											"end": 12493,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12422,
											"end": 12493,
											"name": "tag",
											"source": 14,
											"value": "217"
										},
										{
											"begin": 12422,
											"end": 12493,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12376,
											"end": 12500,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12376,
											"end": 12500,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12376,
											"end": 12500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12376,
											"end": 12500,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12376,
											"end": 12500,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12506,
											"end": 12675,
											"name": "tag",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 12506,
											"end": 12675,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12506,
											"end": 12675,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12624,
											"end": 12630,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12619,
											"end": 12622,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12612,
											"end": 12631,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12664,
											"end": 12668,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12659,
											"end": 12662,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12655,
											"end": 12669,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12640,
											"end": 12669,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12640,
											"end": 12669,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12602,
											"end": 12675,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12602,
											"end": 12675,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12602,
											"end": 12675,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12602,
											"end": 12675,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12602,
											"end": 12675,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12681,
											"end": 12777,
											"name": "tag",
											"source": 14,
											"value": "127"
										},
										{
											"begin": 12681,
											"end": 12777,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12681,
											"end": 12777,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12747,
											"end": 12771,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "220"
										},
										{
											"begin": 12765,
											"end": 12770,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12747,
											"end": 12771,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 12747,
											"end": 12771,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12747,
											"end": 12771,
											"name": "tag",
											"source": 14,
											"value": "220"
										},
										{
											"begin": 12747,
											"end": 12771,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12736,
											"end": 12771,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12736,
											"end": 12771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12777,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12777,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12777,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12726,
											"end": 12777,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12783,
											"end": 12873,
											"name": "tag",
											"source": 14,
											"value": "222"
										},
										{
											"begin": 12783,
											"end": 12873,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12783,
											"end": 12873,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12860,
											"end": 12865,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12853,
											"end": 12866,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 12846,
											"end": 12867,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 12835,
											"end": 12867,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12835,
											"end": 12867,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12825,
											"end": 12873,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12825,
											"end": 12873,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12825,
											"end": 12873,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12825,
											"end": 12873,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12879,
											"end": 12969,
											"name": "tag",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 12879,
											"end": 12969,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12879,
											"end": 12969,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12957,
											"end": 12962,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12954,
											"end": 12955,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 12943,
											"end": 12963,
											"name": "SIGNEXTEND",
											"source": 14
										},
										{
											"begin": 12932,
											"end": 12963,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12932,
											"end": 12963,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12922,
											"end": 12969,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12922,
											"end": 12969,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12922,
											"end": 12969,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12922,
											"end": 12969,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12975,
											"end": 13093,
											"name": "tag",
											"source": 14,
											"value": "182"
										},
										{
											"begin": 12975,
											"end": 13093,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12975,
											"end": 13093,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13052,
											"end": 13086,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13045,
											"end": 13050,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13041,
											"end": 13087,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13030,
											"end": 13087,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13030,
											"end": 13087,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13020,
											"end": 13093,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13020,
											"end": 13093,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13020,
											"end": 13093,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13020,
											"end": 13093,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13099,
											"end": 13225,
											"name": "tag",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 13099,
											"end": 13225,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13099,
											"end": 13225,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13176,
											"end": 13218,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13169,
											"end": 13174,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13165,
											"end": 13219,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13154,
											"end": 13219,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13154,
											"end": 13219,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13144,
											"end": 13225,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13144,
											"end": 13225,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13144,
											"end": 13225,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13144,
											"end": 13225,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13231,
											"end": 13322,
											"name": "tag",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 13231,
											"end": 13322,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13231,
											"end": 13322,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13307,
											"end": 13315,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFF"
										},
										{
											"begin": 13300,
											"end": 13305,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13296,
											"end": 13316,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13285,
											"end": 13316,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13285,
											"end": 13316,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13275,
											"end": 13322,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13275,
											"end": 13322,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13275,
											"end": 13322,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13275,
											"end": 13322,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13328,
											"end": 13405,
											"name": "tag",
											"source": 14,
											"value": "191"
										},
										{
											"begin": 13328,
											"end": 13405,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13328,
											"end": 13405,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13394,
											"end": 13399,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13383,
											"end": 13399,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13383,
											"end": 13399,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13373,
											"end": 13405,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13373,
											"end": 13405,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13373,
											"end": 13405,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13373,
											"end": 13405,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13411,
											"end": 13563,
											"name": "tag",
											"source": 14,
											"value": "134"
										},
										{
											"begin": 13411,
											"end": 13563,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13411,
											"end": 13563,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13507,
											"end": 13557,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "230"
										},
										{
											"begin": 13551,
											"end": 13556,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13507,
											"end": 13557,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "231"
										},
										{
											"begin": 13507,
											"end": 13557,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13507,
											"end": 13557,
											"name": "tag",
											"source": 14,
											"value": "230"
										},
										{
											"begin": 13507,
											"end": 13557,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13494,
											"end": 13557,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13494,
											"end": 13557,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13484,
											"end": 13563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13484,
											"end": 13563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13484,
											"end": 13563,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13484,
											"end": 13563,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13569,
											"end": 13695,
											"name": "tag",
											"source": 14,
											"value": "231"
										},
										{
											"begin": 13569,
											"end": 13695,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13569,
											"end": 13695,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13665,
											"end": 13689,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "233"
										},
										{
											"begin": 13683,
											"end": 13688,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13665,
											"end": 13689,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 13665,
											"end": 13689,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13665,
											"end": 13689,
											"name": "tag",
											"source": 14,
											"value": "233"
										},
										{
											"begin": 13665,
											"end": 13689,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13652,
											"end": 13689,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13652,
											"end": 13689,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13642,
											"end": 13695,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13642,
											"end": 13695,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13642,
											"end": 13695,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13642,
											"end": 13695,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13701,
											"end": 13897,
											"name": "tag",
											"source": 14,
											"value": "138"
										},
										{
											"begin": 13701,
											"end": 13897,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13701,
											"end": 13897,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13819,
											"end": 13891,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "235"
										},
										{
											"begin": 13885,
											"end": 13890,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13819,
											"end": 13891,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "236"
										},
										{
											"begin": 13819,
											"end": 13891,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13819,
											"end": 13891,
											"name": "tag",
											"source": 14,
											"value": "235"
										},
										{
											"begin": 13819,
											"end": 13891,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13806,
											"end": 13891,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13806,
											"end": 13891,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13796,
											"end": 13897,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13796,
											"end": 13897,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13796,
											"end": 13897,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13796,
											"end": 13897,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13903,
											"end": 14051,
											"name": "tag",
											"source": 14,
											"value": "236"
										},
										{
											"begin": 13903,
											"end": 14051,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13903,
											"end": 14051,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14021,
											"end": 14045,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "238"
										},
										{
											"begin": 14039,
											"end": 14044,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14021,
											"end": 14045,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 14021,
											"end": 14045,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14021,
											"end": 14045,
											"name": "tag",
											"source": 14,
											"value": "238"
										},
										{
											"begin": 14021,
											"end": 14045,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14008,
											"end": 14045,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14008,
											"end": 14045,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13998,
											"end": 14051,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13998,
											"end": 14051,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13998,
											"end": 14051,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13998,
											"end": 14051,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14057,
											"end": 14221,
											"name": "tag",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 14057,
											"end": 14221,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14057,
											"end": 14221,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14159,
											"end": 14215,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "240"
										},
										{
											"begin": 14209,
											"end": 14214,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14159,
											"end": 14215,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "241"
										},
										{
											"begin": 14159,
											"end": 14215,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14159,
											"end": 14215,
											"name": "tag",
											"source": 14,
											"value": "240"
										},
										{
											"begin": 14159,
											"end": 14215,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14146,
											"end": 14215,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14146,
											"end": 14215,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14136,
											"end": 14221,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14136,
											"end": 14221,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14136,
											"end": 14221,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14136,
											"end": 14221,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14227,
											"end": 14359,
											"name": "tag",
											"source": 14,
											"value": "241"
										},
										{
											"begin": 14227,
											"end": 14359,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14227,
											"end": 14359,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14329,
											"end": 14353,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 14347,
											"end": 14352,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14329,
											"end": 14353,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 14329,
											"end": 14353,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14329,
											"end": 14353,
											"name": "tag",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 14329,
											"end": 14353,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14316,
											"end": 14353,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14316,
											"end": 14353,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14306,
											"end": 14359,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14306,
											"end": 14359,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14306,
											"end": 14359,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14306,
											"end": 14359,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14365,
											"end": 14481,
											"name": "tag",
											"source": 14,
											"value": "89"
										},
										{
											"begin": 14365,
											"end": 14481,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14435,
											"end": 14456,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "245"
										},
										{
											"begin": 14450,
											"end": 14455,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14435,
											"end": 14456,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "222"
										},
										{
											"begin": 14435,
											"end": 14456,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14435,
											"end": 14456,
											"name": "tag",
											"source": 14,
											"value": "245"
										},
										{
											"begin": 14435,
											"end": 14456,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14428,
											"end": 14433,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14425,
											"end": 14457,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 14415,
											"end": 14417,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 14415,
											"end": 14417,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 14471,
											"end": 14472,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14468,
											"end": 14469,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14461,
											"end": 14473,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 14415,
											"end": 14417,
											"name": "tag",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 14415,
											"end": 14417,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14405,
											"end": 14481,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14405,
											"end": 14481,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14487,
											"end": 14605,
											"name": "tag",
											"source": 14,
											"value": "93"
										},
										{
											"begin": 14487,
											"end": 14605,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14558,
											"end": 14580,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "248"
										},
										{
											"begin": 14574,
											"end": 14579,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14558,
											"end": 14580,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 14558,
											"end": 14580,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14558,
											"end": 14580,
											"name": "tag",
											"source": 14,
											"value": "248"
										},
										{
											"begin": 14558,
											"end": 14580,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14551,
											"end": 14556,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14548,
											"end": 14581,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 14538,
											"end": 14540,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "249"
										},
										{
											"begin": 14538,
											"end": 14540,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 14595,
											"end": 14596,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14592,
											"end": 14593,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14585,
											"end": 14597,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 14538,
											"end": 14540,
											"name": "tag",
											"source": 14,
											"value": "249"
										},
										{
											"begin": 14538,
											"end": 14540,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14528,
											"end": 14605,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14528,
											"end": 14605,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14611,
											"end": 14733,
											"name": "tag",
											"source": 14,
											"value": "97"
										},
										{
											"begin": 14611,
											"end": 14733,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14684,
											"end": 14708,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 14702,
											"end": 14707,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14684,
											"end": 14708,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "182"
										},
										{
											"begin": 14684,
											"end": 14708,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14684,
											"end": 14708,
											"name": "tag",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 14684,
											"end": 14708,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14677,
											"end": 14682,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14674,
											"end": 14709,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 14664,
											"end": 14666,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "252"
										},
										{
											"begin": 14664,
											"end": 14666,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 14723,
											"end": 14724,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14720,
											"end": 14721,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14713,
											"end": 14725,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 14664,
											"end": 14666,
											"name": "tag",
											"source": 14,
											"value": "252"
										},
										{
											"begin": 14664,
											"end": 14666,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14654,
											"end": 14733,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14654,
											"end": 14733,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14739,
											"end": 14861,
											"name": "tag",
											"source": 14,
											"value": "101"
										},
										{
											"begin": 14739,
											"end": 14861,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14812,
											"end": 14836,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "254"
										},
										{
											"begin": 14830,
											"end": 14835,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14812,
											"end": 14836,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "191"
										},
										{
											"begin": 14812,
											"end": 14836,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14812,
											"end": 14836,
											"name": "tag",
											"source": 14,
											"value": "254"
										},
										{
											"begin": 14812,
											"end": 14836,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14805,
											"end": 14810,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14802,
											"end": 14837,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 14792,
											"end": 14794,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "255"
										},
										{
											"begin": 14792,
											"end": 14794,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 14851,
											"end": 14852,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14848,
											"end": 14849,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14841,
											"end": 14853,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 14792,
											"end": 14794,
											"name": "tag",
											"source": 14,
											"value": "255"
										},
										{
											"begin": 14792,
											"end": 14794,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14782,
											"end": 14861,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14782,
											"end": 14861,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"adjustLiquidity(uint256,uint256,int24,int24)": "65237b90",
							"owner()": "8da5cb5b",
							"poolFee()": "089fe6aa",
							"positionManager()": "791b98bc",
							"swapRouter()": "c31c9c07",
							"token0()": "0dfe1681",
							"token1()": "d21220a7",
							"tokenId()": "17d70f7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"adjustLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contract.sol\":\"LiquidityManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbf71c4ac7cdf2d10909e349a84ab786e1af48b8ac77cf974d4a145f49082c3e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7dd7b50f7f8d55c92b37d3835d1f5c99d9ccb20e3300e86ec404d68ca003afbf\",\"dweb:/ipfs/QmYVoFyQLNv3oc3mu6fes2jtLBPePggwzQZoZeVFKDBeVK\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x4f488275b36896133411eeabc3d7065e8ec89196bf7d85c6fe16272873f1a5eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d136f677d83a5e2a38f5757991e23818b6f9c86eac8d3b0be72fc5c34dfd6b16\",\"dweb:/ipfs/QmWyHCPYvisxLN3ZuSVmCk4pNicguxe31AGcxtBJcHMowx\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c354c3f6e9c487759aa7869be4fba68e0b2efc777b514d289c4cbd3ff8f7e1a\",\"dweb:/ipfs/QmdF9LcSYVmiUCL7JxLEYmSLrjga6zJsujfi6sgEJD4M1z\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://430255ad2229ced6d880e61a67bdc6e48dbbaed8354a7c1fe918cd8b8714a886\",\"dweb:/ipfs/QmTHY56odzqEpEC6v6tafaWMYY7vmULw25q5XHJLCCAeox\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x401dd29dbec7efd863dbd2013ac47888057e33fcec3b3d88215c544bf5b7bfb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e70c0d286c312fd995eb8557d64c90ea9a5067e779a8048bbb1dfc554add4f5e\",\"dweb:/ipfs/Qmc5TGDWyeMm579GNyQsEFnFiiKRgBeMjdfUL12LJYHAHW\"]},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e3b10f75c101de044c1253672207399c1513fd1f0f17be31069c18c0b9a1460\",\"dweb:/ipfs/QmXrkXNY6njQfepE7KbRtJMruGXfrZwsMMsW7m5e3XS9Hf\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f375d0e6d5ea3674e1aa6f112b021e9a86721a6a2f3cb22d673378b30cf0e840\",\"dweb:/ipfs/QmWJir2qnJyp963mU6U3jEEx9i3H3V5BgKawAfSnG1pC8w\"]},\"contracts/contract.sol\":{\"keccak256\":\"0xc66cf749197b42857d56fac7c8a2dd2a4b4d621976c97f83cc5bd720f24f3c8b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ccc577b002d91708c424583805f40472c2a866a43be9aa971c8f657d0b934e96\",\"dweb:/ipfs/QmWJejhJt8639PYCSfkZzHkNTYycPUhktKnZE9MydFcuPr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 765,
								"contract": "contracts/contract.sol:LiquidityManager",
								"label": "owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 767,
								"contract": "contracts/contract.sol:LiquidityManager",
								"label": "swapRouter",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(ISwapRouter)665"
							},
							{
								"astId": 769,
								"contract": "contracts/contract.sol:LiquidityManager",
								"label": "positionManager",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(INonfungiblePositionManager)508"
							},
							{
								"astId": 771,
								"contract": "contracts/contract.sol:LiquidityManager",
								"label": "token0",
								"offset": 0,
								"slot": "3",
								"type": "t_contract(IERC20)77"
							},
							{
								"astId": 773,
								"contract": "contracts/contract.sol:LiquidityManager",
								"label": "token1",
								"offset": 0,
								"slot": "4",
								"type": "t_contract(IERC20)77"
							},
							{
								"astId": 775,
								"contract": "contracts/contract.sol:LiquidityManager",
								"label": "poolFee",
								"offset": 20,
								"slot": "4",
								"type": "t_uint24"
							},
							{
								"astId": 777,
								"contract": "contracts/contract.sol:LiquidityManager",
								"label": "tokenId",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(IERC20)77": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_contract(INonfungiblePositionManager)508": {
								"encoding": "inplace",
								"label": "contract INonfungiblePositionManager",
								"numberOfBytes": "20"
							},
							"t_contract(ISwapRouter)665": {
								"encoding": "inplace",
								"label": "contract ISwapRouter",
								"numberOfBytes": "20"
							},
							"t_uint24": {
								"encoding": "inplace",
								"label": "uint24",
								"numberOfBytes": "3"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 11,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 20,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:65:0",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "793:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "819:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:9:0"
									},
									"scope": 77,
									"src": "773:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "834:71:0",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "929:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "929:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "928:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "969:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "969:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:9:0"
									},
									"scope": 77,
									"src": "910:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "984:213:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1220:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1220:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1232:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1232:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1219:27:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1265:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1265:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1264:6:0"
									},
									"scope": 77,
									"src": "1202:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1277:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1565:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1565:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1580:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1580:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1564:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1620:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1620:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1619:9:0"
									},
									"scope": 77,
									"src": "1546:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1635:667:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2324:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2324:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2341:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2341:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2323:32:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2374:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2374:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2373:6:0"
									},
									"scope": 77,
									"src": "2307:73:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2386:297:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2710:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2724:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2736:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2736:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2709:41:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2769:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2769:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2768:6:0"
									},
									"scope": 77,
									"src": "2688:87:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2575:0"
						}
					],
					"src": "106:2672:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						]
					},
					"id": 195,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 81,
							"nodeType": "ImportDirective",
							"scope": 195,
							"sourceUnit": 265,
							"src": "133:62:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 80,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "141:7:1",
										"typeDescriptions": {}
									}
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 83,
										"name": "IERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 264,
										"src": "286:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC165_$264",
											"typeString": "contract IERC165"
										}
									},
									"id": 84,
									"nodeType": "InheritanceSpecifier",
									"src": "286:7:1"
								}
							],
							"contractDependencies": [
								264
							],
							"contractKind": "interface",
							"documentation": {
								"id": 82,
								"nodeType": "StructuredDocumentation",
								"src": "197:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 194,
							"linearizedBaseContracts": [
								194,
								264
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "300:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 93,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "408:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "408:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "430:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "430:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "450:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "407:67:1"
									},
									"src": "393:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "481:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 102,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "595:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 95,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "595:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 98,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "618:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 97,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "618:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 100,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "644:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "644:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "594:74:1"
									},
									"src": "580:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 103,
										"nodeType": "StructuredDocumentation",
										"src": "675:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 111,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "818:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 104,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "818:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "841:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "841:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "867:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 108,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "867:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "817:64:1"
									},
									"src": "797:85:1"
								},
								{
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "888:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 119,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "988:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "988:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "987:15:1"
									},
									"returnParameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "1026:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1026:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1025:17:1"
									},
									"scope": 194,
									"src": "969:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "1049:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 127,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "1202:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1201:17:1"
									},
									"returnParameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "1242:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1241:15:1"
									},
									"scope": 194,
									"src": "1185:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "1263:565:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "1859:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 129,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1859:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "1873:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1873:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "1885:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1885:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "1902:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 135,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1902:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1858:64:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1931:0:1"
									},
									"scope": 194,
									"src": "1833:99:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "1938:705:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2674:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2674:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2688:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2688:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2700:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2700:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2673:43:1"
									},
									"returnParameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2725:0:1"
									},
									"scope": 194,
									"src": "2648:78:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "2732:732:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "3491:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3491:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "3505:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3505:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "3517:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3517:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3490:43:1"
									},
									"returnParameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3542:0:1"
									},
									"scope": 194,
									"src": "3469:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "3549:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "4023:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "4035:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4035:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4022:29:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4060:0:1"
									},
									"scope": 194,
									"src": "4006:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "4067:315:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 175,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "4414:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4414:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "4432:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 171,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4432:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4413:33:1"
									},
									"returnParameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4455:0:1"
									},
									"scope": 194,
									"src": "4387:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "4462:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 183,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "4627:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4627:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4626:17:1"
									},
									"returnParameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "4667:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4667:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4666:18:1"
									},
									"scope": 194,
									"src": "4606:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "4691:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "4860:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "4875:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4875:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:33:1"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "4916:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 190,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4916:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4915:6:1"
									},
									"scope": 194,
									"src": "4834:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 195,
							"src": "265:4659:1"
						}
					],
					"src": "108:4817:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						],
						"IERC721Enumerable": [
							225
						]
					},
					"id": 226,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 196,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 197,
							"nodeType": "ImportDirective",
							"scope": 226,
							"sourceUnit": 195,
							"src": "66:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 199,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 194,
										"src": "259:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$194",
											"typeString": "contract IERC721"
										}
									},
									"id": 200,
									"nodeType": "InheritanceSpecifier",
									"src": "259:7:2"
								}
							],
							"contractDependencies": [
								194,
								264
							],
							"contractKind": "interface",
							"documentation": {
								"id": 198,
								"nodeType": "StructuredDocumentation",
								"src": "91:136:2",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 225,
							"linearizedBaseContracts": [
								225,
								194,
								264
							],
							"name": "IERC721Enumerable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "274:82:2",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 206,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:2:2"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "407:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "406:9:2"
									},
									"scope": 225,
									"src": "361:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "422:171:2",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "627:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "627:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "642:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "626:30:2"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "680:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "680:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "679:17:2"
									},
									"scope": 225,
									"src": "598:99:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "703:164:2",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 224,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "894:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "894:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "893:15:2"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "932:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "932:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "931:9:2"
									},
									"scope": 225,
									"src": "872:69:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 226,
							"src": "228:715:2"
						}
					],
					"src": "33:911:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						],
						"IERC721Metadata": [
							252
						]
					},
					"id": 253,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 227,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 228,
							"nodeType": "ImportDirective",
							"scope": 253,
							"sourceUnit": 195,
							"src": "66:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 230,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 194,
										"src": "254:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$194",
											"typeString": "contract IERC721"
										}
									},
									"id": 231,
									"nodeType": "InheritanceSpecifier",
									"src": "254:7:3"
								}
							],
							"contractDependencies": [
								194,
								264
							],
							"contractKind": "interface",
							"documentation": {
								"id": 229,
								"nodeType": "StructuredDocumentation",
								"src": "91:133:3",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 252,
							"linearizedBaseContracts": [
								252,
								194,
								264
							],
							"name": "IERC721Metadata",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "269:58:3",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "345:2:3"
									},
									"returnParameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "371:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 234,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "371:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "370:15:3"
									},
									"scope": 252,
									"src": "332:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "392:60:3",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 243,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:2:3"
									},
									"returnParameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "498:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 240,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "498:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "497:15:3"
									},
									"scope": 252,
									"src": "457:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "519:90:3",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 251,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "632:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "632:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "631:17:3"
									},
									"returnParameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "672:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 248,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "672:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "671:15:3"
									},
									"scope": 252,
									"src": "614:73:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 253,
							"src": "225:464:3"
						}
					],
					"src": "33:657:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						]
					},
					"id": 265,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 254,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 255,
								"nodeType": "StructuredDocumentation",
								"src": "140:278:4",
								"text": " @dev Interface of the ERC16 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 264,
							"linearizedBaseContracts": [
								264
							],
							"name": "IERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 256,
										"nodeType": "StructuredDocumentation",
										"src": "443:340:4",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 263,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "815:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 257,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "815:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "814:20:4"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "858:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 260,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "858:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:6:4"
									},
									"scope": 264,
									"src": "788:76:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 265,
							"src": "419:447:4"
						}
					],
					"src": "115:752:4"
				},
				"id": 4
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
					"exportedSymbols": {
						"IUniswapV3SwapCallback": [
							278
						]
					},
					"id": 279,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 266,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 267,
								"nodeType": "StructuredDocumentation",
								"src": "71:144:5",
								"text": "@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 278,
							"linearizedBaseContracts": [
								278
							],
							"name": "IUniswapV3SwapCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 268,
										"nodeType": "StructuredDocumentation",
										"src": "254:898:5",
										"text": "@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 277,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "1197:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 269,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1197:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "1226:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 271,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "1255:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 273,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1255:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:93:5"
									},
									"returnParameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1289:0:5"
									},
									"scope": 278,
									"src": "1157:133:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 279,
							"src": "215:1077:5"
						}
					],
					"src": "45:1248:5"
				},
				"id": 5
			},
			"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						],
						"IERC721Permit": [
							313
						]
					},
					"id": 314,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 280,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 281,
							"nodeType": "ImportDirective",
							"scope": 314,
							"sourceUnit": 195,
							"src": "71:58:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 283,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 194,
										"src": "282:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$194",
											"typeString": "contract IERC721"
										}
									},
									"id": 284,
									"nodeType": "InheritanceSpecifier",
									"src": "282:7:6"
								}
							],
							"contractDependencies": [
								194,
								264
							],
							"contractKind": "interface",
							"documentation": {
								"id": 282,
								"nodeType": "StructuredDocumentation",
								"src": "131:124:6",
								"text": "@title ERC721 with permit\n @notice Extension to ERC721 that includes a permit function for signature based approvals"
							},
							"fullyImplemented": false,
							"id": 313,
							"linearizedBaseContracts": [
								313,
								194,
								264
							],
							"name": "IERC721Permit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "296:104:6",
										"text": "@notice The permit typehash used in the permit signature\n @return The typehash for the permit"
									},
									"functionSelector": "30adf81f",
									"id": 290,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "429:2:6"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "455:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 287,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "454:9:6"
									},
									"scope": 313,
									"src": "405:59:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 291,
										"nodeType": "StructuredDocumentation",
										"src": "470:135:6",
										"text": "@notice The domain separator used in the permit signature\n @return The domain seperator used in encoding of permit signature"
									},
									"functionSelector": "3644e515",
									"id": 296,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:6"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "661:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 293,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:9:6"
									},
									"scope": 313,
									"src": "610:60:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "676:605:6",
										"text": "@notice Approve of a specific token ID for spending by spender via signature\n @param spender The account that is being approved\n @param tokenId The ID of the token that is being approved for spending\n @param deadline The deadline timestamp by which the call must be mined for the approve to work\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "7ac2ff7b",
									"id": 312,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "1311:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 298,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1311:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "1336:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1336:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "1361:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "1387:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 304,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1387:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "1404:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 306,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1404:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "1423:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 308,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1301:137:6"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:0:6"
									},
									"scope": 313,
									"src": "1286:170:6",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 314,
							"src": "255:1203:6"
						}
					],
					"src": "45:1414:6"
				},
				"id": 6
			},
			"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						],
						"IERC721Enumerable": [
							225
						],
						"IERC721Metadata": [
							252
						],
						"IERC721Permit": [
							313
						],
						"INonfungiblePositionManager": [
							508
						],
						"IPeripheryImmutableState": [
							524
						],
						"IPeripheryPayments": [
							550
						],
						"IPoolInitializer": [
							569
						],
						"PoolAddress": [
							757
						]
					},
					"id": 509,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 315,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"id": 316,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"id": 317,
							"nodeType": "ImportDirective",
							"scope": 509,
							"sourceUnit": 253,
							"src": "91:66:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"id": 318,
							"nodeType": "ImportDirective",
							"scope": 509,
							"sourceUnit": 226,
							"src": "158:68:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol",
							"file": "./IPoolInitializer.sol",
							"id": 319,
							"nodeType": "ImportDirective",
							"scope": 509,
							"sourceUnit": 570,
							"src": "228:32:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol",
							"file": "./IERC721Permit.sol",
							"id": 320,
							"nodeType": "ImportDirective",
							"scope": 509,
							"sourceUnit": 314,
							"src": "261:29:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol",
							"file": "./IPeripheryPayments.sol",
							"id": 321,
							"nodeType": "ImportDirective",
							"scope": 509,
							"sourceUnit": 551,
							"src": "291:34:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol",
							"file": "./IPeripheryImmutableState.sol",
							"id": 322,
							"nodeType": "ImportDirective",
							"scope": 509,
							"sourceUnit": 525,
							"src": "326:40:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol",
							"file": "../libraries/PoolAddress.sol",
							"id": 323,
							"nodeType": "ImportDirective",
							"scope": 509,
							"sourceUnit": 758,
							"src": "367:38:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 325,
										"name": "IPoolInitializer",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 569,
										"src": "629:16:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPoolInitializer_$569",
											"typeString": "contract IPoolInitializer"
										}
									},
									"id": 326,
									"nodeType": "InheritanceSpecifier",
									"src": "629:16:7"
								},
								{
									"baseName": {
										"id": 327,
										"name": "IPeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 550,
										"src": "651:18:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPayments_$550",
											"typeString": "contract IPeripheryPayments"
										}
									},
									"id": 328,
									"nodeType": "InheritanceSpecifier",
									"src": "651:18:7"
								},
								{
									"baseName": {
										"id": 329,
										"name": "IPeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 524,
										"src": "675:24:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryImmutableState_$524",
											"typeString": "contract IPeripheryImmutableState"
										}
									},
									"id": 330,
									"nodeType": "InheritanceSpecifier",
									"src": "675:24:7"
								},
								{
									"baseName": {
										"id": 331,
										"name": "IERC721Metadata",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 252,
										"src": "705:15:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Metadata_$252",
											"typeString": "contract IERC721Metadata"
										}
									},
									"id": 332,
									"nodeType": "InheritanceSpecifier",
									"src": "705:15:7"
								},
								{
									"baseName": {
										"id": 333,
										"name": "IERC721Enumerable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 225,
										"src": "726:17:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Enumerable_$225",
											"typeString": "contract IERC721Enumerable"
										}
									},
									"id": 334,
									"nodeType": "InheritanceSpecifier",
									"src": "726:17:7"
								},
								{
									"baseName": {
										"id": 335,
										"name": "IERC721Permit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 313,
										"src": "749:13:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Permit_$313",
											"typeString": "contract IERC721Permit"
										}
									},
									"id": 336,
									"nodeType": "InheritanceSpecifier",
									"src": "749:13:7"
								}
							],
							"contractDependencies": [
								194,
								225,
								252,
								264,
								313,
								524,
								550,
								569
							],
							"contractKind": "interface",
							"documentation": {
								"id": 324,
								"nodeType": "StructuredDocumentation",
								"src": "407:177:7",
								"text": "@title Non-fungible token for positions\n @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 508,
							"linearizedBaseContracts": [
								508,
								313,
								225,
								252,
								194,
								264,
								524,
								550,
								569
							],
							"name": "INonfungiblePositionManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "769:458:7",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"id": 347,
									"name": "IncreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1256:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1256:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1281:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 340,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1281:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1300:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1300:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1317:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 344,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1317:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1255:78:7"
									},
									"src": "1232:102:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 348,
										"nodeType": "StructuredDocumentation",
										"src": "1339:419:7",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"id": 358,
									"name": "DecreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "1787:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 349,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1787:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "1812:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 351,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1812:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "1831:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1831:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "1848:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1848:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1786:78:7"
									},
									"src": "1763:102:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 359,
										"nodeType": "StructuredDocumentation",
										"src": "1870:522:7",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"id": 369,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "2411:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2411:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 363,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "2436:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2436:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 365,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "2455:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 364,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2455:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 367,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "2472:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2472:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2410:78:7"
									},
									"src": "2397:92:7"
								},
								{
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "2495:1157:7",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return fee The fee associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 399,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3676:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3676:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3675:17:7"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3753:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 374,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3753:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3779:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3779:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 379,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3809:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 378,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3809:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3837:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 380,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3837:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3865:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 382,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3865:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3889:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 384,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3889:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3918:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 386,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3918:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3947:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 388,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3947:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3978:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3978:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "4024:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 392,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4024:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "4070:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 394,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4070:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "4103:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 396,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4103:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3739:393:7"
									},
									"scope": 508,
									"src": "3657:476:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 422,
									"members": [
										{
											"constant": false,
											"id": 401,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4167:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 400,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4167:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 403,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4191:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 402,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4191:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 405,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4215:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 404,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "4215:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 407,
											"mutability": "mutable",
											"name": "tickLower",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4235:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 406,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4235:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 409,
											"mutability": "mutable",
											"name": "tickUpper",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4260:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 408,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4260:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 411,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4285:22:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 410,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4285:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 413,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4317:22:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 412,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4317:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 415,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4349:18:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 414,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4349:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 417,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4377:18:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 416,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4377:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 419,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4405:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 418,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4405:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 421,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 422,
											"src": "4432:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 420,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4432:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nodeType": "StructDefinition",
									"scope": 508,
									"src": "4139:316:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 423,
										"nodeType": "StructuredDocumentation",
										"src": "4461:586:7",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "88316456",
									"id": 436,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "5066:26:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$422_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 424,
													"name": "MintParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 422,
													"src": "5066:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$422_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5065:28:7"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "5157:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 427,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5157:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "5186:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 429,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5186:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "5217:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5217:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "5246:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5246:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5143:128:7"
									},
									"scope": 508,
									"src": "5052:220:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 449,
									"members": [
										{
											"constant": false,
											"id": 438,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 449,
											"src": "5319:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 437,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5319:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 440,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 449,
											"src": "5344:22:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 439,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5344:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 442,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 449,
											"src": "5376:22:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 441,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5376:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 444,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 449,
											"src": "5408:18:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 443,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5408:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 446,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 449,
											"src": "5436:18:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 445,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5436:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 448,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 449,
											"src": "5464:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 447,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5464:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 508,
									"src": "5278:209:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "5493:821:7",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 461,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "6346:39:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$449_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 451,
													"name": "IncreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 449,
													"src": "6346:23:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$449_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6345:41:7"
									},
									"returnParameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "6450:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 454,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6450:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "6481:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6481:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "6510:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 458,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6510:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6436:99:7"
									},
									"scope": 508,
									"src": "6319:217:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 472,
									"members": [
										{
											"constant": false,
											"id": 463,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 472,
											"src": "6583:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 462,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6583:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 465,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 472,
											"src": "6608:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 464,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6608:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 467,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 472,
											"src": "6635:18:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 466,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6635:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 469,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 472,
											"src": "6663:18:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 468,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6663:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 471,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 472,
											"src": "6691:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 470,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6691:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 508,
									"src": "6542:172:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "6720:702:7",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed"
									},
									"functionSelector": "0c49ccbe",
									"id": 482,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "7454:39:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$472_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 474,
													"name": "DecreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 472,
													"src": "7454:23:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$472_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7453:41:7"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "7545:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7545:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "7562:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7562:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7544:34:7"
									},
									"scope": 508,
									"src": "7427:152:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 491,
									"members": [
										{
											"constant": false,
											"id": 484,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 491,
											"src": "7616:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 483,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7616:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 486,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 491,
											"src": "7641:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 485,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "7641:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 488,
											"mutability": "mutable",
											"name": "amount0Max",
											"nodeType": "VariableDeclaration",
											"scope": 491,
											"src": "7668:18:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 487,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7668:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 490,
											"mutability": "mutable",
											"name": "amount1Max",
											"nodeType": "VariableDeclaration",
											"scope": 491,
											"src": "7696:18:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 489,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7696:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nodeType": "StructDefinition",
									"scope": 508,
									"src": "7585:136:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "7727:489:7",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 501,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "8238:29:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$491_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 493,
													"name": "CollectParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 491,
													"src": "8238:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$491_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8237:31:7"
									},
									"returnParameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "8295:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8295:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "8312:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8312:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8294:34:7"
									},
									"scope": 508,
									"src": "8221:108:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 502,
										"nodeType": "StructuredDocumentation",
										"src": "8335:213:7",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 507,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 504,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "8567:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 503,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8567:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8566:17:7"
									},
									"returnParameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8600:0:7"
									},
									"scope": 508,
									"src": "8553:48:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 509,
							"src": "584:8019:7"
						}
					],
					"src": "45:8559:7"
				},
				"id": 7
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							524
						]
					},
					"id": 525,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 510,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 511,
								"nodeType": "StructuredDocumentation",
								"src": "71:91:8",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 524,
							"linearizedBaseContracts": [
								524
							],
							"name": "IPeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 512,
										"nodeType": "StructuredDocumentation",
										"src": "203:57:8",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 517,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:8"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 517,
												"src": "307:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 514,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "307:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "306:9:8"
									},
									"scope": 524,
									"src": "265:51:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 518,
										"nodeType": "StructuredDocumentation",
										"src": "322:40:8",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 523,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:2:8"
									},
									"returnParameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "407:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 520,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "406:9:8"
									},
									"scope": 524,
									"src": "367:49:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 525,
							"src": "162:256:8"
						}
					],
					"src": "45:374:8"
				},
				"id": 8
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							550
						]
					},
					"id": 551,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 526,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 527,
								"nodeType": "StructuredDocumentation",
								"src": "71:92:9",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 550,
							"linearizedBaseContracts": [
								550
							],
							"name": "IPeripheryPayments",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 528,
										"nodeType": "StructuredDocumentation",
										"src": "198:302:9",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 535,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "526:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "549:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "525:42:9"
									},
									"returnParameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "584:0:9"
									},
									"scope": 550,
									"src": "505:80:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "591:225:9",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 539,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "839:2:9"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:9"
									},
									"scope": 550,
									"src": "821:38:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 540,
										"nodeType": "StructuredDocumentation",
										"src": "865:427:9",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 549,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "1326:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1326:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "1349:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "1380:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 545,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1380:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1316:87:9"
									},
									"returnParameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1420:0:9"
									},
									"scope": 550,
									"src": "1297:124:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 551,
							"src": "163:1260:9"
						}
					],
					"src": "45:1379:9"
				},
				"id": 9
			},
			"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol",
					"exportedSymbols": {
						"IPoolInitializer": [
							569
						]
					},
					"id": 570,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 552,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:10"
						},
						{
							"id": 553,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 554,
								"nodeType": "StructuredDocumentation",
								"src": "91:194:10",
								"text": "@title Creates and initializes V3 Pools\n @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n require the pool to exist."
							},
							"fullyImplemented": false,
							"id": 569,
							"linearizedBaseContracts": [
								569
							],
							"name": "IPoolInitializer",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "318:648:10",
										"text": "@notice Creates a new pool if it does not exist, then initializes if not initialized\n @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n @param token0 The contract address of token0 of the pool\n @param token1 The contract address of token1 of the pool\n @param fee The fee amount of the v3 pool for the specified token pair\n @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
									},
									"functionSelector": "13ead562",
									"id": 568,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAndInitializePoolIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1024:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1024:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1048:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1048:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1072:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 560,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1072:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1092:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 562,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1092:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:104:10"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1145:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1145:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1144:14:10"
									},
									"scope": 569,
									"src": "971:188:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 570,
							"src": "285:876:10"
						}
					],
					"src": "45:1117:10"
				},
				"id": 10
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
					"exportedSymbols": {
						"ISwapRouter": [
							665
						],
						"IUniswapV3SwapCallback": [
							278
						]
					},
					"id": 666,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 571,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:11"
						},
						{
							"id": 572,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:11"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"id": 573,
							"nodeType": "ImportDirective",
							"scope": 666,
							"sourceUnit": 279,
							"src": "91:83:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 575,
										"name": "IUniswapV3SwapCallback",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 278,
										"src": "305:22:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3SwapCallback_$278",
											"typeString": "contract IUniswapV3SwapCallback"
										}
									},
									"id": 576,
									"nodeType": "InheritanceSpecifier",
									"src": "305:22:11"
								}
							],
							"contractDependencies": [
								278
							],
							"contractKind": "interface",
							"documentation": {
								"id": 574,
								"nodeType": "StructuredDocumentation",
								"src": "176:104:11",
								"text": "@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"
							},
							"fullyImplemented": false,
							"id": 665,
							"linearizedBaseContracts": [
								665,
								278
							],
							"name": "ISwapRouter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ISwapRouter.ExactInputSingleParams",
									"id": 593,
									"members": [
										{
											"constant": false,
											"id": 578,
											"mutability": "mutable",
											"name": "tokenIn",
											"nodeType": "VariableDeclaration",
											"scope": 593,
											"src": "374:15:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 577,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "374:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 580,
											"mutability": "mutable",
											"name": "tokenOut",
											"nodeType": "VariableDeclaration",
											"scope": 593,
											"src": "399:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 579,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "399:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 582,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 593,
											"src": "425:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 581,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "425:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 584,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 593,
											"src": "445:17:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 583,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "445:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 586,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 593,
											"src": "472:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 585,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "472:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 588,
											"mutability": "mutable",
											"name": "amountIn",
											"nodeType": "VariableDeclaration",
											"scope": 593,
											"src": "498:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 587,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "498:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 590,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nodeType": "VariableDeclaration",
											"scope": 593,
											"src": "524:24:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 589,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "524:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 592,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nodeType": "VariableDeclaration",
											"scope": 593,
											"src": "558:25:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 591,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "558:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputSingleParams",
									"nodeType": "StructDefinition",
									"scope": 665,
									"src": "334:256:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 594,
										"nodeType": "StructuredDocumentation",
										"src": "596:250:11",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "414bf389",
									"id": 601,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 596,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "877:38:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$593_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 595,
													"name": "ExactInputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 593,
													"src": "877:22:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$593_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "876:40:11"
									},
									"returnParameters": {
										"id": 600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "943:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 598,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "943:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "942:19:11"
									},
									"scope": 665,
									"src": "851:111:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactInputParams",
									"id": 612,
									"members": [
										{
											"constant": false,
											"id": 603,
											"mutability": "mutable",
											"name": "path",
											"nodeType": "VariableDeclaration",
											"scope": 612,
											"src": "1002:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 602,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1002:5:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 605,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 612,
											"src": "1022:17:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 604,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1022:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 607,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 612,
											"src": "1049:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 606,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1049:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 609,
											"mutability": "mutable",
											"name": "amountIn",
											"nodeType": "VariableDeclaration",
											"scope": 612,
											"src": "1075:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 608,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1075:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 611,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nodeType": "VariableDeclaration",
											"scope": 612,
											"src": "1101:24:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 610,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1101:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputParams",
									"nodeType": "StructDefinition",
									"scope": 665,
									"src": "968:164:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "1138:273:11",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "c04b8d59",
									"id": 620,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "1436:32:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$612_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 614,
													"name": "ExactInputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 612,
													"src": "1436:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$612_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1435:34:11"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "1496:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 617,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1496:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:19:11"
									},
									"scope": 665,
									"src": "1416:99:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputSingleParams",
									"id": 637,
									"members": [
										{
											"constant": false,
											"id": 622,
											"mutability": "mutable",
											"name": "tokenIn",
											"nodeType": "VariableDeclaration",
											"scope": 637,
											"src": "1562:15:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 621,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1562:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 624,
											"mutability": "mutable",
											"name": "tokenOut",
											"nodeType": "VariableDeclaration",
											"scope": 637,
											"src": "1587:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 623,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1587:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 626,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 637,
											"src": "1613:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 625,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "1613:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 628,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 637,
											"src": "1633:17:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 627,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1633:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 630,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 637,
											"src": "1660:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 629,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1660:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 632,
											"mutability": "mutable",
											"name": "amountOut",
											"nodeType": "VariableDeclaration",
											"scope": 637,
											"src": "1686:17:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 631,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1686:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 634,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nodeType": "VariableDeclaration",
											"scope": 637,
											"src": "1713:23:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 633,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1713:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 636,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nodeType": "VariableDeclaration",
											"scope": 637,
											"src": "1746:25:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 635,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "1746:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputSingleParams",
									"nodeType": "StructDefinition",
									"scope": 665,
									"src": "1521:257:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 638,
										"nodeType": "StructuredDocumentation",
										"src": "1784:250:11",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "db3e2198",
									"id": 645,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "2066:39:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$637_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 639,
													"name": "ExactOutputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 637,
													"src": "2066:23:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$637_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2065:41:11"
									},
									"returnParameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "2133:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2133:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2132:18:11"
									},
									"scope": 665,
									"src": "2039:112:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputParams",
									"id": 656,
									"members": [
										{
											"constant": false,
											"id": 647,
											"mutability": "mutable",
											"name": "path",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "2192:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 646,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "2192:5:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 649,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "2212:17:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 648,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2212:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 651,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "2239:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 650,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2239:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 653,
											"mutability": "mutable",
											"name": "amountOut",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "2265:17:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 652,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2265:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 655,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "2292:23:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 654,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2292:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputParams",
									"nodeType": "StructDefinition",
									"scope": 665,
									"src": "2157:165:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 657,
										"nodeType": "StructuredDocumentation",
										"src": "2328:284:11",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "f28c0498",
									"id": 664,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 659,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "2638:33:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$656_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 658,
													"name": "ExactOutputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 656,
													"src": "2638:17:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$656_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2637:35:11"
									},
									"returnParameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "2699:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2698:18:11"
									},
									"scope": 665,
									"src": "2617:100:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 666,
							"src": "280:2439:11"
						}
					],
					"src": "45:2675:11"
				},
				"id": 11
			},
			"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							757
						]
					},
					"id": 758,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 667,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 668,
								"nodeType": "StructuredDocumentation",
								"src": "71:96:12",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 757,
							"linearizedBaseContracts": [
								757
							],
							"name": "PoolAddress",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 671,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 757,
									"src": "193:114:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 669,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "193:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534",
										"id": 670,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "241:66:12",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1",
											"typeString": "int_const 1028...(70 digits omitted)...6276"
										},
										"value": "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 678,
									"members": [
										{
											"constant": false,
											"id": 673,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 678,
											"src": "387:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 672,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "387:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 675,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 678,
											"src": "411:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 674,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "411:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 677,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 678,
											"src": "435:10:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 676,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "435:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nodeType": "StructDefinition",
									"scope": 757,
									"src": "362:90:12",
									"visibility": "public"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "917:141:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 690,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 681,
														"src": "931:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 691,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 683,
														"src": "940:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "931:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 701,
												"nodeType": "IfStatement",
												"src": "927:56:12",
												"trueBody": {
													"expression": {
														"id": 699,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 693,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 681,
																	"src": "949:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 694,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 683,
																	"src": "957:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 695,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "948:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 696,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 683,
																	"src": "968:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 697,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 681,
																	"src": "976:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 698,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "967:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "948:35:12",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 700,
													"nodeType": "ExpressionStatement",
													"src": "948:35:12"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 703,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "1017:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 704,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 683,
															"src": "1033:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 705,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 685,
															"src": "1046:3:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 702,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 678,
														"src": "1000:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$678_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1000:51:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$678_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 689,
												"id": 707,
												"nodeType": "Return",
												"src": "993:58:12"
											}
										]
									},
									"documentation": {
										"id": 679,
										"nodeType": "StructuredDocumentation",
										"src": "458:321:12",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "813:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "837:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 682,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "837:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "861:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 684,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "861:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "803:74:12"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "901:14:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$678_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 687,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 678,
													"src": "901:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$678_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "900:16:12"
									},
									"scope": 757,
									"src": "784:274:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "1403:414:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 724,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 720,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 714,
																	"src": "1421:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$678_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 721,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 673,
																"src": "1421:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 722,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 714,
																	"src": "1434:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$678_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 723,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 675,
																"src": "1434:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1421:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 719,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1413:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1413:32:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 726,
												"nodeType": "ExpressionStatement",
												"src": "1413:32:12"
											},
											{
												"expression": {
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 727,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 717,
														"src": "1455:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "ff",
																						"id": 735,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "hexString",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1581:7:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						}
																					},
																					{
																						"id": 736,
																						"name": "factory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 712,
																						"src": "1614:7:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"expression": {
																											"id": 740,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 714,
																											"src": "1668:3:12",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$678_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 741,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token0",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 673,
																										"src": "1668:10:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 742,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 714,
																											"src": "1680:3:12",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$678_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 743,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token1",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 675,
																										"src": "1680:10:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 744,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 714,
																											"src": "1692:3:12",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$678_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 745,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "fee",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 677,
																										"src": "1692:7:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									],
																									"expression": {
																										"id": 738,
																										"name": "abi",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967295,
																										"src": "1657:3:12",
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_abi",
																											"typeString": "abi"
																										}
																									},
																									"id": 739,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "encode",
																									"nodeType": "MemberAccess",
																									"src": "1657:10:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																										"typeString": "function () pure returns (bytes memory)"
																									}
																								},
																								"id": 746,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1657:43:12",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 737,
																							"name": "keccak256",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967288,
																							"src": "1647:9:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																								"typeString": "function (bytes memory) pure returns (bytes32)"
																							}
																						},
																						"id": 747,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1647:54:12",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 748,
																						"name": "POOL_INIT_CODE_HASH",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 671,
																						"src": "1727:19:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"expression": {
																						"id": 733,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "1539:3:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 734,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "1539:16:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 749,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1539:229:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 732,
																			"name": "keccak256",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967288,
																			"src": "1508:9:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																				"typeString": "function (bytes memory) pure returns (bytes32)"
																			}
																		},
																		"id": 750,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1508:278:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 731,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1483:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 730,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1483:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 751,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1483:317:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1462:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 728,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1462:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 752,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1462:348:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1455:355:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 754,
												"nodeType": "ExpressionStatement",
												"src": "1455:355:12"
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "1064:236:12",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "1329:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 711,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1329:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "1346:18:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$678_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 713,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 678,
													"src": "1346:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$678_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1328:37:12"
									},
									"returnParameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "1389:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 716,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1389:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1388:14:12"
									},
									"scope": 757,
									"src": "1305:512:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 758,
							"src": "167:1652:12"
						}
					],
					"src": "45:1775:12"
				},
				"id": 12
			},
			"contracts/contract.sol": {
				"ast": {
					"absolutePath": "contracts/contract.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC20": [
							77
						],
						"IERC721": [
							194
						],
						"IERC721Enumerable": [
							225
						],
						"IERC721Metadata": [
							252
						],
						"IERC721Permit": [
							313
						],
						"INonfungiblePositionManager": [
							508
						],
						"IPeripheryImmutableState": [
							524
						],
						"IPeripheryPayments": [
							550
						],
						"IPoolInitializer": [
							569
						],
						"ISwapRouter": [
							665
						],
						"IUniswapV3SwapCallback": [
							278
						],
						"LiquidityManager": [
							972
						],
						"PoolAddress": [
							757
						]
					},
					"id": 973,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 759,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:13"
						},
						{
							"id": 760,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "56:19:13"
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
							"file": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
							"id": 761,
							"nodeType": "ImportDirective",
							"scope": 973,
							"sourceUnit": 666,
							"src": "77:68:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol",
							"file": "@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol",
							"id": 762,
							"nodeType": "ImportDirective",
							"scope": 973,
							"sourceUnit": 509,
							"src": "146:84:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 763,
							"nodeType": "ImportDirective",
							"scope": 973,
							"sourceUnit": 78,
							"src": "231:56:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 972,
							"linearizedBaseContracts": [
								972
							],
							"name": "LiquidityManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 765,
									"mutability": "mutable",
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"scope": 972,
									"src": "321:20:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 764,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "321:7:13",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c31c9c07",
									"id": 767,
									"mutability": "mutable",
									"name": "swapRouter",
									"nodeType": "VariableDeclaration",
									"scope": 972,
									"src": "347:29:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ISwapRouter_$665",
										"typeString": "contract ISwapRouter"
									},
									"typeName": {
										"id": 766,
										"name": "ISwapRouter",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 665,
										"src": "347:11:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISwapRouter_$665",
											"typeString": "contract ISwapRouter"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "791b98bc",
									"id": 769,
									"mutability": "mutable",
									"name": "positionManager",
									"nodeType": "VariableDeclaration",
									"scope": 972,
									"src": "382:50:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
										"typeString": "contract INonfungiblePositionManager"
									},
									"typeName": {
										"id": 768,
										"name": "INonfungiblePositionManager",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 508,
										"src": "382:27:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
											"typeString": "contract INonfungiblePositionManager"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0dfe1681",
									"id": 771,
									"mutability": "mutable",
									"name": "token0",
									"nodeType": "VariableDeclaration",
									"scope": 972,
									"src": "439:20:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$77",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 770,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 77,
										"src": "439:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d21220a7",
									"id": 773,
									"mutability": "mutable",
									"name": "token1",
									"nodeType": "VariableDeclaration",
									"scope": 972,
									"src": "475:20:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$77",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 772,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 77,
										"src": "475:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "089fe6aa",
									"id": 775,
									"mutability": "mutable",
									"name": "poolFee",
									"nodeType": "VariableDeclaration",
									"scope": 972,
									"src": "509:21:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint24",
										"typeString": "uint24"
									},
									"typeName": {
										"id": 774,
										"name": "uint24",
										"nodeType": "ElementaryTypeName",
										"src": "509:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint24",
											"typeString": "uint24"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "17d70f7c",
									"id": 777,
									"mutability": "mutable",
									"name": "tokenId",
									"nodeType": "VariableDeclaration",
									"scope": 972,
									"src": "537:22:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 776,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "537:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 823,
										"nodeType": "Block",
										"src": "722:251:13",
										"statements": [
											{
												"expression": {
													"id": 793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 790,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "732:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 791,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "740:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 792,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "740:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "732:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 794,
												"nodeType": "ExpressionStatement",
												"src": "732:18:13"
											},
											{
												"expression": {
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 795,
														"name": "swapRouter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "760:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISwapRouter_$665",
															"typeString": "contract ISwapRouter"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 797,
																"name": "_swapRouter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 779,
																"src": "785:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 796,
															"name": "ISwapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 665,
															"src": "773:11:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ISwapRouter_$665_$",
																"typeString": "type(contract ISwapRouter)"
															}
														},
														"id": 798,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "773:24:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISwapRouter_$665",
															"typeString": "contract ISwapRouter"
														}
													},
													"src": "760:37:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISwapRouter_$665",
														"typeString": "contract ISwapRouter"
													}
												},
												"id": 800,
												"nodeType": "ExpressionStatement",
												"src": "760:37:13"
											},
											{
												"expression": {
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 801,
														"name": "positionManager",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 769,
														"src": "807:15:13",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
															"typeString": "contract INonfungiblePositionManager"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 803,
																"name": "_positionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 781,
																"src": "853:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 802,
															"name": "INonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 508,
															"src": "825:27:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$508_$",
																"typeString": "type(contract INonfungiblePositionManager)"
															}
														},
														"id": 804,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "825:45:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
															"typeString": "contract INonfungiblePositionManager"
														}
													},
													"src": "807:63:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
														"typeString": "contract INonfungiblePositionManager"
													}
												},
												"id": 806,
												"nodeType": "ExpressionStatement",
												"src": "807:63:13"
											},
											{
												"expression": {
													"id": 811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 807,
														"name": "token0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 771,
														"src": "880:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 809,
																"name": "_token0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 783,
																"src": "896:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 808,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "889:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 810,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "889:15:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"src": "880:24:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"id": 812,
												"nodeType": "ExpressionStatement",
												"src": "880:24:13"
											},
											{
												"expression": {
													"id": 817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 813,
														"name": "token1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 773,
														"src": "914:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 815,
																"name": "_token1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 785,
																"src": "930:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 814,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "923:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 816,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "923:15:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"src": "914:24:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"id": 818,
												"nodeType": "ExpressionStatement",
												"src": "914:24:13"
											},
											{
												"expression": {
													"id": 821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 819,
														"name": "poolFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 775,
														"src": "948:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 820,
														"name": "_poolFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 787,
														"src": "958:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"src": "948:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"id": 822,
												"nodeType": "ExpressionStatement",
												"src": "948:18:13"
											}
										]
									},
									"id": 824,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "_swapRouter",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "587:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 778,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "587:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "_positionManager",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "616:24:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "616:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "_token0",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "650:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "650:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "_token1",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "675:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "675:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "_poolFee",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "700:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 786,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "700:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "577:144:13"
									},
									"returnParameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "722:0:13"
									},
									"scope": 972,
									"src": "566:407:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 835,
										"nodeType": "Block",
										"src": "1000:73:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 830,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 827,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1018:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 828,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1018:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 829,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 765,
																"src": "1032:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1018:19:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420746865206f776e6572",
															"id": 831,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1039:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5",
																"typeString": "literal_string \"Not the owner\""
															},
															"value": "Not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5",
																"typeString": "literal_string \"Not the owner\""
															}
														],
														"id": 826,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1010:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:45:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 833,
												"nodeType": "ExpressionStatement",
												"src": "1010:45:13"
											},
											{
												"id": 834,
												"nodeType": "PlaceholderStatement",
												"src": "1065:1:13"
											}
										]
									},
									"id": 836,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "997:2:13"
									},
									"src": "979:94:13",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 970,
										"nodeType": "Block",
										"src": "1243:1871:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 854,
																	"name": "positionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 769,
																	"src": "1302:15:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																],
																"id": 853,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1294:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 852,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1294:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 855,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1294:24:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 856,
															"name": "amount0Desired",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 838,
															"src": "1320:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 849,
															"name": "token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 771,
															"src": "1279:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 851,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 64,
														"src": "1279:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 857,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1279:56:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 858,
												"nodeType": "ExpressionStatement",
												"src": "1279:56:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 864,
																	"name": "positionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 769,
																	"src": "1368:15:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																],
																"id": 863,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1360:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 862,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1360:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 865,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1360:24:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 866,
															"name": "amount1Desired",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "1386:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 859,
															"name": "token1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "1345:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 64,
														"src": "1345:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 867,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1345:56:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 868,
												"nodeType": "ExpressionStatement",
												"src": "1345:56:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 869,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "1471:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 870,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1482:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1471:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 932,
												"nodeType": "IfStatement",
												"src": "1467:984:13",
												"trueBody": {
													"id": 931,
													"nodeType": "Block",
													"src": "1485:966:13",
													"statements": [
														{
															"assignments": [
																875
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 875,
																	"mutability": "mutable",
																	"name": "params",
																	"nodeType": "VariableDeclaration",
																	"scope": 931,
																	"src": "1499:65:13",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$472_memory_ptr",
																		"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
																	},
																	"typeName": {
																		"id": 874,
																		"name": "INonfungiblePositionManager.DecreaseLiquidityParams",
																		"nodeType": "UserDefinedTypeName",
																		"referencedDeclaration": 472,
																		"src": "1499:51:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$472_storage_ptr",
																			"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 889,
															"initialValue": {
																"arguments": [
																	{
																		"id": 878,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 777,
																		"src": "1666:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 881,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1711:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint128_$",
																						"typeString": "type(uint128)"
																					},
																					"typeName": {
																						"id": 880,
																						"name": "uint128",
																						"nodeType": "ElementaryTypeName",
																						"src": "1711:7:13",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint128_$",
																						"typeString": "type(uint128)"
																					}
																				],
																				"id": 879,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "1706:4:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 882,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1706:13:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint128",
																				"typeString": "type(uint128)"
																			}
																		},
																		"id": 883,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "1706:17:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	{
																		"hexValue": "30",
																		"id": 884,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1757:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"hexValue": "30",
																		"id": 885,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1792:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"expression": {
																			"id": 886,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "1825:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 887,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "1825:15:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 876,
																		"name": "INonfungiblePositionManager",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 508,
																		"src": "1583:27:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$508_$",
																			"typeString": "type(contract INonfungiblePositionManager)"
																		}
																	},
																	"id": 877,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "DecreaseLiquidityParams",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 472,
																	"src": "1583:51:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_struct$_DecreaseLiquidityParams_$472_storage_ptr_$",
																		"typeString": "type(struct INonfungiblePositionManager.DecreaseLiquidityParams storage pointer)"
																	}
																},
																"id": 888,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "structConstructorCall",
																"lValueRequested": false,
																"names": [
																	"tokenId",
																	"liquidity",
																	"amount0Min",
																	"amount1Min",
																	"deadline"
																],
																"nodeType": "FunctionCall",
																"src": "1583:276:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$472_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams memory"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1499:360:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 893,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 875,
																		"src": "1908:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$472_memory_ptr",
																			"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$472_memory_ptr",
																			"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams memory"
																		}
																	],
																	"expression": {
																		"id": 890,
																		"name": "positionManager",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 769,
																		"src": "1874:15:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
																			"typeString": "contract INonfungiblePositionManager"
																		}
																	},
																	"id": 892,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "decreaseLiquidity",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 482,
																	"src": "1874:33:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_payable$_t_struct$_DecreaseLiquidityParams_$472_memory_ptr_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (struct INonfungiblePositionManager.DecreaseLiquidityParams memory) payable external returns (uint256,uint256)"
																	}
																},
																"id": 894,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1874:41:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"id": 895,
															"nodeType": "ExpressionStatement",
															"src": "1874:41:13"
														},
														{
															"assignments": [
																899
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 899,
																	"mutability": "mutable",
																	"name": "collectParams",
																	"nodeType": "VariableDeclaration",
																	"scope": 931,
																	"src": "1982:62:13",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_CollectParams_$491_memory_ptr",
																		"typeString": "struct INonfungiblePositionManager.CollectParams"
																	},
																	"typeName": {
																		"id": 898,
																		"name": "INonfungiblePositionManager.CollectParams",
																		"nodeType": "UserDefinedTypeName",
																		"referencedDeclaration": 491,
																		"src": "1982:41:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_CollectParams_$491_storage_ptr",
																			"typeString": "struct INonfungiblePositionManager.CollectParams"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 918,
															"initialValue": {
																"arguments": [
																	{
																		"id": 902,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 777,
																		"src": "2136:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 905,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "2184:4:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_LiquidityManager_$972",
																					"typeString": "contract LiquidityManager"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_LiquidityManager_$972",
																					"typeString": "contract LiquidityManager"
																				}
																			],
																			"id": 904,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2176:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 903,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2176:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 906,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2176:13:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 909,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2228:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint128_$",
																						"typeString": "type(uint128)"
																					},
																					"typeName": {
																						"id": 908,
																						"name": "uint128",
																						"nodeType": "ElementaryTypeName",
																						"src": "2228:7:13",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint128_$",
																						"typeString": "type(uint128)"
																					}
																				],
																				"id": 907,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "2223:4:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 910,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2223:13:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint128",
																				"typeString": "type(uint128)"
																			}
																		},
																		"id": 911,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "2223:17:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 914,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2279:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint128_$",
																						"typeString": "type(uint128)"
																					},
																					"typeName": {
																						"id": 913,
																						"name": "uint128",
																						"nodeType": "ElementaryTypeName",
																						"src": "2279:7:13",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint128_$",
																						"typeString": "type(uint128)"
																					}
																				],
																				"id": 912,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "2274:4:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 915,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2274:13:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint128",
																				"typeString": "type(uint128)"
																			}
																		},
																		"id": 916,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "2274:17:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		{
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		}
																	],
																	"expression": {
																		"id": 900,
																		"name": "INonfungiblePositionManager",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 508,
																		"src": "2063:27:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$508_$",
																			"typeString": "type(contract INonfungiblePositionManager)"
																		}
																	},
																	"id": 901,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "CollectParams",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 491,
																	"src": "2063:41:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_struct$_CollectParams_$491_storage_ptr_$",
																		"typeString": "type(struct INonfungiblePositionManager.CollectParams storage pointer)"
																	}
																},
																"id": 917,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "structConstructorCall",
																"lValueRequested": false,
																"names": [
																	"tokenId",
																	"recipient",
																	"amount0Max",
																	"amount1Max"
																],
																"nodeType": "FunctionCall",
																"src": "2063:247:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_CollectParams_$491_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.CollectParams memory"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1982:328:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 922,
																		"name": "collectParams",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 899,
																		"src": "2349:13:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_CollectParams_$491_memory_ptr",
																			"typeString": "struct INonfungiblePositionManager.CollectParams memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_struct$_CollectParams_$491_memory_ptr",
																			"typeString": "struct INonfungiblePositionManager.CollectParams memory"
																		}
																	],
																	"expression": {
																		"id": 919,
																		"name": "positionManager",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 769,
																		"src": "2325:15:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
																			"typeString": "contract INonfungiblePositionManager"
																		}
																	},
																	"id": 921,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "collect",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 501,
																	"src": "2325:23:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_payable$_t_struct$_CollectParams_$491_memory_ptr_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (struct INonfungiblePositionManager.CollectParams memory) payable external returns (uint256,uint256)"
																	}
																},
																"id": 923,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2325:38:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"id": 924,
															"nodeType": "ExpressionStatement",
															"src": "2325:38:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 928,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 777,
																		"src": "2432:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 925,
																		"name": "positionManager",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 769,
																		"src": "2411:15:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
																			"typeString": "contract INonfungiblePositionManager"
																		}
																	},
																	"id": 927,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "burn",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 507,
																	"src": "2411:20:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_payable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) payable external"
																	}
																},
																"id": 929,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2411:29:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 930,
															"nodeType": "ExpressionStatement",
															"src": "2411:29:13"
														}
													]
												}
											},
											{
												"assignments": [
													936
												],
												"declarations": [
													{
														"constant": false,
														"id": 936,
														"mutability": "mutable",
														"name": "mintParams",
														"nodeType": "VariableDeclaration",
														"scope": 970,
														"src": "2490:56:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MintParams_$422_memory_ptr",
															"typeString": "struct INonfungiblePositionManager.MintParams"
														},
														"typeName": {
															"id": 935,
															"name": "INonfungiblePositionManager.MintParams",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 422,
															"src": "2490:38:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_MintParams_$422_storage_ptr",
																"typeString": "struct INonfungiblePositionManager.MintParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 961,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 941,
																	"name": "token0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 771,
																	"src": "2634:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 940,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2626:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 939,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2626:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:15:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 945,
																	"name": "token1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 773,
																	"src": "2675:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 944,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2667:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 943,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2667:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 946,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2667:15:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 947,
															"name": "poolFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "2705:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														{
															"id": 948,
															"name": "tickLower",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 842,
															"src": "2741:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"id": 949,
															"name": "tickUpper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 844,
															"src": "2779:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"id": 950,
															"name": "amount0Desired",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 838,
															"src": "2822:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 951,
															"name": "amount1Desired",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "2870:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 952,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2914:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 953,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2945:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"arguments": [
																{
																	"id": 956,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2983:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_LiquidityManager_$972",
																		"typeString": "contract LiquidityManager"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_LiquidityManager_$972",
																		"typeString": "contract LiquidityManager"
																	}
																],
																"id": 955,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2975:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 954,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2975:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 957,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2975:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 958,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3016:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 959,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "3016:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 937,
															"name": "INonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 508,
															"src": "2561:27:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$508_$",
																"typeString": "type(contract INonfungiblePositionManager)"
															}
														},
														"id": 938,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "MintParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 422,
														"src": "2561:38:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_MintParams_$422_storage_ptr_$",
															"typeString": "type(struct INonfungiblePositionManager.MintParams storage pointer)"
														}
													},
													"id": 960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee",
														"tickLower",
														"tickUpper",
														"amount0Desired",
														"amount1Desired",
														"amount0Min",
														"amount1Min",
														"recipient",
														"deadline"
													],
													"nodeType": "FunctionCall",
													"src": "2561:485:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$422_memory_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2490:556:13"
											},
											{
												"expression": {
													"id": 968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 962,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 777,
																"src": "3058:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															null,
															null,
															null
														],
														"id": 963,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "3057:15:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$__$__$__$",
															"typeString": "tuple(uint256,,,)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 966,
																"name": "mintParams",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 936,
																"src": "3096:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_MintParams_$422_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.MintParams memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_MintParams_$422_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.MintParams memory"
																}
															],
															"expression": {
																"id": 964,
																"name": "positionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 769,
																"src": "3075:15:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_INonfungiblePositionManager_$508",
																	"typeString": "contract INonfungiblePositionManager"
																}
															},
															"id": 965,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mint",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 436,
															"src": "3075:20:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_struct$_MintParams_$422_memory_ptr_$returns$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
																"typeString": "function (struct INonfungiblePositionManager.MintParams memory) payable external returns (uint256,uint128,uint256,uint256)"
															}
														},
														"id": 967,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3075:32:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint128,uint256,uint256)"
														}
													},
													"src": "3057:50:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 969,
												"nodeType": "ExpressionStatement",
												"src": "3057:50:13"
											}
										]
									},
									"functionSelector": "65237b90",
									"id": 971,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 847,
											"modifierName": {
												"id": 846,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 836,
												"src": "1233:9:13",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1233:9:13"
										}
									],
									"name": "adjustLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 838,
												"mutability": "mutable",
												"name": "amount0Desired",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "1113:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 837,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1113:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "amount1Desired",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "1145:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1145:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "1177:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 841,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1177:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "1202:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 843,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1202:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:120:13"
									},
									"returnParameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1243:0:13"
									},
									"scope": 972,
									"src": "1079:2035:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 973,
							"src": "289:2827:13"
						}
					],
					"src": "32:3085:13"
				},
				"id": 13
			}
		}
	}
}